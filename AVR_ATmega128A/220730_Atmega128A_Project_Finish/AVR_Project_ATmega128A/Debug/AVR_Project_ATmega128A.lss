
AVR_Project_ATmega128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000010fa  0000118e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  0080011a  0080011a  000011a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001998  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc4  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d23  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071d  00000000  00000000  00004b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b2b  00000000  00000000  00005245  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0d c1       	rjmp	.+538    	; 0x25c <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ef       	ldi	r30, 0xFA	; 250
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 31       	cpi	r26, 0x1A	; 26
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e1       	ldi	r26, 0x1A	; 26
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3b       	cpi	r26, 0xBB	; 187
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e9 d1       	rcall	.+978    	; 0x496 <main>
      c4:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <I2C_TransCheck_ACK>:

void I2C_Init(void)
{
	DDRD |= (1<< I2C_SCL)|(1<< I2C_SDA);
	TWBR=32; //SCL frequency is 200kHz
	TWSR=0x00; //set presca1er bits to zero
      ca:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      ce:	99 23       	and	r25, r25
      d0:	e4 f7       	brge	.-8      	; 0xca <I2C_TransCheck_ACK>
      d2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
      d6:	98 7f       	andi	r25, 0xF8	; 248
      d8:	98 17       	cp	r25, r24
      da:	11 f0       	breq	.+4      	; 0xe0 <I2C_TransCheck_ACK+0x16>
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	08 95       	ret
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	08 95       	ret

000000e4 <I2C_Start>:
}

unsigned char I2C_Start(void)
{
	TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);
      e4:	e4 e7       	ldi	r30, 0x74	; 116
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	84 6a       	ori	r24, 0xA4	; 164
      ec:	80 83       	st	Z, r24
	 return I2C_TransCheck_ACK(I2C_START);
      ee:	88 e0       	ldi	r24, 0x08	; 8
      f0:	ec cf       	rjmp	.-40     	; 0xca <I2C_TransCheck_ACK>
}
      f2:	08 95       	ret

000000f4 <I2C_Stop>:

void I2C_Stop(void)
{
	TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
      f4:	84 e9       	ldi	r24, 0x94	; 148
      f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      fa:	08 95       	ret

000000fc <I2C_Write_SLAW>:
}
/***************************************/

unsigned char I2C_Write_SLAW(unsigned char Addr)
{
	TWDR = Addr;
      fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);      // SLA + W packet send
     100:	84 e8       	ldi	r24, 0x84	; 132
     102:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	return I2C_TransCheck_ACK(MT_SLA_ACK);
     106:	88 e1       	ldi	r24, 0x18	; 24
     108:	e0 cf       	rjmp	.-64     	; 0xca <I2C_TransCheck_ACK>
}
     10a:	08 95       	ret

0000010c <I2C_Write_SLAR>:

unsigned char I2C_Write_SLAR(unsigned char Addr)
{
	TWDR = Addr|0x01;
     10c:	81 60       	ori	r24, 0x01	; 1
     10e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);  // SLA + R packet send
     112:	84 e8       	ldi	r24, 0x84	; 132
     114:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	return I2C_TransCheck_ACK(MR_SLA_ACK);
     118:	80 e4       	ldi	r24, 0x40	; 64
     11a:	d7 cf       	rjmp	.-82     	; 0xca <I2C_TransCheck_ACK>
}
     11c:	08 95       	ret

0000011e <I2C_Write>:

unsigned char I2C_Write(uint8_t var_i2cData_u8)
{
	TWDR = var_i2cData_u8 ;
     11e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = ((1<< TWINT) | (1<<TWEN));
     122:	84 e8       	ldi	r24, 0x84	; 132
     124:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	return I2C_TransCheck_ACK(MT_DATA_ACK); 
     128:	88 e2       	ldi	r24, 0x28	; 40
     12a:	cf cf       	rjmp	.-98     	; 0xca <I2C_TransCheck_ACK>
}
     12c:	08 95       	ret

0000012e <I2C_Read>:

uint8_t I2C_Read(void)
{
	TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWEA));
     12e:	84 ec       	ldi	r24, 0xC4	; 196
     130:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while ( !(TWCR & (1 <<TWINT))); // wait recieve complete
     134:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     138:	88 23       	and	r24, r24
     13a:	e4 f7       	brge	.-8      	; 0x134 <I2C_Read+0x6>
	I2C_TransCheck_ACK(MR_DATA_ACK);
     13c:	88 e5       	ldi	r24, 0x58	; 88
     13e:	c5 df       	rcall	.-118    	; 0xca <I2C_TransCheck_ACK>
	return TWDR;
     140:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     144:	08 95       	ret

00000146 <LCD_pulse_enable>:
   // Print and then Cursor move right : DDRAM Address plus -> No Dispaly Move
   LCD_write_command(0x06);
}

void LCD_pulse_enable(void) {
   PORT_CONTROL |= (1 << E_PIN);
     146:	85 b3       	in	r24, 0x15	; 21
     148:	84 60       	ori	r24, 0x04	; 4
     14a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14c:	86 e6       	ldi	r24, 0x66	; 102
     14e:	9e e0       	ldi	r25, 0x0E	; 14
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <LCD_pulse_enable+0xa>
     154:	00 00       	nop
   _delay_ms(1);
   PORT_CONTROL &= ~(1 << E_PIN);
     156:	85 b3       	in	r24, 0x15	; 21
     158:	8b 7f       	andi	r24, 0xFB	; 251
     15a:	85 bb       	out	0x15, r24	; 21
     15c:	86 e6       	ldi	r24, 0x66	; 102
     15e:	9e e0       	ldi	r25, 0x0E	; 14
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <LCD_pulse_enable+0x1a>
     164:	00 00       	nop
     166:	08 95       	ret

00000168 <LCD_write_data>:
   _delay_ms(1);
}

void LCD_write_data(uint8_t data) {
   PORT_CONTROL |= (1 << RS_PIN);
     168:	95 b3       	in	r25, 0x15	; 21
     16a:	91 60       	ori	r25, 0x01	; 1
     16c:	95 bb       	out	0x15, r25	; 21
   PORT_DATA = data;
     16e:	8b bb       	out	0x1b, r24	; 27
   LCD_pulse_enable();
     170:	ea df       	rcall	.-44     	; 0x146 <LCD_pulse_enable>
     172:	8c ec       	ldi	r24, 0xCC	; 204
     174:	9c e1       	ldi	r25, 0x1C	; 28
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <LCD_write_data+0xe>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_write_data+0x14>
     17c:	00 00       	nop
     17e:	08 95       	ret

00000180 <LCD_write_command>:
   _delay_ms(2);
}

void LCD_write_command(uint8_t command) {
   PORT_CONTROL &= ~(1 << RS_PIN);
     180:	95 b3       	in	r25, 0x15	; 21
     182:	9e 7f       	andi	r25, 0xFE	; 254
     184:	95 bb       	out	0x15, r25	; 21
   PORT_DATA = command;
     186:	8b bb       	out	0x1b, r24	; 27
   LCD_pulse_enable();
     188:	de df       	rcall	.-68     	; 0x146 <LCD_pulse_enable>
     18a:	8c ec       	ldi	r24, 0xCC	; 204
     18c:	9c e1       	ldi	r25, 0x1C	; 28
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <LCD_write_command+0xe>
     192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_write_command+0x14>
     194:	00 00       	nop
     196:	08 95       	ret

00000198 <LCD_write_string>:
   _delay_ms(2);
}

void LCD_write_string(char *string) {
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	8c 01       	movw	r16, r24
   uint8_t i;
   for(i = 0; string[i]; i++)       // Before End String
     1a0:	c0 e0       	ldi	r28, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <LCD_write_string+0x10>
   LCD_write_data(string[i]);		// String unit print...
     1a4:	e1 df       	rcall	.-62     	; 0x168 <LCD_write_data>
   _delay_ms(2);
}

void LCD_write_string(char *string) {
   uint8_t i;
   for(i = 0; string[i]; i++)       // Before End String
     1a6:	cf 5f       	subi	r28, 0xFF	; 255
     1a8:	f8 01       	movw	r30, r16
     1aa:	ec 0f       	add	r30, r28
     1ac:	f1 1d       	adc	r31, r1
     1ae:	80 81       	ld	r24, Z
     1b0:	81 11       	cpse	r24, r1
     1b2:	f8 cf       	rjmp	.-16     	; 0x1a4 <LCD_write_string+0xc>
   LCD_write_data(string[i]);		// String unit print...
}
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	08 95       	ret

000001bc <LCD_goto_XY>:

void LCD_goto_XY(uint8_t row, uint8_t col) {
   col %= 16;						// [0 15]
     1bc:	6f 70       	andi	r22, 0x0F	; 15
   row %= 2;						// [0 1]
   
   uint8_t address = 0;
   
   if(row == 0) address = 0x80;
     1be:	98 2f       	mov	r25, r24
     1c0:	91 70       	andi	r25, 0x01	; 1
     1c2:	80 ff       	sbrs	r24, 0
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <LCD_goto_XY+0x12>
   else if(row == 1) address = 0xC0;
     1c6:	91 30       	cpi	r25, 0x01	; 1
     1c8:	21 f0       	breq	.+8      	; 0x1d2 <LCD_goto_XY+0x16>

void LCD_goto_XY(uint8_t row, uint8_t col) {
   col %= 16;						// [0 15]
   row %= 2;						// [0 1]
   
   uint8_t address = 0;
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <LCD_goto_XY+0x18>
   
   if(row == 0) address = 0x80;
     1ce:	80 e8       	ldi	r24, 0x80	; 128
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <LCD_goto_XY+0x18>
   else if(row == 1) address = 0xC0;
     1d2:	80 ec       	ldi	r24, 0xC0	; 192
   
   if(col < 16) address += col;
     1d4:	86 0f       	add	r24, r22
   
   LCD_write_command(address);   // Cursor Move
     1d6:	d4 cf       	rjmp	.-88     	; 0x180 <LCD_write_command>
     1d8:	08 95       	ret

000001da <LCD_clear>:
}

void LCD_clear(void) {
   LCD_write_command(COMMAND_CLEAR_DISPLAY); //0x01
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	d1 df       	rcall	.-94     	; 0x180 <LCD_write_command>
     1de:	8c ec       	ldi	r24, 0xCC	; 204
     1e0:	9c e1       	ldi	r25, 0x1C	; 28
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_clear+0x8>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_clear+0xe>
     1e8:	00 00       	nop
     1ea:	08 95       	ret

000001ec <LCD_init>:
     1ec:	2f ef       	ldi	r18, 0xFF	; 255
     1ee:	8f e3       	ldi	r24, 0x3F	; 63
     1f0:	92 e0       	ldi	r25, 0x02	; 2
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	80 40       	sbci	r24, 0x00	; 0
     1f6:	90 40       	sbci	r25, 0x00	; 0
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <LCD_init+0x6>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_init+0x10>
     1fc:	00 00       	nop

void LCD_init(void) {
   _delay_ms(50);   //First operate time
   
   //연결 핀을 출력으로 설정
   DDR_DATA = 0xFF;										//DDRD Data Pin Data direction
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	8a bb       	out	0x1a, r24	; 26
   PORT_DATA = 0x00;                                    //PORTD Data pin link
     202:	1b ba       	out	0x1b, r1	; 27
   DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN); 
     204:	84 b3       	in	r24, 0x14	; 20
     206:	87 60       	ori	r24, 0x07	; 7
     208:	84 bb       	out	0x14, r24	; 20
														//DDRC Control Pin Data direction
   
   // R/W pin -> LOW output -> use write Only
   PORT_CONTROL &= ~(1 << RW_PIN);                          //PORTC Control Pin link
     20a:	85 b3       	in	r24, 0x15	; 21
     20c:	8d 7f       	andi	r24, 0xFD	; 253
     20e:	85 bb       	out	0x15, r24	; 21
   
   LCD_write_command(COMMAND_8_BIT_MODE);					// 8bit Mode 0x38
     210:	88 e3       	ldi	r24, 0x38	; 56
     212:	b6 df       	rcall	.-148    	; 0x180 <LCD_write_command>
   
   //display on/off control
   // Display on, Cursor off, Cursor Blink off
   uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
   LCD_write_command(command);
     214:	8c e0       	ldi	r24, 0x0C	; 12
   
   LCD_clear();
     216:	b4 df       	rcall	.-152    	; 0x180 <LCD_write_command>
   
   // Entry Mode Set
   // Print and then Cursor move right : DDRAM Address plus -> No Dispaly Move
   LCD_write_command(0x06);
     218:	e0 df       	rcall	.-64     	; 0x1da <LCD_clear>
     21a:	86 e0       	ldi	r24, 0x06	; 6
     21c:	b1 cf       	rjmp	.-158    	; 0x180 <LCD_write_command>
     21e:	08 95       	ret

00000220 <Servo>:
float humi, temp;
char ValueString[100];

void Servo(int Angle)
{
	if (Angle == -90 )
     220:	86 3a       	cpi	r24, 0xA6	; 166
     222:	2f ef       	ldi	r18, 0xFF	; 255
     224:	92 07       	cpc	r25, r18
     226:	39 f4       	brne	.+14     	; 0x236 <Servo+0x16>
	AngleCount = 23; // PWM ON Time 2.3[ms]
     228:	87 e1       	ldi	r24, 0x17	; 23
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <AngleCount+0x1>
     230:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <AngleCount>
     234:	08 95       	ret
	else if (Angle == 0)
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	39 f4       	brne	.+14     	; 0x248 <Servo+0x28>
	AngleCount = 15; // PWM ON Time 1.5[ms]
     23a:	8f e0       	ldi	r24, 0x0F	; 15
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <AngleCount+0x1>
     242:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <AngleCount>
     246:	08 95       	ret
	else if(Angle == 90)
     248:	8a 35       	cpi	r24, 0x5A	; 90
     24a:	91 05       	cpc	r25, r1
     24c:	31 f4       	brne	.+12     	; 0x25a <Servo+0x3a>
	AngleCount = 7; // PWM ON Time 0.7[ms]
     24e:	87 e0       	ldi	r24, 0x07	; 7
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <AngleCount+0x1>
     256:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <AngleCount>
     25a:	08 95       	ret

0000025c <__vector_16>:
}

// 0.1 [msec] Timer/Counter Interrupt Funtion
ISR(TIMER0_OVF_vect)
{
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	2f 93       	push	r18
     268:	3f 93       	push	r19
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
	TCNT0 = 0x48; // Timer/Counter Init value Re-Load
     26e:	88 e4       	ldi	r24, 0x48	; 72
     270:	82 bf       	out	0x32, r24	; 50
	countingT++;
     272:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <countingT>
     276:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <countingT+0x1>
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <countingT+0x1>
     280:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <countingT>
	if(countingT <= AngleCount)
     284:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <AngleCount>
     288:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <AngleCount+0x1>
     28c:	28 17       	cp	r18, r24
     28e:	39 07       	cpc	r19, r25
     290:	24 f0       	brlt	.+8      	; 0x29a <__vector_16+0x3e>
	PORTB |= (1 << PORTB7); // PWM ON Time
     292:	88 b3       	in	r24, 0x18	; 24
     294:	80 68       	ori	r24, 0x80	; 128
     296:	88 bb       	out	0x18, r24	; 24
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <__vector_16+0x44>
	else
	//PORTB &= (0 << PORTB7); // PWM OFF Time
	PORTB &= ~(1 << PORTB7); // PWM OFF Time
     29a:	88 b3       	in	r24, 0x18	; 24
     29c:	8f 77       	andi	r24, 0x7F	; 127
     29e:	88 bb       	out	0x18, r24	; 24

	if(countingT >= 200)
     2a0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <countingT>
     2a4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <countingT+0x1>
     2a8:	88 3c       	cpi	r24, 0xC8	; 200
     2aa:	91 05       	cpc	r25, r1
     2ac:	24 f0       	brlt	.+8      	; 0x2b6 <__vector_16+0x5a>
	countingT = 0; // 20[ms] frequency PWM
     2ae:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <countingT+0x1>
     2b2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <countingT>
}
     2b6:	9f 91       	pop	r25
     2b8:	8f 91       	pop	r24
     2ba:	3f 91       	pop	r19
     2bc:	2f 91       	pop	r18
     2be:	0f 90       	pop	r0
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	0f 90       	pop	r0
     2c4:	1f 90       	pop	r1
     2c6:	18 95       	reti

000002c8 <Receive_Ardu>:
	
void Receive_Ardu(void){
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <Receive_Ardu+0x6>
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <Receive_Ardu+0x8>
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
	
	char* pptr[2];
	
	do
	{
		data = UART1_receive();
     2d4:	75 d1       	rcall	.+746    	; 0x5c0 <UART1_receive>
     2d6:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <data>
		msg[idx] = data;
     2da:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <idx>
     2de:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <idx+0x1>
     2e2:	e4 5c       	subi	r30, 0xC4	; 196
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
		
		UART0_transmit(msg[idx]);
     2e6:	80 83       	st	Z, r24
     2e8:	67 d1       	rcall	.+718    	; 0x5b8 <UART0_transmit>
		idx++;
     2ea:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <idx>
     2ee:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <idx+0x1>
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <idx+0x1>
     2f8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <idx>
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	9f e8       	ldi	r25, 0x8F	; 143
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <Receive_Ardu+0x38>
     304:	00 c0       	rjmp	.+0      	; 0x306 <Receive_Ardu+0x3e>
     306:	00 00       	nop
		_delay_ms(10);
		
		if(msg[idx-1] == '@'){
     308:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <idx>
     30c:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <idx+0x1>
     310:	e5 5c       	subi	r30, 0xC5	; 197
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	80 81       	ld	r24, Z
     316:	80 34       	cpi	r24, 0x40	; 64
     318:	09 f0       	breq	.+2      	; 0x31c <Receive_Ardu+0x54>
     31a:	3b c0       	rjmp	.+118    	; 0x392 <Receive_Ardu+0xca>
			char* ptr = strtok(msg,"#"); //Using Parsing Point : #
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	71 e0       	ldi	r23, 0x01	; 1
     320:	8c e3       	ldi	r24, 0x3C	; 60
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	db d3       	rcall	.+1974   	; 0xadc <strtok>
			while(ptr != NULL){
     326:	1d c0       	rjmp	.+58     	; 0x362 <Receive_Ardu+0x9a>
				pptr[i]=ptr;
     328:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <i>
     32c:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <i+0x1>
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	21 e0       	ldi	r18, 0x01	; 1
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	2c 0f       	add	r18, r28
     33a:	3d 1f       	adc	r19, r29
     33c:	e2 0f       	add	r30, r18
     33e:	f3 1f       	adc	r31, r19
     340:	91 83       	std	Z+1, r25	; 0x01
     342:	80 83       	st	Z, r24
				ptr = strtok(NULL, "@"); // Second data : n get -> End Clearly  by @
     344:	62 e0       	ldi	r22, 0x02	; 2
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	c7 d3       	rcall	.+1934   	; 0xadc <strtok>
				i++;
     34e:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <i>
     352:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <i+0x1>
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <i+0x1>
     35e:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <i>
		idx++;
		_delay_ms(10);
		
		if(msg[idx-1] == '@'){
			char* ptr = strtok(msg,"#"); //Using Parsing Point : #
			while(ptr != NULL){
     362:	00 97       	sbiw	r24, 0x00	; 0
				pptr[i]=ptr;
				ptr = strtok(NULL, "@"); // Second data : n get -> End Clearly  by @
				i++;
			}
			m = atoi(pptr[0]);
     364:	09 f7       	brne	.-62     	; 0x328 <Receive_Ardu+0x60>
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	9b d3       	rcall	.+1846   	; 0xaa2 <atoi>
     36c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <m+0x1>
     370:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <m>
			n = atoi(pptr[1]);
     374:	8b 81       	ldd	r24, Y+3	; 0x03
     376:	9c 81       	ldd	r25, Y+4	; 0x04
     378:	94 d3       	rcall	.+1832   	; 0xaa2 <atoi>
     37a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <n+0x1>
     37e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <n>
			idx = 0;
     382:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <idx+0x1>
     386:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <idx>
			i = 0;			
     38a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <i+0x1>
     38e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <i>
			
		}
	}while(data != '@');
     392:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <data>
     396:	80 34       	cpi	r24, 0x40	; 64
     398:	09 f0       	breq	.+2      	; 0x39c <Receive_Ardu+0xd4>
     39a:	9c cf       	rjmp	.-200    	; 0x2d4 <Receive_Ardu+0xc>
}
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <Dust_LCDshow>:

void Dust_LCDshow(void)
{		
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
	sprintf(LCD_hum, "h : %d", (int)humi);
     3ae:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <humi>
     3b2:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <humi+0x1>
     3b6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <humi+0x2>
     3ba:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <humi+0x3>
     3be:	4f d2       	rcall	.+1182   	; 0x85e <__fixsfsi>
     3c0:	7f 93       	push	r23
     3c2:	6f 93       	push	r22
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	86 e2       	ldi	r24, 0x26	; 38
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	b5 d3       	rcall	.+1898   	; 0xb40 <sprintf>
	sprintf(LCD_tem, "t : %d", (int)temp);
     3d6:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <temp>
     3da:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <temp+0x1>
     3de:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <temp+0x2>
     3e2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <temp+0x3>
     3e6:	3b d2       	rcall	.+1142   	; 0x85e <__fixsfsi>
     3e8:	7f 93       	push	r23
     3ea:	6f 93       	push	r22
     3ec:	8b e0       	ldi	r24, 0x0B	; 11
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	9f 93       	push	r25
     3f2:	8f 93       	push	r24
     3f4:	8c e1       	ldi	r24, 0x1C	; 28
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	9f 93       	push	r25
     3fa:	8f 93       	push	r24
	LCD_clear();
     3fc:	a1 d3       	rcall	.+1858   	; 0xb40 <sprintf>
     3fe:	ed de       	rcall	.-550    	; 0x1da <LCD_clear>
	LCD_goto_XY(0, 0);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	db de       	rcall	.-586    	; 0x1bc <LCD_goto_XY>
	LCD_write_string("S: ");				// S = Small Size Dust
     406:	82 e1       	ldi	r24, 0x12	; 18
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	c6 de       	rcall	.-628    	; 0x198 <LCD_write_string>
     40c:	63 e0       	ldi	r22, 0x03	; 3
	LCD_goto_XY(0, 3);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	d5 de       	rcall	.-598    	; 0x1bc <LCD_goto_XY>
     412:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <m+0x1>
	sprintf(LCD_msg, "%d", m);
     416:	8f 93       	push	r24
     418:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <m>
     41c:	8f 93       	push	r24
     41e:	c8 e0       	ldi	r28, 0x08	; 8
     420:	d1 e0       	ldi	r29, 0x01	; 1
     422:	df 93       	push	r29
     424:	cf 93       	push	r28
     426:	84 e3       	ldi	r24, 0x34	; 52
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	9f 93       	push	r25
     42c:	8f 93       	push	r24
     42e:	88 d3       	rcall	.+1808   	; 0xb40 <sprintf>
	LCD_write_string(LCD_msg);
     430:	84 e3       	ldi	r24, 0x34	; 52
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	b1 de       	rcall	.-670    	; 0x198 <LCD_write_string>
	LCD_goto_XY(0, 8);
     436:	68 e0       	ldi	r22, 0x08	; 8
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	c0 de       	rcall	.-640    	; 0x1bc <LCD_goto_XY>
     43c:	86 e1       	ldi	r24, 0x16	; 22
	LCD_write_string("L: ");				// L = Large Size Dust
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	ab de       	rcall	.-682    	; 0x198 <LCD_write_string>
     442:	6b e0       	ldi	r22, 0x0B	; 11
     444:	80 e0       	ldi	r24, 0x00	; 0
	LCD_goto_XY(0, 11);
     446:	ba de       	rcall	.-652    	; 0x1bc <LCD_goto_XY>
     448:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <n+0x1>
	sprintf(LCD_msg2, "%d", n);
     44c:	8f 93       	push	r24
     44e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <n>
     452:	8f 93       	push	r24
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	80 e3       	ldi	r24, 0x30	; 48
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	9f 93       	push	r25
     45e:	8f 93       	push	r24
     460:	6f d3       	rcall	.+1758   	; 0xb40 <sprintf>
	LCD_write_string(LCD_msg2);
     462:	80 e3       	ldi	r24, 0x30	; 48
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	98 de       	rcall	.-720    	; 0x198 <LCD_write_string>
	LCD_goto_XY(1, 0);
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	a7 de       	rcall	.-690    	; 0x1bc <LCD_goto_XY>
     46e:	86 e2       	ldi	r24, 0x26	; 38
	LCD_write_string(LCD_hum);
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	92 de       	rcall	.-732    	; 0x198 <LCD_write_string>
     474:	68 e0       	ldi	r22, 0x08	; 8
     476:	81 e0       	ldi	r24, 0x01	; 1
	LCD_goto_XY(1, 8);
     478:	a1 de       	rcall	.-702    	; 0x1bc <LCD_goto_XY>
     47a:	8c e1       	ldi	r24, 0x1C	; 28
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	8c de       	rcall	.-744    	; 0x198 <LCD_write_string>
	LCD_write_string(LCD_tem);
     480:	8d b7       	in	r24, 0x3d	; 61
     482:	9e b7       	in	r25, 0x3e	; 62
     484:	48 96       	adiw	r24, 0x18	; 24
     486:	0f b6       	in	r0, 0x3f	; 63
}
     488:	f8 94       	cli
     48a:	9e bf       	out	0x3e, r25	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	8d bf       	out	0x3d, r24	; 61
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <main>:
     496:	87 b3       	in	r24, 0x17	; 23
     498:	80 68       	ori	r24, 0x80	; 128
     49a:	87 bb       	out	0x17, r24	; 23
     49c:	87 b3       	in	r24, 0x17	; 23

int main(void)
{		
	//Servo Motor Initialization
	DDRB |= (1<<DDB7);
	DDRB |= (1<<DDB1);
     49e:	82 60       	ori	r24, 0x02	; 2
     4a0:	87 bb       	out	0x17, r24	; 23
		
	ASSR = 0;			// Using Inner Clock
     4a2:	10 be       	out	0x30, r1	; 48
	TCCR0 = 0x02;		// /8 prescaler
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x01;		// Using Timer/Count 0 Interrupt 
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	87 bf       	out	0x37, r24	; 55
	AngleCount = 15;	// Init Servo Position = 0 setting
     4ac:	8f e0       	ldi	r24, 0x0F	; 15
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <AngleCount+0x1>
     4b4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <AngleCount>
	TCNT0 = 0x48;		// 0.1 [msec] Timer/Interrupt value Setting
     4b8:	88 e4       	ldi	r24, 0x48	; 72
     4ba:	82 bf       	out	0x32, r24	; 50
	TIFR = 0;
     4bc:	16 be       	out	0x36, r1	; 54
	
	UART_INIT();
     4be:	87 d0       	rcall	.+270    	; 0x5ce <UART_INIT>
	LCD_init();		
     4c0:	95 de       	rcall	.-726    	; 0x1ec <LCD_init>
     4c2:	78 94       	sei
	
	sei();
     4c4:	41 e0       	ldi	r20, 0x01	; 1
	
	int window_flag = 1;
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <m>
    
	/* Replace with your application code */
    while (1) 
	{		
		// if weather not clean...
		if((m > 150) && (n >150) && (window_flag==0))
     4cc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <m+0x1>
     4d0:	87 39       	cpi	r24, 0x97	; 151
     4d2:	91 05       	cpc	r25, r1
     4d4:	9c f1       	brlt	.+102    	; 0x53c <main+0xa6>
     4d6:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <n>
     4da:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <n+0x1>
     4de:	27 39       	cpi	r18, 0x97	; 151
     4e0:	31 05       	cpc	r19, r1
     4e2:	64 f1       	brlt	.+88     	; 0x53c <main+0xa6>
     4e4:	41 15       	cp	r20, r1
     4e6:	51 05       	cpc	r21, r1
     4e8:	49 f5       	brne	.+82     	; 0x53c <main+0xa6>
		{
			UART0_transmit('\n');
     4ea:	8a e0       	ldi	r24, 0x0A	; 10
     4ec:	65 d0       	rcall	.+202    	; 0x5b8 <UART0_transmit>
			UART0_transmit('\r');
     4ee:	8d e0       	ldi	r24, 0x0D	; 13
     4f0:	63 d0       	rcall	.+198    	; 0x5b8 <UART0_transmit>
			Dust_LCDshow();
     4f2:	5b df       	rcall	.-330    	; 0x3aa <Dust_LCDshow>
     4f4:	fb d0       	rcall	.+502    	; 0x6ec <readHumidity>
			humi = readHumidity();
     4f6:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <humi>
     4fa:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <humi+0x1>
     4fe:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <humi+0x2>
     502:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <humi+0x3>
     506:	1c d1       	rcall	.+568    	; 0x740 <readTemperature>
			temp = readTemperature();
     508:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <temp>
     50c:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <temp+0x1>
     510:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <temp+0x2>
     514:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <temp+0x3>
     518:	80 e0       	ldi	r24, 0x00	; 0
			
			Servo(0);
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	81 de       	rcall	.-766    	; 0x220 <Servo>
     51e:	2f ef       	ldi	r18, 0xFF	; 255
     520:	8f e7       	ldi	r24, 0x7F	; 127
     522:	96 e1       	ldi	r25, 0x16	; 22
     524:	21 50       	subi	r18, 0x01	; 1
     526:	80 40       	sbci	r24, 0x00	; 0
     528:	90 40       	sbci	r25, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <main+0x8e>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <main+0x98>
     52e:	00 00       	nop
     530:	88 b3       	in	r24, 0x18	; 24
			_delay_ms(500);
			PORTB &= (0 << PORTB1);					
     532:	18 ba       	out	0x18, r1	; 24
     534:	c9 de       	rcall	.-622    	; 0x2c8 <Receive_Ardu>
			Receive_Ardu();
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	50 e0       	ldi	r21, 0x00	; 0
			
			window_flag = 1;				
     53a:	c6 cf       	rjmp	.-116    	; 0x4c8 <main+0x32>
     53c:	87 39       	cpi	r24, 0x97	; 151
     53e:	91 05       	cpc	r25, r1
		}
		// else outside of window is not clean 
		else if((m <= 150) || (n <= 150))
     540:	44 f0       	brlt	.+16     	; 0x552 <main+0xbc>
     542:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <n>
     546:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <n+0x1>
     54a:	87 39       	cpi	r24, 0x97	; 151
     54c:	91 05       	cpc	r25, r1
     54e:	0c f0       	brlt	.+2      	; 0x552 <main+0xbc>
		{
			UART0_transmit('\n');	//For Serial Putty Readability 
     550:	bb cf       	rjmp	.-138    	; 0x4c8 <main+0x32>
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	31 d0       	rcall	.+98     	; 0x5b8 <UART0_transmit>
			UART0_transmit('\r');
     556:	8d e0       	ldi	r24, 0x0D	; 13
     558:	2f d0       	rcall	.+94     	; 0x5b8 <UART0_transmit>
			
			humi = readHumidity();
     55a:	c8 d0       	rcall	.+400    	; 0x6ec <readHumidity>
     55c:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <humi>
     560:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <humi+0x1>
     564:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <humi+0x2>
     568:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <humi+0x3>
			temp = readTemperature();
     56c:	e9 d0       	rcall	.+466    	; 0x740 <readTemperature>
     56e:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <temp>
     572:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <temp+0x1>
     576:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <temp+0x2>
     57a:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <temp+0x3>
			
			Receive_Ardu();
     57e:	a4 de       	rcall	.-696    	; 0x2c8 <Receive_Ardu>
			Dust_LCDshow();
     580:	14 df       	rcall	.-472    	; 0x3aa <Dust_LCDshow>
     582:	8a e5       	ldi	r24, 0x5A	; 90
			
			Servo(90);			// close the door
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	4c de       	rcall	.-872    	; 0x220 <Servo>
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	8f e7       	ldi	r24, 0x7F	; 127
     58c:	96 e1       	ldi	r25, 0x16	; 22
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <main+0xf8>
     596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x102>
     598:	00 00       	nop
     59a:	88 b3       	in	r24, 0x18	; 24
     59c:	82 60       	ori	r24, 0x02	; 2
			_delay_ms(500);			
			PORTB |= (1 << PORTB1);		
     59e:	88 bb       	out	0x18, r24	; 24
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	8f e7       	ldi	r24, 0x7F	; 127
     5a4:	96 e1       	ldi	r25, 0x16	; 22
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x110>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x11a>
     5b0:	00 00       	nop
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
			window_flag = 0;
     5b6:	88 cf       	rjmp	.-240    	; 0x4c8 <main+0x32>

000005b8 <UART0_transmit>:
     5b8:	5d 9b       	sbis	0x0b, 5	; 11
     5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <UART0_transmit>
	while(!(UCSR0A & (1<<RXC1)));
	// (1<<UDRE0) : Not Change -> UDRE0 = 5;
	// UCSR0A
	// empty State 1 & 1 = 1 -> 0   : Final 0   => Get out while()
	return UDR0;
}
     5bc:	8c b9       	out	0x0c, r24	; 12
     5be:	08 95       	ret

000005c0 <UART1_receive>:

char UART1_receive(void)
{
	while(!(UCSR1A & (1<<RXC1)));
     5c0:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     5c4:	88 23       	and	r24, r24
     5c6:	e4 f7       	brge	.-8      	; 0x5c0 <UART1_receive>
	return UDR1;
     5c8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
     5cc:	08 95       	ret

000005ce <UART_INIT>:

void UART_INIT(void)
{
	DDRE = 0xFE;
     5ce:	2e ef       	ldi	r18, 0xFE	; 254
     5d0:	22 b9       	out	0x02, r18	; 2
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     5d2:	98 e1       	ldi	r25, 0x18	; 24
     5d4:	9a b9       	out	0x0a, r25	; 10
	//UCSR0C = 0x06;
	UBRR0L = 95;	//baudrate
     5d6:	8f e5       	ldi	r24, 0x5F	; 95
     5d8:	89 b9       	out	0x09, r24	; 9
	
	DDRD = 0xFE;
     5da:	21 bb       	out	0x11, r18	; 17
	UCSR1B = (1<<RXEN0) | (1<<TXEN0);
     5dc:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UBRR1L = 95;
     5e0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     5e4:	08 95       	ret

000005e6 <checkCRC>:
#include "sht20.h"

uint8_t checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
	uint32_t remainder = (uint32_t)message_from_sensor << 8;
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	ba 2f       	mov	r27, r26
     5fc:	a9 2f       	mov	r26, r25
     5fe:	98 2f       	mov	r25, r24
     600:	88 27       	eor	r24, r24
	remainder |= check_value_from_sensor;
     602:	86 2b       	or	r24, r22
	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
	for(int i = 0 ; i < 16 ; i++){
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0

uint8_t checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
	uint32_t remainder = (uint32_t)message_from_sensor << 8;
	remainder |= check_value_from_sensor;
	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
     608:	0f 2e       	mov	r0, r31
     60a:	c1 2c       	mov	r12, r1
     60c:	f0 e8       	ldi	r31, 0x80	; 128
     60e:	df 2e       	mov	r13, r31
     610:	f8 e9       	ldi	r31, 0x98	; 152
     612:	ef 2e       	mov	r14, r31
     614:	f1 2c       	mov	r15, r1
     616:	f0 2d       	mov	r31, r0
	for(int i = 0 ; i < 16 ; i++){
     618:	19 c0       	rjmp	.+50     	; 0x64c <checkCRC+0x66>
		if(remainder & (uint32_t)1 << (23 - i)){
     61a:	47 e1       	ldi	r20, 0x17	; 23
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	42 1b       	sub	r20, r18
     620:	53 0b       	sbc	r21, r19
     622:	4c 01       	movw	r8, r24
     624:	5d 01       	movw	r10, r26
     626:	04 c0       	rjmp	.+8      	; 0x630 <checkCRC+0x4a>
     628:	b6 94       	lsr	r11
     62a:	a7 94       	ror	r10
     62c:	97 94       	ror	r9
     62e:	87 94       	ror	r8
     630:	4a 95       	dec	r20
     632:	d2 f7       	brpl	.-12     	; 0x628 <checkCRC+0x42>
     634:	80 fe       	sbrs	r8, 0
     636:	04 c0       	rjmp	.+8      	; 0x640 <checkCRC+0x5a>
			remainder ^= divsor;
     638:	8c 25       	eor	r24, r12
     63a:	9d 25       	eor	r25, r13
     63c:	ae 25       	eor	r26, r14
     63e:	bf 25       	eor	r27, r15
		}
		divsor >>= 1;
     640:	f6 94       	lsr	r15
     642:	e7 94       	ror	r14
     644:	d7 94       	ror	r13
     646:	c7 94       	ror	r12
uint8_t checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
	uint32_t remainder = (uint32_t)message_from_sensor << 8;
	remainder |= check_value_from_sensor;
	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
	for(int i = 0 ; i < 16 ; i++){
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	20 31       	cpi	r18, 0x10	; 16
     64e:	31 05       	cpc	r19, r1
     650:	24 f3       	brlt	.-56     	; 0x61a <checkCRC+0x34>
			remainder ^= divsor;
		}
		divsor >>= 1;
	}
	return (uint8_t)remainder;
}
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	08 95       	ret

00000664 <readValue>:

uint16_t readValue(unsigned char cmd)
{
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	c8 2f       	mov	r28, r24
	unsigned char toRead;
	unsigned char counter;
	unsigned char msb, lsb, checksum;
	uint16_t rawValue;
	
	I2C_Start();
     66c:	3b dd       	rcall	.-1418   	; 0xe4 <I2C_Start>
	I2C_Write_SLAW(SLAVE_ADDRESS);
     66e:	80 e8       	ldi	r24, 0x80	; 128
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	44 dd       	rcall	.-1400   	; 0xfc <I2C_Write_SLAW>
	I2C_Write(cmd);
     674:	8c 2f       	mov	r24, r28
     676:	53 dd       	rcall	.-1370   	; 0x11e <I2C_Write>
     678:	26 e0       	ldi	r18, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	2a 95       	dec	r18
     67c:	f1 f7       	brne	.-4      	; 0x67a <readValue+0x16>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <readValue+0x1c>
	_delay_us(20);
	I2C_Stop();
     680:	39 dd       	rcall	.-1422   	; 0xf4 <I2C_Stop>
     682:	c0 e0       	ldi	r28, 0x00	; 0
	
	for(counter =0; counter < MAX_COUNTER ; counter++)
     684:	10 c0       	rjmp	.+32     	; 0x6a6 <readValue+0x42>
     686:	87 ea       	ldi	r24, 0xA7	; 167
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     688:	91 e6       	ldi	r25, 0x61	; 97
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <readValue+0x26>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <readValue+0x2c>
     690:	00 00       	nop
	{
		_delay_ms(DELAY_INTERVAL);
		I2C_Start();
     692:	28 dd       	rcall	.-1456   	; 0xe4 <I2C_Start>
     694:	80 e8       	ldi	r24, 0x80	; 128
		toRead = I2C_Write_SLAR(SLAVE_ADDRESS);
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	39 dd       	rcall	.-1422   	; 0x10c <I2C_Write_SLAR>
     69a:	88 23       	and	r24, r24
		if(toRead == 0)
     69c:	31 f0       	breq	.+12     	; 0x6aa <readValue+0x46>
     69e:	81 30       	cpi	r24, 0x01	; 1
		break;
		else if(toRead ==1)
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <readValue+0x40>
     6a2:	28 dd       	rcall	.-1456   	; 0xf4 <I2C_Stop>
		I2C_Stop();
     6a4:	cf 5f       	subi	r28, 0xFF	; 255
	I2C_Write_SLAW(SLAVE_ADDRESS);
	I2C_Write(cmd);
	_delay_us(20);
	I2C_Stop();
	
	for(counter =0; counter < MAX_COUNTER ; counter++)
     6a6:	c4 36       	cpi	r28, 0x64	; 100
		if(toRead == 0)
		break;
		else if(toRead ==1)
		I2C_Stop();
	}
	if(counter == MAX_COUNTER)
     6a8:	70 f3       	brcs	.-36     	; 0x686 <readValue+0x22>
	{
		return ERROR_I2C_TIMEOUT;
	}
	
	msb = I2C_Read();
     6aa:	c4 36       	cpi	r28, 0x64	; 100
     6ac:	b1 f0       	breq	.+44     	; 0x6da <readValue+0x76>
     6ae:	3f dd       	rcall	.-1410   	; 0x12e <I2C_Read>
	lsb = I2C_Read();
     6b0:	c8 2f       	mov	r28, r24
     6b2:	3d dd       	rcall	.-1414   	; 0x12e <I2C_Read>
     6b4:	d8 2f       	mov	r29, r24
	checksum = I2C_Read();
     6b6:	3b dd       	rcall	.-1418   	; 0x12e <I2C_Read>
     6b8:	18 2f       	mov	r17, r24
     6ba:	1c dd       	rcall	.-1480   	; 0xf4 <I2C_Stop>
	I2C_Stop();
     6bc:	8c 2f       	mov	r24, r28
	rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	98 2f       	mov	r25, r24
     6c2:	88 27       	eor	r24, r24
     6c4:	9c 01       	movw	r18, r24
     6c6:	2d 2b       	or	r18, r29
     6c8:	e9 01       	movw	r28, r18
     6ca:	61 2f       	mov	r22, r17
	
	if(checkCRC(rawValue, checksum) != 0){
     6cc:	ce 01       	movw	r24, r28
     6ce:	8b df       	rcall	.-234    	; 0x5e6 <checkCRC>
     6d0:	81 11       	cpse	r24, r1
     6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <readValue+0x7c>
     6d4:	ce 01       	movw	r24, r28
     6d6:	8c 7f       	andi	r24, 0xFC	; 252
		return ERROR_BAD_CRC;
	}
	
	return (rawValue& 0xFFFC);
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <readValue+0x80>
     6da:	86 ee       	ldi	r24, 0xE6	; 230
     6dc:	93 e0       	ldi	r25, 0x03	; 3
		else if(toRead ==1)
		I2C_Stop();
	}
	if(counter == MAX_COUNTER)
	{
		return ERROR_I2C_TIMEOUT;
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <readValue+0x80>
     6e0:	87 ee       	ldi	r24, 0xE7	; 231
     6e2:	93 e0       	ldi	r25, 0x03	; 3
	checksum = I2C_Read();
	I2C_Stop();
	rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
	
	if(checkCRC(rawValue, checksum) != 0){
		return ERROR_BAD_CRC;
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
	}
	
	return (rawValue& 0xFFFC);
}
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <readHumidity>:
     6ec:	85 ef       	ldi	r24, 0xF5	; 245
     6ee:	ba df       	rcall	.-140    	; 0x664 <readValue>
float readHumidity(void)
{
	float temp;
	float rh;

	uint16_t rawHumidity = readValue(TRIGGER_HUMD_MEASURE_NOHOLD);
     6f0:	bc 01       	movw	r22, r24
	if(rawHumidity == ERROR_I2C_TIMEOUT || rawHumidity == ERROR_BAD_CRC){
     6f2:	86 5e       	subi	r24, 0xE6	; 230
     6f4:	93 40       	sbci	r25, 0x03	; 3
     6f6:	02 97       	sbiw	r24, 0x02	; 2
     6f8:	40 f4       	brcc	.+16     	; 0x70a <readHumidity+0x1e>
		return(rawHumidity);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	e0 d0       	rcall	.+448    	; 0x8c0 <__floatunsisf>
     700:	56 2f       	mov	r21, r22
     702:	47 2f       	mov	r20, r23
     704:	38 2f       	mov	r19, r24
     706:	29 2f       	mov	r18, r25
     708:	16 c0       	rjmp	.+44     	; 0x736 <readHumidity+0x4a>
	}
	temp = rawHumidity / 65536.0;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	d8 d0       	rcall	.+432    	; 0x8c0 <__floatunsisf>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	57 e3       	ldi	r21, 0x37	; 55
     718:	61 d1       	rcall	.+706    	; 0x9dc <__mulsf3>
	temp = temp * 125.0;
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	4a ef       	ldi	r20, 0xFA	; 250
     720:	52 e4       	ldi	r21, 0x42	; 66
     722:	5c d1       	rcall	.+696    	; 0x9dc <__mulsf3>
	rh = temp - 6.0;
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 ec       	ldi	r20, 0xC0	; 192
     72a:	50 e4       	ldi	r21, 0x40	; 64
     72c:	33 d0       	rcall	.+102    	; 0x794 <__subsf3>
     72e:	56 2f       	mov	r21, r22

	return rh;
     730:	47 2f       	mov	r20, r23
     732:	38 2f       	mov	r19, r24
     734:	29 2f       	mov	r18, r25
     736:	65 2f       	mov	r22, r21
}
     738:	74 2f       	mov	r23, r20
     73a:	83 2f       	mov	r24, r19
     73c:	92 2f       	mov	r25, r18
     73e:	08 95       	ret

00000740 <readTemperature>:
     740:	83 ef       	ldi	r24, 0xF3	; 243
float readTemperature(void)
{
	float temp;
	float realTemperature;
	
	uint16_t rawTemperature = readValue(TRIGGER_TEMP_MEASURE_NOHOLD);
     742:	90 df       	rcall	.-224    	; 0x664 <readValue>
     744:	bc 01       	movw	r22, r24
	if(rawTemperature == ERROR_I2C_TIMEOUT || rawTemperature == ERROR_BAD_CRC){
     746:	86 5e       	subi	r24, 0xE6	; 230
     748:	93 40       	sbci	r25, 0x03	; 3
     74a:	02 97       	sbiw	r24, 0x02	; 2
     74c:	40 f4       	brcc	.+16     	; 0x75e <readTemperature+0x1e>
		return(rawTemperature);
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	b6 d0       	rcall	.+364    	; 0x8c0 <__floatunsisf>
     754:	56 2f       	mov	r21, r22
     756:	47 2f       	mov	r20, r23
     758:	38 2f       	mov	r19, r24
     75a:	29 2f       	mov	r18, r25
     75c:	16 c0       	rjmp	.+44     	; 0x78a <readTemperature+0x4a>
	}
	temp = rawTemperature / 65536.0;
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	ae d0       	rcall	.+348    	; 0x8c0 <__floatunsisf>
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e8       	ldi	r20, 0x80	; 128
     76a:	57 e3       	ldi	r21, 0x37	; 55
     76c:	37 d1       	rcall	.+622    	; 0x9dc <__mulsf3>
	temp = temp * 175.72;
     76e:	22 e5       	ldi	r18, 0x52	; 82
     770:	38 eb       	ldi	r19, 0xB8	; 184
     772:	4f e2       	ldi	r20, 0x2F	; 47
     774:	53 e4       	ldi	r21, 0x43	; 67
     776:	32 d1       	rcall	.+612    	; 0x9dc <__mulsf3>
	realTemperature = temp - 46.85;
     778:	26 e6       	ldi	r18, 0x66	; 102
     77a:	36 e6       	ldi	r19, 0x66	; 102
     77c:	4b e3       	ldi	r20, 0x3B	; 59
     77e:	52 e4       	ldi	r21, 0x42	; 66
     780:	09 d0       	rcall	.+18     	; 0x794 <__subsf3>
     782:	56 2f       	mov	r21, r22

	return realTemperature;
     784:	47 2f       	mov	r20, r23
     786:	38 2f       	mov	r19, r24
     788:	29 2f       	mov	r18, r25
     78a:	65 2f       	mov	r22, r21
}
     78c:	74 2f       	mov	r23, r20
     78e:	83 2f       	mov	r24, r19
     790:	92 2f       	mov	r25, r18
     792:	08 95       	ret

00000794 <__subsf3>:
     794:	50 58       	subi	r21, 0x80	; 128

00000796 <__addsf3>:
     796:	bb 27       	eor	r27, r27
     798:	aa 27       	eor	r26, r26
     79a:	0e d0       	rcall	.+28     	; 0x7b8 <__addsf3x>
     79c:	e5 c0       	rjmp	.+458    	; 0x968 <__fp_round>
     79e:	d6 d0       	rcall	.+428    	; 0x94c <__fp_pscA>
     7a0:	30 f0       	brcs	.+12     	; 0x7ae <__addsf3+0x18>
     7a2:	db d0       	rcall	.+438    	; 0x95a <__fp_pscB>
     7a4:	20 f0       	brcs	.+8      	; 0x7ae <__addsf3+0x18>
     7a6:	31 f4       	brne	.+12     	; 0x7b4 <__addsf3+0x1e>
     7a8:	9f 3f       	cpi	r25, 0xFF	; 255
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <__addsf3+0x1a>
     7ac:	1e f4       	brtc	.+6      	; 0x7b4 <__addsf3+0x1e>
     7ae:	cb c0       	rjmp	.+406    	; 0x946 <__fp_nan>
     7b0:	0e f4       	brtc	.+2      	; 0x7b4 <__addsf3+0x1e>
     7b2:	e0 95       	com	r30
     7b4:	e7 fb       	bst	r30, 7
     7b6:	c1 c0       	rjmp	.+386    	; 0x93a <__fp_inf>

000007b8 <__addsf3x>:
     7b8:	e9 2f       	mov	r30, r25
     7ba:	e7 d0       	rcall	.+462    	; 0x98a <__fp_split3>
     7bc:	80 f3       	brcs	.-32     	; 0x79e <__addsf3+0x8>
     7be:	ba 17       	cp	r27, r26
     7c0:	62 07       	cpc	r22, r18
     7c2:	73 07       	cpc	r23, r19
     7c4:	84 07       	cpc	r24, r20
     7c6:	95 07       	cpc	r25, r21
     7c8:	18 f0       	brcs	.+6      	; 0x7d0 <__addsf3x+0x18>
     7ca:	71 f4       	brne	.+28     	; 0x7e8 <__addsf3x+0x30>
     7cc:	9e f5       	brtc	.+102    	; 0x834 <__addsf3x+0x7c>
     7ce:	ff c0       	rjmp	.+510    	; 0x9ce <__fp_zero>
     7d0:	0e f4       	brtc	.+2      	; 0x7d4 <__addsf3x+0x1c>
     7d2:	e0 95       	com	r30
     7d4:	0b 2e       	mov	r0, r27
     7d6:	ba 2f       	mov	r27, r26
     7d8:	a0 2d       	mov	r26, r0
     7da:	0b 01       	movw	r0, r22
     7dc:	b9 01       	movw	r22, r18
     7de:	90 01       	movw	r18, r0
     7e0:	0c 01       	movw	r0, r24
     7e2:	ca 01       	movw	r24, r20
     7e4:	a0 01       	movw	r20, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	ff 27       	eor	r31, r31
     7ea:	59 1b       	sub	r21, r25
     7ec:	99 f0       	breq	.+38     	; 0x814 <__addsf3x+0x5c>
     7ee:	59 3f       	cpi	r21, 0xF9	; 249
     7f0:	50 f4       	brcc	.+20     	; 0x806 <__addsf3x+0x4e>
     7f2:	50 3e       	cpi	r21, 0xE0	; 224
     7f4:	68 f1       	brcs	.+90     	; 0x850 <__addsf3x+0x98>
     7f6:	1a 16       	cp	r1, r26
     7f8:	f0 40       	sbci	r31, 0x00	; 0
     7fa:	a2 2f       	mov	r26, r18
     7fc:	23 2f       	mov	r18, r19
     7fe:	34 2f       	mov	r19, r20
     800:	44 27       	eor	r20, r20
     802:	58 5f       	subi	r21, 0xF8	; 248
     804:	f3 cf       	rjmp	.-26     	; 0x7ec <__addsf3x+0x34>
     806:	46 95       	lsr	r20
     808:	37 95       	ror	r19
     80a:	27 95       	ror	r18
     80c:	a7 95       	ror	r26
     80e:	f0 40       	sbci	r31, 0x00	; 0
     810:	53 95       	inc	r21
     812:	c9 f7       	brne	.-14     	; 0x806 <__addsf3x+0x4e>
     814:	7e f4       	brtc	.+30     	; 0x834 <__addsf3x+0x7c>
     816:	1f 16       	cp	r1, r31
     818:	ba 0b       	sbc	r27, r26
     81a:	62 0b       	sbc	r22, r18
     81c:	73 0b       	sbc	r23, r19
     81e:	84 0b       	sbc	r24, r20
     820:	ba f0       	brmi	.+46     	; 0x850 <__addsf3x+0x98>
     822:	91 50       	subi	r25, 0x01	; 1
     824:	a1 f0       	breq	.+40     	; 0x84e <__addsf3x+0x96>
     826:	ff 0f       	add	r31, r31
     828:	bb 1f       	adc	r27, r27
     82a:	66 1f       	adc	r22, r22
     82c:	77 1f       	adc	r23, r23
     82e:	88 1f       	adc	r24, r24
     830:	c2 f7       	brpl	.-16     	; 0x822 <__addsf3x+0x6a>
     832:	0e c0       	rjmp	.+28     	; 0x850 <__addsf3x+0x98>
     834:	ba 0f       	add	r27, r26
     836:	62 1f       	adc	r22, r18
     838:	73 1f       	adc	r23, r19
     83a:	84 1f       	adc	r24, r20
     83c:	48 f4       	brcc	.+18     	; 0x850 <__addsf3x+0x98>
     83e:	87 95       	ror	r24
     840:	77 95       	ror	r23
     842:	67 95       	ror	r22
     844:	b7 95       	ror	r27
     846:	f7 95       	ror	r31
     848:	9e 3f       	cpi	r25, 0xFE	; 254
     84a:	08 f0       	brcs	.+2      	; 0x84e <__addsf3x+0x96>
     84c:	b3 cf       	rjmp	.-154    	; 0x7b4 <__addsf3+0x1e>
     84e:	93 95       	inc	r25
     850:	88 0f       	add	r24, r24
     852:	08 f0       	brcs	.+2      	; 0x856 <__addsf3x+0x9e>
     854:	99 27       	eor	r25, r25
     856:	ee 0f       	add	r30, r30
     858:	97 95       	ror	r25
     85a:	87 95       	ror	r24
     85c:	08 95       	ret

0000085e <__fixsfsi>:
     85e:	04 d0       	rcall	.+8      	; 0x868 <__fixunssfsi>
     860:	68 94       	set
     862:	b1 11       	cpse	r27, r1
     864:	b5 c0       	rjmp	.+362    	; 0x9d0 <__fp_szero>
     866:	08 95       	ret

00000868 <__fixunssfsi>:
     868:	98 d0       	rcall	.+304    	; 0x99a <__fp_splitA>
     86a:	88 f0       	brcs	.+34     	; 0x88e <__fixunssfsi+0x26>
     86c:	9f 57       	subi	r25, 0x7F	; 127
     86e:	90 f0       	brcs	.+36     	; 0x894 <__fixunssfsi+0x2c>
     870:	b9 2f       	mov	r27, r25
     872:	99 27       	eor	r25, r25
     874:	b7 51       	subi	r27, 0x17	; 23
     876:	a0 f0       	brcs	.+40     	; 0x8a0 <__fixunssfsi+0x38>
     878:	d1 f0       	breq	.+52     	; 0x8ae <__fixunssfsi+0x46>
     87a:	66 0f       	add	r22, r22
     87c:	77 1f       	adc	r23, r23
     87e:	88 1f       	adc	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	1a f0       	brmi	.+6      	; 0x88a <__fixunssfsi+0x22>
     884:	ba 95       	dec	r27
     886:	c9 f7       	brne	.-14     	; 0x87a <__fixunssfsi+0x12>
     888:	12 c0       	rjmp	.+36     	; 0x8ae <__fixunssfsi+0x46>
     88a:	b1 30       	cpi	r27, 0x01	; 1
     88c:	81 f0       	breq	.+32     	; 0x8ae <__fixunssfsi+0x46>
     88e:	9f d0       	rcall	.+318    	; 0x9ce <__fp_zero>
     890:	b1 e0       	ldi	r27, 0x01	; 1
     892:	08 95       	ret
     894:	9c c0       	rjmp	.+312    	; 0x9ce <__fp_zero>
     896:	67 2f       	mov	r22, r23
     898:	78 2f       	mov	r23, r24
     89a:	88 27       	eor	r24, r24
     89c:	b8 5f       	subi	r27, 0xF8	; 248
     89e:	39 f0       	breq	.+14     	; 0x8ae <__fixunssfsi+0x46>
     8a0:	b9 3f       	cpi	r27, 0xF9	; 249
     8a2:	cc f3       	brlt	.-14     	; 0x896 <__fixunssfsi+0x2e>
     8a4:	86 95       	lsr	r24
     8a6:	77 95       	ror	r23
     8a8:	67 95       	ror	r22
     8aa:	b3 95       	inc	r27
     8ac:	d9 f7       	brne	.-10     	; 0x8a4 <__fixunssfsi+0x3c>
     8ae:	3e f4       	brtc	.+14     	; 0x8be <__fixunssfsi+0x56>
     8b0:	90 95       	com	r25
     8b2:	80 95       	com	r24
     8b4:	70 95       	com	r23
     8b6:	61 95       	neg	r22
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	8f 4f       	sbci	r24, 0xFF	; 255
     8bc:	9f 4f       	sbci	r25, 0xFF	; 255
     8be:	08 95       	ret

000008c0 <__floatunsisf>:
     8c0:	e8 94       	clt
     8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <__floatsisf+0x12>

000008c4 <__floatsisf>:
     8c4:	97 fb       	bst	r25, 7
     8c6:	3e f4       	brtc	.+14     	; 0x8d6 <__floatsisf+0x12>
     8c8:	90 95       	com	r25
     8ca:	80 95       	com	r24
     8cc:	70 95       	com	r23
     8ce:	61 95       	neg	r22
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	8f 4f       	sbci	r24, 0xFF	; 255
     8d4:	9f 4f       	sbci	r25, 0xFF	; 255
     8d6:	99 23       	and	r25, r25
     8d8:	a9 f0       	breq	.+42     	; 0x904 <__floatsisf+0x40>
     8da:	f9 2f       	mov	r31, r25
     8dc:	96 e9       	ldi	r25, 0x96	; 150
     8de:	bb 27       	eor	r27, r27
     8e0:	93 95       	inc	r25
     8e2:	f6 95       	lsr	r31
     8e4:	87 95       	ror	r24
     8e6:	77 95       	ror	r23
     8e8:	67 95       	ror	r22
     8ea:	b7 95       	ror	r27
     8ec:	f1 11       	cpse	r31, r1
     8ee:	f8 cf       	rjmp	.-16     	; 0x8e0 <__floatsisf+0x1c>
     8f0:	fa f4       	brpl	.+62     	; 0x930 <__floatsisf+0x6c>
     8f2:	bb 0f       	add	r27, r27
     8f4:	11 f4       	brne	.+4      	; 0x8fa <__floatsisf+0x36>
     8f6:	60 ff       	sbrs	r22, 0
     8f8:	1b c0       	rjmp	.+54     	; 0x930 <__floatsisf+0x6c>
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	8f 4f       	sbci	r24, 0xFF	; 255
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	16 c0       	rjmp	.+44     	; 0x930 <__floatsisf+0x6c>
     904:	88 23       	and	r24, r24
     906:	11 f0       	breq	.+4      	; 0x90c <__floatsisf+0x48>
     908:	96 e9       	ldi	r25, 0x96	; 150
     90a:	11 c0       	rjmp	.+34     	; 0x92e <__floatsisf+0x6a>
     90c:	77 23       	and	r23, r23
     90e:	21 f0       	breq	.+8      	; 0x918 <__floatsisf+0x54>
     910:	9e e8       	ldi	r25, 0x8E	; 142
     912:	87 2f       	mov	r24, r23
     914:	76 2f       	mov	r23, r22
     916:	05 c0       	rjmp	.+10     	; 0x922 <__floatsisf+0x5e>
     918:	66 23       	and	r22, r22
     91a:	71 f0       	breq	.+28     	; 0x938 <__floatsisf+0x74>
     91c:	96 e8       	ldi	r25, 0x86	; 134
     91e:	86 2f       	mov	r24, r22
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	2a f0       	brmi	.+10     	; 0x930 <__floatsisf+0x6c>
     926:	9a 95       	dec	r25
     928:	66 0f       	add	r22, r22
     92a:	77 1f       	adc	r23, r23
     92c:	88 1f       	adc	r24, r24
     92e:	da f7       	brpl	.-10     	; 0x926 <__floatsisf+0x62>
     930:	88 0f       	add	r24, r24
     932:	96 95       	lsr	r25
     934:	87 95       	ror	r24
     936:	97 f9       	bld	r25, 7
     938:	08 95       	ret

0000093a <__fp_inf>:
     93a:	97 f9       	bld	r25, 7
     93c:	9f 67       	ori	r25, 0x7F	; 127
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	08 95       	ret

00000946 <__fp_nan>:
     946:	9f ef       	ldi	r25, 0xFF	; 255
     948:	80 ec       	ldi	r24, 0xC0	; 192
     94a:	08 95       	ret

0000094c <__fp_pscA>:
     94c:	00 24       	eor	r0, r0
     94e:	0a 94       	dec	r0
     950:	16 16       	cp	r1, r22
     952:	17 06       	cpc	r1, r23
     954:	18 06       	cpc	r1, r24
     956:	09 06       	cpc	r0, r25
     958:	08 95       	ret

0000095a <__fp_pscB>:
     95a:	00 24       	eor	r0, r0
     95c:	0a 94       	dec	r0
     95e:	12 16       	cp	r1, r18
     960:	13 06       	cpc	r1, r19
     962:	14 06       	cpc	r1, r20
     964:	05 06       	cpc	r0, r21
     966:	08 95       	ret

00000968 <__fp_round>:
     968:	09 2e       	mov	r0, r25
     96a:	03 94       	inc	r0
     96c:	00 0c       	add	r0, r0
     96e:	11 f4       	brne	.+4      	; 0x974 <__fp_round+0xc>
     970:	88 23       	and	r24, r24
     972:	52 f0       	brmi	.+20     	; 0x988 <__fp_round+0x20>
     974:	bb 0f       	add	r27, r27
     976:	40 f4       	brcc	.+16     	; 0x988 <__fp_round+0x20>
     978:	bf 2b       	or	r27, r31
     97a:	11 f4       	brne	.+4      	; 0x980 <__fp_round+0x18>
     97c:	60 ff       	sbrs	r22, 0
     97e:	04 c0       	rjmp	.+8      	; 0x988 <__fp_round+0x20>
     980:	6f 5f       	subi	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	8f 4f       	sbci	r24, 0xFF	; 255
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	08 95       	ret

0000098a <__fp_split3>:
     98a:	57 fd       	sbrc	r21, 7
     98c:	90 58       	subi	r25, 0x80	; 128
     98e:	44 0f       	add	r20, r20
     990:	55 1f       	adc	r21, r21
     992:	59 f0       	breq	.+22     	; 0x9aa <__fp_splitA+0x10>
     994:	5f 3f       	cpi	r21, 0xFF	; 255
     996:	71 f0       	breq	.+28     	; 0x9b4 <__fp_splitA+0x1a>
     998:	47 95       	ror	r20

0000099a <__fp_splitA>:
     99a:	88 0f       	add	r24, r24
     99c:	97 fb       	bst	r25, 7
     99e:	99 1f       	adc	r25, r25
     9a0:	61 f0       	breq	.+24     	; 0x9ba <__fp_splitA+0x20>
     9a2:	9f 3f       	cpi	r25, 0xFF	; 255
     9a4:	79 f0       	breq	.+30     	; 0x9c4 <__fp_splitA+0x2a>
     9a6:	87 95       	ror	r24
     9a8:	08 95       	ret
     9aa:	12 16       	cp	r1, r18
     9ac:	13 06       	cpc	r1, r19
     9ae:	14 06       	cpc	r1, r20
     9b0:	55 1f       	adc	r21, r21
     9b2:	f2 cf       	rjmp	.-28     	; 0x998 <__fp_split3+0xe>
     9b4:	46 95       	lsr	r20
     9b6:	f1 df       	rcall	.-30     	; 0x99a <__fp_splitA>
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <__fp_splitA+0x30>
     9ba:	16 16       	cp	r1, r22
     9bc:	17 06       	cpc	r1, r23
     9be:	18 06       	cpc	r1, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	f1 cf       	rjmp	.-30     	; 0x9a6 <__fp_splitA+0xc>
     9c4:	86 95       	lsr	r24
     9c6:	71 05       	cpc	r23, r1
     9c8:	61 05       	cpc	r22, r1
     9ca:	08 94       	sec
     9cc:	08 95       	ret

000009ce <__fp_zero>:
     9ce:	e8 94       	clt

000009d0 <__fp_szero>:
     9d0:	bb 27       	eor	r27, r27
     9d2:	66 27       	eor	r22, r22
     9d4:	77 27       	eor	r23, r23
     9d6:	cb 01       	movw	r24, r22
     9d8:	97 f9       	bld	r25, 7
     9da:	08 95       	ret

000009dc <__mulsf3>:
     9dc:	0b d0       	rcall	.+22     	; 0x9f4 <__mulsf3x>
     9de:	c4 cf       	rjmp	.-120    	; 0x968 <__fp_round>
     9e0:	b5 df       	rcall	.-150    	; 0x94c <__fp_pscA>
     9e2:	28 f0       	brcs	.+10     	; 0x9ee <__mulsf3+0x12>
     9e4:	ba df       	rcall	.-140    	; 0x95a <__fp_pscB>
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <__mulsf3+0x12>
     9e8:	95 23       	and	r25, r21
     9ea:	09 f0       	breq	.+2      	; 0x9ee <__mulsf3+0x12>
     9ec:	a6 cf       	rjmp	.-180    	; 0x93a <__fp_inf>
     9ee:	ab cf       	rjmp	.-170    	; 0x946 <__fp_nan>
     9f0:	11 24       	eor	r1, r1
     9f2:	ee cf       	rjmp	.-36     	; 0x9d0 <__fp_szero>

000009f4 <__mulsf3x>:
     9f4:	ca df       	rcall	.-108    	; 0x98a <__fp_split3>
     9f6:	a0 f3       	brcs	.-24     	; 0x9e0 <__mulsf3+0x4>

000009f8 <__mulsf3_pse>:
     9f8:	95 9f       	mul	r25, r21
     9fa:	d1 f3       	breq	.-12     	; 0x9f0 <__mulsf3+0x14>
     9fc:	95 0f       	add	r25, r21
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	55 1f       	adc	r21, r21
     a02:	62 9f       	mul	r22, r18
     a04:	f0 01       	movw	r30, r0
     a06:	72 9f       	mul	r23, r18
     a08:	bb 27       	eor	r27, r27
     a0a:	f0 0d       	add	r31, r0
     a0c:	b1 1d       	adc	r27, r1
     a0e:	63 9f       	mul	r22, r19
     a10:	aa 27       	eor	r26, r26
     a12:	f0 0d       	add	r31, r0
     a14:	b1 1d       	adc	r27, r1
     a16:	aa 1f       	adc	r26, r26
     a18:	64 9f       	mul	r22, r20
     a1a:	66 27       	eor	r22, r22
     a1c:	b0 0d       	add	r27, r0
     a1e:	a1 1d       	adc	r26, r1
     a20:	66 1f       	adc	r22, r22
     a22:	82 9f       	mul	r24, r18
     a24:	22 27       	eor	r18, r18
     a26:	b0 0d       	add	r27, r0
     a28:	a1 1d       	adc	r26, r1
     a2a:	62 1f       	adc	r22, r18
     a2c:	73 9f       	mul	r23, r19
     a2e:	b0 0d       	add	r27, r0
     a30:	a1 1d       	adc	r26, r1
     a32:	62 1f       	adc	r22, r18
     a34:	83 9f       	mul	r24, r19
     a36:	a0 0d       	add	r26, r0
     a38:	61 1d       	adc	r22, r1
     a3a:	22 1f       	adc	r18, r18
     a3c:	74 9f       	mul	r23, r20
     a3e:	33 27       	eor	r19, r19
     a40:	a0 0d       	add	r26, r0
     a42:	61 1d       	adc	r22, r1
     a44:	23 1f       	adc	r18, r19
     a46:	84 9f       	mul	r24, r20
     a48:	60 0d       	add	r22, r0
     a4a:	21 1d       	adc	r18, r1
     a4c:	82 2f       	mov	r24, r18
     a4e:	76 2f       	mov	r23, r22
     a50:	6a 2f       	mov	r22, r26
     a52:	11 24       	eor	r1, r1
     a54:	9f 57       	subi	r25, 0x7F	; 127
     a56:	50 40       	sbci	r21, 0x00	; 0
     a58:	8a f0       	brmi	.+34     	; 0xa7c <__mulsf3_pse+0x84>
     a5a:	e1 f0       	breq	.+56     	; 0xa94 <__mulsf3_pse+0x9c>
     a5c:	88 23       	and	r24, r24
     a5e:	4a f0       	brmi	.+18     	; 0xa72 <__mulsf3_pse+0x7a>
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	bb 1f       	adc	r27, r27
     a66:	66 1f       	adc	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	88 1f       	adc	r24, r24
     a6c:	91 50       	subi	r25, 0x01	; 1
     a6e:	50 40       	sbci	r21, 0x00	; 0
     a70:	a9 f7       	brne	.-22     	; 0xa5c <__mulsf3_pse+0x64>
     a72:	9e 3f       	cpi	r25, 0xFE	; 254
     a74:	51 05       	cpc	r21, r1
     a76:	70 f0       	brcs	.+28     	; 0xa94 <__mulsf3_pse+0x9c>
     a78:	60 cf       	rjmp	.-320    	; 0x93a <__fp_inf>
     a7a:	aa cf       	rjmp	.-172    	; 0x9d0 <__fp_szero>
     a7c:	5f 3f       	cpi	r21, 0xFF	; 255
     a7e:	ec f3       	brlt	.-6      	; 0xa7a <__mulsf3_pse+0x82>
     a80:	98 3e       	cpi	r25, 0xE8	; 232
     a82:	dc f3       	brlt	.-10     	; 0xa7a <__mulsf3_pse+0x82>
     a84:	86 95       	lsr	r24
     a86:	77 95       	ror	r23
     a88:	67 95       	ror	r22
     a8a:	b7 95       	ror	r27
     a8c:	f7 95       	ror	r31
     a8e:	e7 95       	ror	r30
     a90:	9f 5f       	subi	r25, 0xFF	; 255
     a92:	c1 f7       	brne	.-16     	; 0xa84 <__mulsf3_pse+0x8c>
     a94:	fe 2b       	or	r31, r30
     a96:	88 0f       	add	r24, r24
     a98:	91 1d       	adc	r25, r1
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	97 f9       	bld	r25, 7
     aa0:	08 95       	ret

00000aa2 <atoi>:
     aa2:	fc 01       	movw	r30, r24
     aa4:	88 27       	eor	r24, r24
     aa6:	99 27       	eor	r25, r25
     aa8:	e8 94       	clt
     aaa:	21 91       	ld	r18, Z+
     aac:	20 32       	cpi	r18, 0x20	; 32
     aae:	e9 f3       	breq	.-6      	; 0xaaa <atoi+0x8>
     ab0:	29 30       	cpi	r18, 0x09	; 9
     ab2:	10 f0       	brcs	.+4      	; 0xab8 <atoi+0x16>
     ab4:	2e 30       	cpi	r18, 0x0E	; 14
     ab6:	c8 f3       	brcs	.-14     	; 0xaaa <atoi+0x8>
     ab8:	2b 32       	cpi	r18, 0x2B	; 43
     aba:	39 f0       	breq	.+14     	; 0xaca <atoi+0x28>
     abc:	2d 32       	cpi	r18, 0x2D	; 45
     abe:	31 f4       	brne	.+12     	; 0xacc <atoi+0x2a>
     ac0:	68 94       	set
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <atoi+0x28>
     ac4:	35 d0       	rcall	.+106    	; 0xb30 <__mulhi_const_10>
     ac6:	82 0f       	add	r24, r18
     ac8:	91 1d       	adc	r25, r1
     aca:	21 91       	ld	r18, Z+
     acc:	20 53       	subi	r18, 0x30	; 48
     ace:	2a 30       	cpi	r18, 0x0A	; 10
     ad0:	c8 f3       	brcs	.-14     	; 0xac4 <atoi+0x22>
     ad2:	1e f4       	brtc	.+6      	; 0xada <atoi+0x38>
     ad4:	90 95       	com	r25
     ad6:	81 95       	neg	r24
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	08 95       	ret

00000adc <strtok>:
     adc:	4a e1       	ldi	r20, 0x1A	; 26
     ade:	51 e0       	ldi	r21, 0x01	; 1
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <strtok_r>

00000ae2 <strtok_r>:
     ae2:	fa 01       	movw	r30, r20
     ae4:	a1 91       	ld	r26, Z+
     ae6:	b0 81       	ld	r27, Z
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	19 f4       	brne	.+6      	; 0xaf2 <strtok_r+0x10>
     aec:	10 97       	sbiw	r26, 0x00	; 0
     aee:	e1 f0       	breq	.+56     	; 0xb28 <strtok_r+0x46>
     af0:	cd 01       	movw	r24, r26
     af2:	dc 01       	movw	r26, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0d 90       	ld	r0, X+
     af8:	00 20       	and	r0, r0
     afa:	11 f4       	brne	.+4      	; 0xb00 <strtok_r+0x1e>
     afc:	c0 01       	movw	r24, r0
     afe:	13 c0       	rjmp	.+38     	; 0xb26 <strtok_r+0x44>
     b00:	fb 01       	movw	r30, r22
     b02:	21 91       	ld	r18, Z+
     b04:	22 23       	and	r18, r18
     b06:	19 f0       	breq	.+6      	; 0xb0e <strtok_r+0x2c>
     b08:	20 15       	cp	r18, r0
     b0a:	d9 f7       	brne	.-10     	; 0xb02 <strtok_r+0x20>
     b0c:	f3 cf       	rjmp	.-26     	; 0xaf4 <strtok_r+0x12>
     b0e:	fb 01       	movw	r30, r22
     b10:	21 91       	ld	r18, Z+
     b12:	20 15       	cp	r18, r0
     b14:	19 f4       	brne	.+6      	; 0xb1c <strtok_r+0x3a>
     b16:	1e 92       	st	-X, r1
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <strtok_r+0x46>
     b1c:	22 23       	and	r18, r18
     b1e:	c1 f7       	brne	.-16     	; 0xb10 <strtok_r+0x2e>
     b20:	0d 90       	ld	r0, X+
     b22:	00 20       	and	r0, r0
     b24:	a1 f7       	brne	.-24     	; 0xb0e <strtok_r+0x2c>
     b26:	d0 01       	movw	r26, r0
     b28:	fa 01       	movw	r30, r20
     b2a:	a1 93       	st	Z+, r26
     b2c:	b0 83       	st	Z, r27
     b2e:	08 95       	ret

00000b30 <__mulhi_const_10>:
     b30:	7a e0       	ldi	r23, 0x0A	; 10
     b32:	97 9f       	mul	r25, r23
     b34:	90 2d       	mov	r25, r0
     b36:	87 9f       	mul	r24, r23
     b38:	80 2d       	mov	r24, r0
     b3a:	91 0d       	add	r25, r1
     b3c:	11 24       	eor	r1, r1
     b3e:	08 95       	ret

00000b40 <sprintf>:
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	2e 97       	sbiw	r28, 0x0e	; 14
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	0d 89       	ldd	r16, Y+21	; 0x15
     b5a:	1e 89       	ldd	r17, Y+22	; 0x16
     b5c:	86 e0       	ldi	r24, 0x06	; 6
     b5e:	8c 83       	std	Y+4, r24	; 0x04
     b60:	1a 83       	std	Y+2, r17	; 0x02
     b62:	09 83       	std	Y+1, r16	; 0x01
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9f e7       	ldi	r25, 0x7F	; 127
     b68:	9e 83       	std	Y+6, r25	; 0x06
     b6a:	8d 83       	std	Y+5, r24	; 0x05
     b6c:	ae 01       	movw	r20, r28
     b6e:	47 5e       	subi	r20, 0xE7	; 231
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
     b72:	6f 89       	ldd	r22, Y+23	; 0x17
     b74:	78 8d       	ldd	r23, Y+24	; 0x18
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	10 d0       	rcall	.+32     	; 0xb9c <vfprintf>
     b7c:	ef 81       	ldd	r30, Y+7	; 0x07
     b7e:	f8 85       	ldd	r31, Y+8	; 0x08
     b80:	e0 0f       	add	r30, r16
     b82:	f1 1f       	adc	r31, r17
     b84:	10 82       	st	Z, r1
     b86:	2e 96       	adiw	r28, 0x0e	; 14
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <vfprintf>:
     b9c:	2f 92       	push	r2
     b9e:	3f 92       	push	r3
     ba0:	4f 92       	push	r4
     ba2:	5f 92       	push	r5
     ba4:	6f 92       	push	r6
     ba6:	7f 92       	push	r7
     ba8:	8f 92       	push	r8
     baa:	9f 92       	push	r9
     bac:	af 92       	push	r10
     bae:	bf 92       	push	r11
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	2b 97       	sbiw	r28, 0x0b	; 11
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	6c 01       	movw	r12, r24
     bd2:	7b 01       	movw	r14, r22
     bd4:	8a 01       	movw	r16, r20
     bd6:	fc 01       	movw	r30, r24
     bd8:	17 82       	std	Z+7, r1	; 0x07
     bda:	16 82       	std	Z+6, r1	; 0x06
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	81 ff       	sbrs	r24, 1
     be0:	bf c1       	rjmp	.+894    	; 0xf60 <vfprintf+0x3c4>
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	3c 01       	movw	r6, r24
     be8:	f6 01       	movw	r30, r12
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	f7 01       	movw	r30, r14
     bee:	93 fd       	sbrc	r25, 3
     bf0:	85 91       	lpm	r24, Z+
     bf2:	93 ff       	sbrs	r25, 3
     bf4:	81 91       	ld	r24, Z+
     bf6:	7f 01       	movw	r14, r30
     bf8:	88 23       	and	r24, r24
     bfa:	09 f4       	brne	.+2      	; 0xbfe <vfprintf+0x62>
     bfc:	ad c1       	rjmp	.+858    	; 0xf58 <vfprintf+0x3bc>
     bfe:	85 32       	cpi	r24, 0x25	; 37
     c00:	39 f4       	brne	.+14     	; 0xc10 <vfprintf+0x74>
     c02:	93 fd       	sbrc	r25, 3
     c04:	85 91       	lpm	r24, Z+
     c06:	93 ff       	sbrs	r25, 3
     c08:	81 91       	ld	r24, Z+
     c0a:	7f 01       	movw	r14, r30
     c0c:	85 32       	cpi	r24, 0x25	; 37
     c0e:	21 f4       	brne	.+8      	; 0xc18 <vfprintf+0x7c>
     c10:	b6 01       	movw	r22, r12
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	d6 d1       	rcall	.+940    	; 0xfc2 <fputc>
     c16:	e8 cf       	rjmp	.-48     	; 0xbe8 <vfprintf+0x4c>
     c18:	91 2c       	mov	r9, r1
     c1a:	21 2c       	mov	r2, r1
     c1c:	31 2c       	mov	r3, r1
     c1e:	ff e1       	ldi	r31, 0x1F	; 31
     c20:	f3 15       	cp	r31, r3
     c22:	d8 f0       	brcs	.+54     	; 0xc5a <vfprintf+0xbe>
     c24:	8b 32       	cpi	r24, 0x2B	; 43
     c26:	79 f0       	breq	.+30     	; 0xc46 <vfprintf+0xaa>
     c28:	38 f4       	brcc	.+14     	; 0xc38 <vfprintf+0x9c>
     c2a:	80 32       	cpi	r24, 0x20	; 32
     c2c:	79 f0       	breq	.+30     	; 0xc4c <vfprintf+0xb0>
     c2e:	83 32       	cpi	r24, 0x23	; 35
     c30:	a1 f4       	brne	.+40     	; 0xc5a <vfprintf+0xbe>
     c32:	23 2d       	mov	r18, r3
     c34:	20 61       	ori	r18, 0x10	; 16
     c36:	1d c0       	rjmp	.+58     	; 0xc72 <vfprintf+0xd6>
     c38:	8d 32       	cpi	r24, 0x2D	; 45
     c3a:	61 f0       	breq	.+24     	; 0xc54 <vfprintf+0xb8>
     c3c:	80 33       	cpi	r24, 0x30	; 48
     c3e:	69 f4       	brne	.+26     	; 0xc5a <vfprintf+0xbe>
     c40:	23 2d       	mov	r18, r3
     c42:	21 60       	ori	r18, 0x01	; 1
     c44:	16 c0       	rjmp	.+44     	; 0xc72 <vfprintf+0xd6>
     c46:	83 2d       	mov	r24, r3
     c48:	82 60       	ori	r24, 0x02	; 2
     c4a:	38 2e       	mov	r3, r24
     c4c:	e3 2d       	mov	r30, r3
     c4e:	e4 60       	ori	r30, 0x04	; 4
     c50:	3e 2e       	mov	r3, r30
     c52:	2a c0       	rjmp	.+84     	; 0xca8 <vfprintf+0x10c>
     c54:	f3 2d       	mov	r31, r3
     c56:	f8 60       	ori	r31, 0x08	; 8
     c58:	1d c0       	rjmp	.+58     	; 0xc94 <vfprintf+0xf8>
     c5a:	37 fc       	sbrc	r3, 7
     c5c:	2d c0       	rjmp	.+90     	; 0xcb8 <vfprintf+0x11c>
     c5e:	20 ed       	ldi	r18, 0xD0	; 208
     c60:	28 0f       	add	r18, r24
     c62:	2a 30       	cpi	r18, 0x0A	; 10
     c64:	40 f0       	brcs	.+16     	; 0xc76 <vfprintf+0xda>
     c66:	8e 32       	cpi	r24, 0x2E	; 46
     c68:	b9 f4       	brne	.+46     	; 0xc98 <vfprintf+0xfc>
     c6a:	36 fc       	sbrc	r3, 6
     c6c:	75 c1       	rjmp	.+746    	; 0xf58 <vfprintf+0x3bc>
     c6e:	23 2d       	mov	r18, r3
     c70:	20 64       	ori	r18, 0x40	; 64
     c72:	32 2e       	mov	r3, r18
     c74:	19 c0       	rjmp	.+50     	; 0xca8 <vfprintf+0x10c>
     c76:	36 fe       	sbrs	r3, 6
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0xea>
     c7a:	8a e0       	ldi	r24, 0x0A	; 10
     c7c:	98 9e       	mul	r9, r24
     c7e:	20 0d       	add	r18, r0
     c80:	11 24       	eor	r1, r1
     c82:	92 2e       	mov	r9, r18
     c84:	11 c0       	rjmp	.+34     	; 0xca8 <vfprintf+0x10c>
     c86:	ea e0       	ldi	r30, 0x0A	; 10
     c88:	2e 9e       	mul	r2, r30
     c8a:	20 0d       	add	r18, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	22 2e       	mov	r2, r18
     c90:	f3 2d       	mov	r31, r3
     c92:	f0 62       	ori	r31, 0x20	; 32
     c94:	3f 2e       	mov	r3, r31
     c96:	08 c0       	rjmp	.+16     	; 0xca8 <vfprintf+0x10c>
     c98:	8c 36       	cpi	r24, 0x6C	; 108
     c9a:	21 f4       	brne	.+8      	; 0xca4 <vfprintf+0x108>
     c9c:	83 2d       	mov	r24, r3
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	38 2e       	mov	r3, r24
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <vfprintf+0x10c>
     ca4:	88 36       	cpi	r24, 0x68	; 104
     ca6:	41 f4       	brne	.+16     	; 0xcb8 <vfprintf+0x11c>
     ca8:	f7 01       	movw	r30, r14
     caa:	93 fd       	sbrc	r25, 3
     cac:	85 91       	lpm	r24, Z+
     cae:	93 ff       	sbrs	r25, 3
     cb0:	81 91       	ld	r24, Z+
     cb2:	7f 01       	movw	r14, r30
     cb4:	81 11       	cpse	r24, r1
     cb6:	b3 cf       	rjmp	.-154    	; 0xc1e <vfprintf+0x82>
     cb8:	98 2f       	mov	r25, r24
     cba:	9f 7d       	andi	r25, 0xDF	; 223
     cbc:	95 54       	subi	r25, 0x45	; 69
     cbe:	93 30       	cpi	r25, 0x03	; 3
     cc0:	28 f4       	brcc	.+10     	; 0xccc <vfprintf+0x130>
     cc2:	0c 5f       	subi	r16, 0xFC	; 252
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	9f e3       	ldi	r25, 0x3F	; 63
     cc8:	99 83       	std	Y+1, r25	; 0x01
     cca:	0d c0       	rjmp	.+26     	; 0xce6 <vfprintf+0x14a>
     ccc:	83 36       	cpi	r24, 0x63	; 99
     cce:	31 f0       	breq	.+12     	; 0xcdc <vfprintf+0x140>
     cd0:	83 37       	cpi	r24, 0x73	; 115
     cd2:	71 f0       	breq	.+28     	; 0xcf0 <vfprintf+0x154>
     cd4:	83 35       	cpi	r24, 0x53	; 83
     cd6:	09 f0       	breq	.+2      	; 0xcda <vfprintf+0x13e>
     cd8:	55 c0       	rjmp	.+170    	; 0xd84 <vfprintf+0x1e8>
     cda:	20 c0       	rjmp	.+64     	; 0xd1c <vfprintf+0x180>
     cdc:	f8 01       	movw	r30, r16
     cde:	80 81       	ld	r24, Z
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	0e 5f       	subi	r16, 0xFE	; 254
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	88 24       	eor	r8, r8
     ce8:	83 94       	inc	r8
     cea:	91 2c       	mov	r9, r1
     cec:	53 01       	movw	r10, r6
     cee:	12 c0       	rjmp	.+36     	; 0xd14 <vfprintf+0x178>
     cf0:	28 01       	movw	r4, r16
     cf2:	f2 e0       	ldi	r31, 0x02	; 2
     cf4:	4f 0e       	add	r4, r31
     cf6:	51 1c       	adc	r5, r1
     cf8:	f8 01       	movw	r30, r16
     cfa:	a0 80       	ld	r10, Z
     cfc:	b1 80       	ldd	r11, Z+1	; 0x01
     cfe:	36 fe       	sbrs	r3, 6
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <vfprintf+0x16c>
     d02:	69 2d       	mov	r22, r9
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <vfprintf+0x170>
     d08:	6f ef       	ldi	r22, 0xFF	; 255
     d0a:	7f ef       	ldi	r23, 0xFF	; 255
     d0c:	c5 01       	movw	r24, r10
     d0e:	4e d1       	rcall	.+668    	; 0xfac <strnlen>
     d10:	4c 01       	movw	r8, r24
     d12:	82 01       	movw	r16, r4
     d14:	f3 2d       	mov	r31, r3
     d16:	ff 77       	andi	r31, 0x7F	; 127
     d18:	3f 2e       	mov	r3, r31
     d1a:	15 c0       	rjmp	.+42     	; 0xd46 <vfprintf+0x1aa>
     d1c:	28 01       	movw	r4, r16
     d1e:	22 e0       	ldi	r18, 0x02	; 2
     d20:	42 0e       	add	r4, r18
     d22:	51 1c       	adc	r5, r1
     d24:	f8 01       	movw	r30, r16
     d26:	a0 80       	ld	r10, Z
     d28:	b1 80       	ldd	r11, Z+1	; 0x01
     d2a:	36 fe       	sbrs	r3, 6
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <vfprintf+0x198>
     d2e:	69 2d       	mov	r22, r9
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x19c>
     d34:	6f ef       	ldi	r22, 0xFF	; 255
     d36:	7f ef       	ldi	r23, 0xFF	; 255
     d38:	c5 01       	movw	r24, r10
     d3a:	2d d1       	rcall	.+602    	; 0xf96 <strnlen_P>
     d3c:	4c 01       	movw	r8, r24
     d3e:	f3 2d       	mov	r31, r3
     d40:	f0 68       	ori	r31, 0x80	; 128
     d42:	3f 2e       	mov	r3, r31
     d44:	82 01       	movw	r16, r4
     d46:	33 fc       	sbrc	r3, 3
     d48:	19 c0       	rjmp	.+50     	; 0xd7c <vfprintf+0x1e0>
     d4a:	82 2d       	mov	r24, r2
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 16       	cp	r8, r24
     d50:	99 06       	cpc	r9, r25
     d52:	a0 f4       	brcc	.+40     	; 0xd7c <vfprintf+0x1e0>
     d54:	b6 01       	movw	r22, r12
     d56:	80 e2       	ldi	r24, 0x20	; 32
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	33 d1       	rcall	.+614    	; 0xfc2 <fputc>
     d5c:	2a 94       	dec	r2
     d5e:	f5 cf       	rjmp	.-22     	; 0xd4a <vfprintf+0x1ae>
     d60:	f5 01       	movw	r30, r10
     d62:	37 fc       	sbrc	r3, 7
     d64:	85 91       	lpm	r24, Z+
     d66:	37 fe       	sbrs	r3, 7
     d68:	81 91       	ld	r24, Z+
     d6a:	5f 01       	movw	r10, r30
     d6c:	b6 01       	movw	r22, r12
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	28 d1       	rcall	.+592    	; 0xfc2 <fputc>
     d72:	21 10       	cpse	r2, r1
     d74:	2a 94       	dec	r2
     d76:	21 e0       	ldi	r18, 0x01	; 1
     d78:	82 1a       	sub	r8, r18
     d7a:	91 08       	sbc	r9, r1
     d7c:	81 14       	cp	r8, r1
     d7e:	91 04       	cpc	r9, r1
     d80:	79 f7       	brne	.-34     	; 0xd60 <vfprintf+0x1c4>
     d82:	e1 c0       	rjmp	.+450    	; 0xf46 <vfprintf+0x3aa>
     d84:	84 36       	cpi	r24, 0x64	; 100
     d86:	11 f0       	breq	.+4      	; 0xd8c <vfprintf+0x1f0>
     d88:	89 36       	cpi	r24, 0x69	; 105
     d8a:	39 f5       	brne	.+78     	; 0xdda <vfprintf+0x23e>
     d8c:	f8 01       	movw	r30, r16
     d8e:	37 fe       	sbrs	r3, 7
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <vfprintf+0x204>
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	0c 5f       	subi	r16, 0xFC	; 252
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <vfprintf+0x214>
     da0:	60 81       	ld	r22, Z
     da2:	71 81       	ldd	r23, Z+1	; 0x01
     da4:	07 2e       	mov	r0, r23
     da6:	00 0c       	add	r0, r0
     da8:	88 0b       	sbc	r24, r24
     daa:	99 0b       	sbc	r25, r25
     dac:	0e 5f       	subi	r16, 0xFE	; 254
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	f3 2d       	mov	r31, r3
     db2:	ff 76       	andi	r31, 0x6F	; 111
     db4:	3f 2e       	mov	r3, r31
     db6:	97 ff       	sbrs	r25, 7
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <vfprintf+0x230>
     dba:	90 95       	com	r25
     dbc:	80 95       	com	r24
     dbe:	70 95       	com	r23
     dc0:	61 95       	neg	r22
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	8f 4f       	sbci	r24, 0xFF	; 255
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	f0 68       	ori	r31, 0x80	; 128
     dca:	3f 2e       	mov	r3, r31
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	a3 01       	movw	r20, r6
     dd2:	33 d1       	rcall	.+614    	; 0x103a <__ultoa_invert>
     dd4:	88 2e       	mov	r8, r24
     dd6:	86 18       	sub	r8, r6
     dd8:	44 c0       	rjmp	.+136    	; 0xe62 <vfprintf+0x2c6>
     dda:	85 37       	cpi	r24, 0x75	; 117
     ddc:	31 f4       	brne	.+12     	; 0xdea <vfprintf+0x24e>
     dde:	23 2d       	mov	r18, r3
     de0:	2f 7e       	andi	r18, 0xEF	; 239
     de2:	b2 2e       	mov	r11, r18
     de4:	2a e0       	ldi	r18, 0x0A	; 10
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	25 c0       	rjmp	.+74     	; 0xe34 <vfprintf+0x298>
     dea:	93 2d       	mov	r25, r3
     dec:	99 7f       	andi	r25, 0xF9	; 249
     dee:	b9 2e       	mov	r11, r25
     df0:	8f 36       	cpi	r24, 0x6F	; 111
     df2:	c1 f0       	breq	.+48     	; 0xe24 <vfprintf+0x288>
     df4:	18 f4       	brcc	.+6      	; 0xdfc <vfprintf+0x260>
     df6:	88 35       	cpi	r24, 0x58	; 88
     df8:	79 f0       	breq	.+30     	; 0xe18 <vfprintf+0x27c>
     dfa:	ae c0       	rjmp	.+348    	; 0xf58 <vfprintf+0x3bc>
     dfc:	80 37       	cpi	r24, 0x70	; 112
     dfe:	19 f0       	breq	.+6      	; 0xe06 <vfprintf+0x26a>
     e00:	88 37       	cpi	r24, 0x78	; 120
     e02:	21 f0       	breq	.+8      	; 0xe0c <vfprintf+0x270>
     e04:	a9 c0       	rjmp	.+338    	; 0xf58 <vfprintf+0x3bc>
     e06:	e9 2f       	mov	r30, r25
     e08:	e0 61       	ori	r30, 0x10	; 16
     e0a:	be 2e       	mov	r11, r30
     e0c:	b4 fe       	sbrs	r11, 4
     e0e:	0d c0       	rjmp	.+26     	; 0xe2a <vfprintf+0x28e>
     e10:	fb 2d       	mov	r31, r11
     e12:	f4 60       	ori	r31, 0x04	; 4
     e14:	bf 2e       	mov	r11, r31
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <vfprintf+0x28e>
     e18:	34 fe       	sbrs	r3, 4
     e1a:	0a c0       	rjmp	.+20     	; 0xe30 <vfprintf+0x294>
     e1c:	29 2f       	mov	r18, r25
     e1e:	26 60       	ori	r18, 0x06	; 6
     e20:	b2 2e       	mov	r11, r18
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <vfprintf+0x294>
     e24:	28 e0       	ldi	r18, 0x08	; 8
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <vfprintf+0x298>
     e2a:	20 e1       	ldi	r18, 0x10	; 16
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <vfprintf+0x298>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	32 e0       	ldi	r19, 0x02	; 2
     e34:	f8 01       	movw	r30, r16
     e36:	b7 fe       	sbrs	r11, 7
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <vfprintf+0x2ac>
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	0c 5f       	subi	r16, 0xFC	; 252
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <vfprintf+0x2b8>
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 5f       	subi	r16, 0xFE	; 254
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	a3 01       	movw	r20, r6
     e56:	f1 d0       	rcall	.+482    	; 0x103a <__ultoa_invert>
     e58:	88 2e       	mov	r8, r24
     e5a:	86 18       	sub	r8, r6
     e5c:	fb 2d       	mov	r31, r11
     e5e:	ff 77       	andi	r31, 0x7F	; 127
     e60:	3f 2e       	mov	r3, r31
     e62:	36 fe       	sbrs	r3, 6
     e64:	0d c0       	rjmp	.+26     	; 0xe80 <vfprintf+0x2e4>
     e66:	23 2d       	mov	r18, r3
     e68:	2e 7f       	andi	r18, 0xFE	; 254
     e6a:	a2 2e       	mov	r10, r18
     e6c:	89 14       	cp	r8, r9
     e6e:	58 f4       	brcc	.+22     	; 0xe86 <vfprintf+0x2ea>
     e70:	34 fe       	sbrs	r3, 4
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <vfprintf+0x2ee>
     e74:	32 fc       	sbrc	r3, 2
     e76:	09 c0       	rjmp	.+18     	; 0xe8a <vfprintf+0x2ee>
     e78:	83 2d       	mov	r24, r3
     e7a:	8e 7e       	andi	r24, 0xEE	; 238
     e7c:	a8 2e       	mov	r10, r24
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <vfprintf+0x2ee>
     e80:	b8 2c       	mov	r11, r8
     e82:	a3 2c       	mov	r10, r3
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <vfprintf+0x2f0>
     e86:	b8 2c       	mov	r11, r8
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <vfprintf+0x2f0>
     e8a:	b9 2c       	mov	r11, r9
     e8c:	a4 fe       	sbrs	r10, 4
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <vfprintf+0x312>
     e90:	fe 01       	movw	r30, r28
     e92:	e8 0d       	add	r30, r8
     e94:	f1 1d       	adc	r31, r1
     e96:	80 81       	ld	r24, Z
     e98:	80 33       	cpi	r24, 0x30	; 48
     e9a:	21 f4       	brne	.+8      	; 0xea4 <vfprintf+0x308>
     e9c:	9a 2d       	mov	r25, r10
     e9e:	99 7e       	andi	r25, 0xE9	; 233
     ea0:	a9 2e       	mov	r10, r25
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <vfprintf+0x31a>
     ea4:	a2 fe       	sbrs	r10, 2
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <vfprintf+0x318>
     ea8:	b3 94       	inc	r11
     eaa:	b3 94       	inc	r11
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <vfprintf+0x31a>
     eae:	8a 2d       	mov	r24, r10
     eb0:	86 78       	andi	r24, 0x86	; 134
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <vfprintf+0x31a>
     eb4:	b3 94       	inc	r11
     eb6:	a3 fc       	sbrc	r10, 3
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <vfprintf+0x33e>
     eba:	a0 fe       	sbrs	r10, 0
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <vfprintf+0x32e>
     ebe:	b2 14       	cp	r11, r2
     ec0:	80 f4       	brcc	.+32     	; 0xee2 <vfprintf+0x346>
     ec2:	28 0c       	add	r2, r8
     ec4:	92 2c       	mov	r9, r2
     ec6:	9b 18       	sub	r9, r11
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <vfprintf+0x348>
     eca:	b2 14       	cp	r11, r2
     ecc:	58 f4       	brcc	.+22     	; 0xee4 <vfprintf+0x348>
     ece:	b6 01       	movw	r22, r12
     ed0:	80 e2       	ldi	r24, 0x20	; 32
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	76 d0       	rcall	.+236    	; 0xfc2 <fputc>
     ed6:	b3 94       	inc	r11
     ed8:	f8 cf       	rjmp	.-16     	; 0xeca <vfprintf+0x32e>
     eda:	b2 14       	cp	r11, r2
     edc:	18 f4       	brcc	.+6      	; 0xee4 <vfprintf+0x348>
     ede:	2b 18       	sub	r2, r11
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x34a>
     ee2:	98 2c       	mov	r9, r8
     ee4:	21 2c       	mov	r2, r1
     ee6:	a4 fe       	sbrs	r10, 4
     ee8:	0f c0       	rjmp	.+30     	; 0xf08 <vfprintf+0x36c>
     eea:	b6 01       	movw	r22, r12
     eec:	80 e3       	ldi	r24, 0x30	; 48
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	68 d0       	rcall	.+208    	; 0xfc2 <fputc>
     ef2:	a2 fe       	sbrs	r10, 2
     ef4:	16 c0       	rjmp	.+44     	; 0xf22 <vfprintf+0x386>
     ef6:	a1 fc       	sbrc	r10, 1
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <vfprintf+0x364>
     efa:	88 e7       	ldi	r24, 0x78	; 120
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <vfprintf+0x368>
     f00:	88 e5       	ldi	r24, 0x58	; 88
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	b6 01       	movw	r22, r12
     f06:	0c c0       	rjmp	.+24     	; 0xf20 <vfprintf+0x384>
     f08:	8a 2d       	mov	r24, r10
     f0a:	86 78       	andi	r24, 0x86	; 134
     f0c:	51 f0       	breq	.+20     	; 0xf22 <vfprintf+0x386>
     f0e:	a1 fe       	sbrs	r10, 1
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x37a>
     f12:	8b e2       	ldi	r24, 0x2B	; 43
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <vfprintf+0x37c>
     f16:	80 e2       	ldi	r24, 0x20	; 32
     f18:	a7 fc       	sbrc	r10, 7
     f1a:	8d e2       	ldi	r24, 0x2D	; 45
     f1c:	b6 01       	movw	r22, r12
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	50 d0       	rcall	.+160    	; 0xfc2 <fputc>
     f22:	89 14       	cp	r8, r9
     f24:	30 f4       	brcc	.+12     	; 0xf32 <vfprintf+0x396>
     f26:	b6 01       	movw	r22, r12
     f28:	80 e3       	ldi	r24, 0x30	; 48
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	4a d0       	rcall	.+148    	; 0xfc2 <fputc>
     f2e:	9a 94       	dec	r9
     f30:	f8 cf       	rjmp	.-16     	; 0xf22 <vfprintf+0x386>
     f32:	8a 94       	dec	r8
     f34:	f3 01       	movw	r30, r6
     f36:	e8 0d       	add	r30, r8
     f38:	f1 1d       	adc	r31, r1
     f3a:	80 81       	ld	r24, Z
     f3c:	b6 01       	movw	r22, r12
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	40 d0       	rcall	.+128    	; 0xfc2 <fputc>
     f42:	81 10       	cpse	r8, r1
     f44:	f6 cf       	rjmp	.-20     	; 0xf32 <vfprintf+0x396>
     f46:	22 20       	and	r2, r2
     f48:	09 f4       	brne	.+2      	; 0xf4c <vfprintf+0x3b0>
     f4a:	4e ce       	rjmp	.-868    	; 0xbe8 <vfprintf+0x4c>
     f4c:	b6 01       	movw	r22, r12
     f4e:	80 e2       	ldi	r24, 0x20	; 32
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	37 d0       	rcall	.+110    	; 0xfc2 <fputc>
     f54:	2a 94       	dec	r2
     f56:	f7 cf       	rjmp	.-18     	; 0xf46 <vfprintf+0x3aa>
     f58:	f6 01       	movw	r30, r12
     f5a:	86 81       	ldd	r24, Z+6	; 0x06
     f5c:	97 81       	ldd	r25, Z+7	; 0x07
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x3c8>
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	2b 96       	adiw	r28, 0x0b	; 11
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	bf 90       	pop	r11
     f82:	af 90       	pop	r10
     f84:	9f 90       	pop	r9
     f86:	8f 90       	pop	r8
     f88:	7f 90       	pop	r7
     f8a:	6f 90       	pop	r6
     f8c:	5f 90       	pop	r5
     f8e:	4f 90       	pop	r4
     f90:	3f 90       	pop	r3
     f92:	2f 90       	pop	r2
     f94:	08 95       	ret

00000f96 <strnlen_P>:
     f96:	fc 01       	movw	r30, r24
     f98:	05 90       	lpm	r0, Z+
     f9a:	61 50       	subi	r22, 0x01	; 1
     f9c:	70 40       	sbci	r23, 0x00	; 0
     f9e:	01 10       	cpse	r0, r1
     fa0:	d8 f7       	brcc	.-10     	; 0xf98 <strnlen_P+0x2>
     fa2:	80 95       	com	r24
     fa4:	90 95       	com	r25
     fa6:	8e 0f       	add	r24, r30
     fa8:	9f 1f       	adc	r25, r31
     faa:	08 95       	ret

00000fac <strnlen>:
     fac:	fc 01       	movw	r30, r24
     fae:	61 50       	subi	r22, 0x01	; 1
     fb0:	70 40       	sbci	r23, 0x00	; 0
     fb2:	01 90       	ld	r0, Z+
     fb4:	01 10       	cpse	r0, r1
     fb6:	d8 f7       	brcc	.-10     	; 0xfae <strnlen+0x2>
     fb8:	80 95       	com	r24
     fba:	90 95       	com	r25
     fbc:	8e 0f       	add	r24, r30
     fbe:	9f 1f       	adc	r25, r31
     fc0:	08 95       	ret

00000fc2 <fputc>:
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	fb 01       	movw	r30, r22
     fcc:	23 81       	ldd	r18, Z+3	; 0x03
     fce:	21 fd       	sbrc	r18, 1
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <fputc+0x16>
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
     fd6:	2c c0       	rjmp	.+88     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
     fd8:	22 ff       	sbrs	r18, 2
     fda:	16 c0       	rjmp	.+44     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
     fdc:	46 81       	ldd	r20, Z+6	; 0x06
     fde:	57 81       	ldd	r21, Z+7	; 0x07
     fe0:	24 81       	ldd	r18, Z+4	; 0x04
     fe2:	35 81       	ldd	r19, Z+5	; 0x05
     fe4:	42 17       	cp	r20, r18
     fe6:	53 07       	cpc	r21, r19
     fe8:	44 f4       	brge	.+16     	; 0xffa <fputc+0x38>
     fea:	a0 81       	ld	r26, Z
     fec:	b1 81       	ldd	r27, Z+1	; 0x01
     fee:	9d 01       	movw	r18, r26
     ff0:	2f 5f       	subi	r18, 0xFF	; 255
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	31 83       	std	Z+1, r19	; 0x01
     ff6:	20 83       	st	Z, r18
     ff8:	8c 93       	st	X, r24
     ffa:	26 81       	ldd	r18, Z+6	; 0x06
     ffc:	37 81       	ldd	r19, Z+7	; 0x07
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	37 83       	std	Z+7, r19	; 0x07
    1004:	26 83       	std	Z+6, r18	; 0x06
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    1008:	8b 01       	movw	r16, r22
    100a:	ec 01       	movw	r28, r24
    100c:	fb 01       	movw	r30, r22
    100e:	00 84       	ldd	r0, Z+8	; 0x08
    1010:	f1 85       	ldd	r31, Z+9	; 0x09
    1012:	e0 2d       	mov	r30, r0
    1014:	09 95       	icall
    1016:	89 2b       	or	r24, r25
    1018:	e1 f6       	brne	.-72     	; 0xfd2 <fputc+0x10>
    101a:	d8 01       	movw	r26, r16
    101c:	16 96       	adiw	r26, 0x06	; 6
    101e:	8d 91       	ld	r24, X+
    1020:	9c 91       	ld	r25, X
    1022:	17 97       	sbiw	r26, 0x07	; 7
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	17 96       	adiw	r26, 0x07	; 7
    1028:	9c 93       	st	X, r25
    102a:	8e 93       	st	-X, r24
    102c:	16 97       	sbiw	r26, 0x06	; 6
    102e:	ce 01       	movw	r24, r28
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	08 95       	ret

0000103a <__ultoa_invert>:
    103a:	fa 01       	movw	r30, r20
    103c:	aa 27       	eor	r26, r26
    103e:	28 30       	cpi	r18, 0x08	; 8
    1040:	51 f1       	breq	.+84     	; 0x1096 <__ultoa_invert+0x5c>
    1042:	20 31       	cpi	r18, 0x10	; 16
    1044:	81 f1       	breq	.+96     	; 0x10a6 <__ultoa_invert+0x6c>
    1046:	e8 94       	clt
    1048:	6f 93       	push	r22
    104a:	6e 7f       	andi	r22, 0xFE	; 254
    104c:	6e 5f       	subi	r22, 0xFE	; 254
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	af 4f       	sbci	r26, 0xFF	; 255
    1056:	b1 e0       	ldi	r27, 0x01	; 1
    1058:	3e d0       	rcall	.+124    	; 0x10d6 <__ultoa_invert+0x9c>
    105a:	b4 e0       	ldi	r27, 0x04	; 4
    105c:	3c d0       	rcall	.+120    	; 0x10d6 <__ultoa_invert+0x9c>
    105e:	67 0f       	add	r22, r23
    1060:	78 1f       	adc	r23, r24
    1062:	89 1f       	adc	r24, r25
    1064:	9a 1f       	adc	r25, r26
    1066:	a1 1d       	adc	r26, r1
    1068:	68 0f       	add	r22, r24
    106a:	79 1f       	adc	r23, r25
    106c:	8a 1f       	adc	r24, r26
    106e:	91 1d       	adc	r25, r1
    1070:	a1 1d       	adc	r26, r1
    1072:	6a 0f       	add	r22, r26
    1074:	71 1d       	adc	r23, r1
    1076:	81 1d       	adc	r24, r1
    1078:	91 1d       	adc	r25, r1
    107a:	a1 1d       	adc	r26, r1
    107c:	20 d0       	rcall	.+64     	; 0x10be <__ultoa_invert+0x84>
    107e:	09 f4       	brne	.+2      	; 0x1082 <__ultoa_invert+0x48>
    1080:	68 94       	set
    1082:	3f 91       	pop	r19
    1084:	2a e0       	ldi	r18, 0x0A	; 10
    1086:	26 9f       	mul	r18, r22
    1088:	11 24       	eor	r1, r1
    108a:	30 19       	sub	r19, r0
    108c:	30 5d       	subi	r19, 0xD0	; 208
    108e:	31 93       	st	Z+, r19
    1090:	de f6       	brtc	.-74     	; 0x1048 <__ultoa_invert+0xe>
    1092:	cf 01       	movw	r24, r30
    1094:	08 95       	ret
    1096:	46 2f       	mov	r20, r22
    1098:	47 70       	andi	r20, 0x07	; 7
    109a:	40 5d       	subi	r20, 0xD0	; 208
    109c:	41 93       	st	Z+, r20
    109e:	b3 e0       	ldi	r27, 0x03	; 3
    10a0:	0f d0       	rcall	.+30     	; 0x10c0 <__ultoa_invert+0x86>
    10a2:	c9 f7       	brne	.-14     	; 0x1096 <__ultoa_invert+0x5c>
    10a4:	f6 cf       	rjmp	.-20     	; 0x1092 <__ultoa_invert+0x58>
    10a6:	46 2f       	mov	r20, r22
    10a8:	4f 70       	andi	r20, 0x0F	; 15
    10aa:	40 5d       	subi	r20, 0xD0	; 208
    10ac:	4a 33       	cpi	r20, 0x3A	; 58
    10ae:	18 f0       	brcs	.+6      	; 0x10b6 <__ultoa_invert+0x7c>
    10b0:	49 5d       	subi	r20, 0xD9	; 217
    10b2:	31 fd       	sbrc	r19, 1
    10b4:	40 52       	subi	r20, 0x20	; 32
    10b6:	41 93       	st	Z+, r20
    10b8:	02 d0       	rcall	.+4      	; 0x10be <__ultoa_invert+0x84>
    10ba:	a9 f7       	brne	.-22     	; 0x10a6 <__ultoa_invert+0x6c>
    10bc:	ea cf       	rjmp	.-44     	; 0x1092 <__ultoa_invert+0x58>
    10be:	b4 e0       	ldi	r27, 0x04	; 4
    10c0:	a6 95       	lsr	r26
    10c2:	97 95       	ror	r25
    10c4:	87 95       	ror	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	ba 95       	dec	r27
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <__ultoa_invert+0x86>
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	61 05       	cpc	r22, r1
    10d2:	71 05       	cpc	r23, r1
    10d4:	08 95       	ret
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	0a 2e       	mov	r0, r26
    10dc:	06 94       	lsr	r0
    10de:	57 95       	ror	r21
    10e0:	47 95       	ror	r20
    10e2:	37 95       	ror	r19
    10e4:	27 95       	ror	r18
    10e6:	ba 95       	dec	r27
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__ultoa_invert+0xa2>
    10ea:	62 0f       	add	r22, r18
    10ec:	73 1f       	adc	r23, r19
    10ee:	84 1f       	adc	r24, r20
    10f0:	95 1f       	adc	r25, r21
    10f2:	a0 1d       	adc	r26, r0
    10f4:	08 95       	ret

000010f6 <_exit>:
    10f6:	f8 94       	cli

000010f8 <__stop_program>:
    10f8:	ff cf       	rjmp	.-2      	; 0x10f8 <__stop_program>
