
AVR_Project_ATmega128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000f5e  00000ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800112  00800112  00001004  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b6  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d74  00000000  00000000  000029a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be0  00000000  00000000  0000371a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000042fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e4  00000000  00000000  000045c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000098c  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 3a       	cpi	r26, 0xAF	; 175
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8a d1       	rcall	.+788    	; 0x3d8 <main>
  c4:	4a c7       	rjmp	.+3732   	; 0xf5a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <I2C_TransCheck_ACK>:

void I2C_Init(void)
{
	DDRD |= (1<< I2C_SCL)|(1<< I2C_SDA);
	TWBR=32; //SCL frequency is 200kHz
	TWSR=0x00; //set presca1er bits to zero
  c8:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  cc:	99 23       	and	r25, r25
  ce:	e4 f7       	brge	.-8      	; 0xc8 <I2C_TransCheck_ACK>
  d0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  d4:	98 7f       	andi	r25, 0xF8	; 248
  d6:	98 17       	cp	r25, r24
  d8:	11 f0       	breq	.+4      	; 0xde <I2C_TransCheck_ACK+0x16>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	08 95       	ret
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <I2C_Start>:
}

unsigned char I2C_Start(void)
{
	TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);
  e2:	e4 e7       	ldi	r30, 0x74	; 116
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 6a       	ori	r24, 0xA4	; 164
  ea:	80 83       	st	Z, r24
	 return I2C_TransCheck_ACK(I2C_START);
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	ec cf       	rjmp	.-40     	; 0xc8 <I2C_TransCheck_ACK>
}
  f0:	08 95       	ret

000000f2 <I2C_Stop>:

void I2C_Stop(void)
{
	TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f8:	08 95       	ret

000000fa <I2C_Write_SLAW>:
}
/***************************************/

unsigned char I2C_Write_SLAW(unsigned char Addr)
{
	TWDR = Addr;
  fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);      // SLA + W ∆–≈∂ ∫∏≥ª±‚
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	return I2C_TransCheck_ACK(MT_SLA_ACK);
 104:	88 e1       	ldi	r24, 0x18	; 24
 106:	e0 cf       	rjmp	.-64     	; 0xc8 <I2C_TransCheck_ACK>
}
 108:	08 95       	ret

0000010a <I2C_Write_SLAR>:

unsigned char I2C_Write_SLAR(unsigned char Addr)
{
	TWDR = Addr|0x01;
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);  // SLA + R ∆–≈∂ ∫∏≥ª±‚
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	return I2C_TransCheck_ACK(MR_SLA_ACK);
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	d7 cf       	rjmp	.-82     	; 0xc8 <I2C_TransCheck_ACK>
}
 11a:	08 95       	ret

0000011c <I2C_Write>:

unsigned char I2C_Write(uint8_t var_i2cData_u8)
{
	TWDR = var_i2cData_u8 ;
 11c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = ((1<< TWINT) | (1<<TWEN));
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	return I2C_TransCheck_ACK(MT_DATA_ACK); 
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	cf cf       	rjmp	.-98     	; 0xc8 <I2C_TransCheck_ACK>
}
 12a:	08 95       	ret

0000012c <I2C_Read>:

uint8_t I2C_Read(void)
{
	TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWEA));
 12c:	84 ec       	ldi	r24, 0xC4	; 196
 12e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while ( !(TWCR & (1 <<TWINT))); // wait recieve complete
 132:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 136:	88 23       	and	r24, r24
 138:	e4 f7       	brge	.-8      	; 0x132 <I2C_Read+0x6>
	I2C_TransCheck_ACK(MR_DATA_ACK);
 13a:	88 e5       	ldi	r24, 0x58	; 88
 13c:	c5 df       	rcall	.-118    	; 0xc8 <I2C_TransCheck_ACK>
	return TWDR;
 13e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 142:	08 95       	ret

00000144 <LCD_pulse_enable>:
   //Ï∂úÎ†• ÌõÑ Ïª§ÏÑúÎ•º Ïò§Î•∏Ï™ΩÏúºÎ°ú ÏòÆÍπÄ, Ï¶â DDRAMÏùò Ï£ºÏÜåÍ∞Ä Ï¶ùÍ∞ÄÌïòÏó¨ ÌôîÎ©¥ Ïù¥ÎèôÏùÄ ÏóÜÏùå
   LCD_write_command(0x06);
}

void LCD_pulse_enable(void) {
   PORT_CONTROL |= (1 << E_PIN);
 144:	85 b3       	in	r24, 0x15	; 21
 146:	84 60       	ori	r24, 0x04	; 4
 148:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	86 e6       	ldi	r24, 0x66	; 102
 14c:	9e e0       	ldi	r25, 0x0E	; 14
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_pulse_enable+0xa>
 152:	00 00       	nop
   _delay_ms(1);
   PORT_CONTROL &= ~(1 << E_PIN);
 154:	85 b3       	in	r24, 0x15	; 21
 156:	8b 7f       	andi	r24, 0xFB	; 251
 158:	85 bb       	out	0x15, r24	; 21
 15a:	86 e6       	ldi	r24, 0x66	; 102
 15c:	9e e0       	ldi	r25, 0x0E	; 14
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_pulse_enable+0x1a>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <LCD_write_data>:
   _delay_ms(1);
}

void LCD_write_data(uint8_t data) {
   PORT_CONTROL |= (1 << RS_PIN);
 166:	95 b3       	in	r25, 0x15	; 21
 168:	91 60       	ori	r25, 0x01	; 1
 16a:	95 bb       	out	0x15, r25	; 21
   PORT_DATA = data;
 16c:	88 bb       	out	0x18, r24	; 24
   LCD_pulse_enable();
 16e:	ea df       	rcall	.-44     	; 0x144 <LCD_pulse_enable>
 170:	8c ec       	ldi	r24, 0xCC	; 204
 172:	9c e1       	ldi	r25, 0x1C	; 28
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_write_data+0xe>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_write_data+0x14>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <LCD_write_command>:
   _delay_ms(2);
}

void LCD_write_command(uint8_t command) {
   PORT_CONTROL &= ~(1 << RS_PIN);
 17e:	95 b3       	in	r25, 0x15	; 21
 180:	9e 7f       	andi	r25, 0xFE	; 254
 182:	95 bb       	out	0x15, r25	; 21
   PORT_DATA = command;
 184:	88 bb       	out	0x18, r24	; 24
   LCD_pulse_enable();
 186:	de df       	rcall	.-68     	; 0x144 <LCD_pulse_enable>
 188:	8c ec       	ldi	r24, 0xCC	; 204
 18a:	9c e1       	ldi	r25, 0x1C	; 28
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_write_command+0xe>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_write_command+0x14>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <LCD_write_string>:
   _delay_ms(2);
}

void LCD_write_string(char *string) {
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	8c 01       	movw	r16, r24
   uint8_t i;
   for(i = 0; string[i]; i++)      //Ï¢ÖÎ£å Î¨∏ÏûêÎ•º ÎßåÎÇ† ÎïåÍπåÏßÄ
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <LCD_write_string+0x10>
   LCD_write_data(string[i]);   //Î¨∏Ïûê Îã®ÏúÑ Ï∂úÎ†•
 1a2:	e1 df       	rcall	.-62     	; 0x166 <LCD_write_data>
   _delay_ms(2);
}

void LCD_write_string(char *string) {
   uint8_t i;
   for(i = 0; string[i]; i++)      //Ï¢ÖÎ£å Î¨∏ÏûêÎ•º ÎßåÎÇ† ÎïåÍπåÏßÄ
 1a4:	cf 5f       	subi	r28, 0xFF	; 255
 1a6:	f8 01       	movw	r30, r16
 1a8:	ec 0f       	add	r30, r28
 1aa:	f1 1d       	adc	r31, r1
 1ac:	80 81       	ld	r24, Z
 1ae:	81 11       	cpse	r24, r1
 1b0:	f8 cf       	rjmp	.-16     	; 0x1a2 <LCD_write_string+0xc>
   LCD_write_data(string[i]);   //Î¨∏Ïûê Îã®ÏúÑ Ï∂úÎ†•
}
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <LCD_goto_XY>:

void LCD_goto_XY(uint8_t row, uint8_t col) {
   col %= 16;   //[0 15]
 1ba:	6f 70       	andi	r22, 0x0F	; 15
   row %= 2;   //[0 1]
   
   uint8_t address = 0;
   
   if(row == 0) address = 0x80;
 1bc:	98 2f       	mov	r25, r24
 1be:	91 70       	andi	r25, 0x01	; 1
 1c0:	80 ff       	sbrs	r24, 0
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <LCD_goto_XY+0x12>
   else if(row == 1) address = 0xC0;
 1c4:	91 30       	cpi	r25, 0x01	; 1
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <LCD_goto_XY+0x16>

void LCD_goto_XY(uint8_t row, uint8_t col) {
   col %= 16;   //[0 15]
   row %= 2;   //[0 1]
   
   uint8_t address = 0;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <LCD_goto_XY+0x18>
   
   if(row == 0) address = 0x80;
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <LCD_goto_XY+0x18>
   else if(row == 1) address = 0xC0;
 1d0:	80 ec       	ldi	r24, 0xC0	; 192
   
   if(col < 16) address += col;
 1d2:	86 0f       	add	r24, r22
   
   LCD_write_command(address);   //Ïª§ÏÑú Ïù¥Îèô
 1d4:	d4 cf       	rjmp	.-88     	; 0x17e <LCD_write_command>
 1d6:	08 95       	ret

000001d8 <LCD_clear>:
}

void LCD_clear(void) {
   LCD_write_command(COMMAND_CLEAR_DISPLAY); //0x01
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	d1 df       	rcall	.-94     	; 0x17e <LCD_write_command>
 1dc:	8c ec       	ldi	r24, 0xCC	; 204
 1de:	9c e1       	ldi	r25, 0x1C	; 28
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_clear+0x8>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_clear+0xe>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <LCD_init>:
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <LCD_init+0x6>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_init+0x10>
 1fa:	00 00       	nop

void LCD_init(void) {
   _delay_ms(50);   //Ï¥àÍ∏∞ Íµ¨Îèô ÏãúÍ∞Ñ
   
   //Ïó∞Í≤∞ ÌïÄÏùÑ Ï∂úÎ†•ÏúºÎ°ú ÏÑ§Ï†ï
   DDR_DATA = 0xFF;                                   //DDRD Îç∞Ïù¥ÌÑ∞ ÌïÄÏùò Îç∞Ïù¥ÌÑ∞ Î∞©Ìñ•
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	87 bb       	out	0x17, r24	; 23
   PORT_DATA = 0x00;                                   //PORTD Îç∞Ïù¥ÌÑ∞ ÌïÄ Ïó∞Í≤∞
 200:	18 ba       	out	0x18, r1	; 24
   DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);  //DDRC Ï†úÏñ¥ ÌïÄÏùò Îç∞Ïù¥ÌÑ∞ Î∞©Ìñ•
 202:	84 b3       	in	r24, 0x14	; 20
 204:	87 60       	ori	r24, 0x07	; 7
 206:	84 bb       	out	0x14, r24	; 20
   
   //R/W ÌïÄÏúºÎ°ú LOWÎ•º Ï∂úÎ†•ÌïòÏó¨ Ïì∞Í∏∞ Ï†ÑÏö©ÏúºÎ°ú ÏÇ¨Ïö©
   PORT_CONTROL &= ~(1 << RW_PIN);                          //PORTC Ï†úÏñ¥ ÌïÄ Ïó∞Í≤∞
 208:	85 b3       	in	r24, 0x15	; 21
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	85 bb       	out	0x15, r24	; 21
   
   LCD_write_command(COMMAND_8_BIT_MODE);   //8ÎπÑÌä∏ Î™®Îìú 0x38
 20e:	88 e3       	ldi	r24, 0x38	; 56
 210:	b6 df       	rcall	.-148    	; 0x17e <LCD_write_command>
   
   //display on/off control
   //ÌôîÎ©¥ on, Ïª§ÏÑú off, Ïª§ÏÑú ÍπúÎπ°ÏûÑ off
   uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
   LCD_write_command(command);
 212:	8c e0       	ldi	r24, 0x0C	; 12
   
   LCD_clear();   //ÌôîÎ©¥ ÏßÄÏõÄ
 214:	b4 df       	rcall	.-152    	; 0x17e <LCD_write_command>
   
   //Entry Mode Set
   //Ï∂úÎ†• ÌõÑ Ïª§ÏÑúÎ•º Ïò§Î•∏Ï™ΩÏúºÎ°ú ÏòÆÍπÄ, Ï¶â DDRAMÏùò Ï£ºÏÜåÍ∞Ä Ï¶ùÍ∞ÄÌïòÏó¨ ÌôîÎ©¥ Ïù¥ÎèôÏùÄ ÏóÜÏùå
   LCD_write_command(0x06);
 216:	e0 df       	rcall	.-64     	; 0x1d8 <LCD_clear>
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	b1 cf       	rjmp	.-158    	; 0x17e <LCD_write_command>
 21c:	08 95       	ret

0000021e <Receive_Ardu>:
char LCD_tem[10] = {0x00};
	
float humi, temp;
char ValueString[100];

void Receive_Ardu(void){
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	00 d0       	rcall	.+0      	; 0x224 <Receive_Ardu+0x6>
 224:	00 d0       	rcall	.+0      	; 0x226 <Receive_Ardu+0x8>
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
	char* pptr[2];
	do
	{
		data = UART1_receive();
 22a:	fc d0       	rcall	.+504    	; 0x424 <UART1_receive>
 22c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <data>
		msg[idx] = data;
 230:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <idx>
 234:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <idx+0x1>
 238:	e0 5d       	subi	r30, 0xD0	; 208
 23a:	fe 4f       	sbci	r31, 0xFE	; 254
		UART0_transmit(msg[idx]);
 23c:	80 83       	st	Z, r24
 23e:	ee d0       	rcall	.+476    	; 0x41c <UART0_transmit>
		idx++;
 240:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <idx>
 244:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <idx+0x1>
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <idx+0x1>
 24e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <idx>
 252:	29 e9       	ldi	r18, 0x99	; 153
 254:	39 e5       	ldi	r19, 0x59	; 89
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <Receive_Ardu+0x3a>
 260:	00 00       	nop
		_delay_ms(30);
		if(msg[idx-1] == '@'){
 262:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <idx>
 266:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <idx+0x1>
 26a:	e1 5d       	subi	r30, 0xD1	; 209
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	80 81       	ld	r24, Z
 270:	80 34       	cpi	r24, 0x40	; 64
 272:	09 f0       	breq	.+2      	; 0x276 <Receive_Ardu+0x58>
 274:	3b c0       	rjmp	.+118    	; 0x2ec <Receive_Ardu+0xce>
			char* ptr = strtok(msg,"#");
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	71 e0       	ldi	r23, 0x01	; 1
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	60 d3       	rcall	.+1728   	; 0x940 <strtok>
			while(ptr != NULL){
 280:	1d c0       	rjmp	.+58     	; 0x2bc <Receive_Ardu+0x9e>
				pptr[i]=ptr;
 282:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <i>
 286:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <i+0x1>
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	2c 0f       	add	r18, r28
 294:	3d 1f       	adc	r19, r29
 296:	e2 0f       	add	r30, r18
 298:	f3 1f       	adc	r31, r19
 29a:	91 83       	std	Z+1, r25	; 0x01
 29c:	80 83       	st	Z, r24
				ptr = strtok(NULL, "@"); // ÎëêÎ≤àÏß∏Ïù∏ nÍ∞íÍπåÏßÄ Î∞õÍ≥† "@"Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÎÅùÏùÑ ÌôïÏã§ÌûàÌï®
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	71 e0       	ldi	r23, 0x01	; 1
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	4c d3       	rcall	.+1688   	; 0x940 <strtok>
				i++;
 2a8:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <i>
 2ac:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <i+0x1>
 2b0:	2f 5f       	subi	r18, 0xFF	; 255
 2b2:	3f 4f       	sbci	r19, 0xFF	; 255
 2b4:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <i+0x1>
 2b8:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <i>
		UART0_transmit(msg[idx]);
		idx++;
		_delay_ms(30);
		if(msg[idx-1] == '@'){
			char* ptr = strtok(msg,"#");
			while(ptr != NULL){
 2bc:	00 97       	sbiw	r24, 0x00	; 0
				pptr[i]=ptr;
				ptr = strtok(NULL, "@"); // ÎëêÎ≤àÏß∏Ïù∏ nÍ∞íÍπåÏßÄ Î∞õÍ≥† "@"Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÎÅùÏùÑ ÌôïÏã§ÌûàÌï®
				i++;
			}
			m = atoi(pptr[0]);
 2be:	09 f7       	brne	.-62     	; 0x282 <Receive_Ardu+0x64>
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	20 d3       	rcall	.+1600   	; 0x906 <atoi>
 2c6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <m+0x1>
 2ca:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <m>
			n = atoi(pptr[1]);
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	19 d3       	rcall	.+1586   	; 0x906 <atoi>
 2d4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <n+0x1>
 2d8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <n>
			idx = 0;
 2dc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <idx+0x1>
 2e0:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <idx>
			i = 0;
 2e4:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <i+0x1>
 2e8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <i>
			
		}
	}while(data != '@');
 2ec:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <data>
 2f0:	80 34       	cpi	r24, 0x40	; 64
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <Receive_Ardu+0xd8>
 2f4:	9a cf       	rjmp	.-204    	; 0x22a <Receive_Ardu+0xc>
}
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <Dust_LCDshow>:

void Dust_LCDshow(void)
{	
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
	
	sprintf(LCD_hum, "h : %d", (int)humi);
 308:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <humi>
 30c:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <humi+0x1>
 310:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <humi+0x2>
 314:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <humi+0x3>
 318:	d4 d1       	rcall	.+936    	; 0x6c2 <__fixsfsi>
 31a:	7f 93       	push	r23
 31c:	6f 93       	push	r22
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	9f 93       	push	r25
 324:	8f 93       	push	r24
 326:	8e e1       	ldi	r24, 0x1E	; 30
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	9f 93       	push	r25
 32c:	8f 93       	push	r24
 32e:	3a d3       	rcall	.+1652   	; 0x9a4 <sprintf>
	sprintf(LCD_tem, "t : %d", (int)temp);
 330:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <temp>
 334:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <temp+0x1>
 338:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <temp+0x2>
 33c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <temp+0x3>
 340:	c0 d1       	rcall	.+896    	; 0x6c2 <__fixsfsi>
 342:	7f 93       	push	r23
 344:	6f 93       	push	r22
 346:	8b e0       	ldi	r24, 0x0B	; 11
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	84 e1       	ldi	r24, 0x14	; 20
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
	LCD_clear();	
 356:	26 d3       	rcall	.+1612   	; 0x9a4 <sprintf>
 358:	3f df       	rcall	.-386    	; 0x1d8 <LCD_clear>
	LCD_goto_XY(0, 0);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	2d df       	rcall	.-422    	; 0x1ba <LCD_goto_XY>
 360:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <m+0x1>
	sprintf(LCD_msg, "%d", m);
 364:	8f 93       	push	r24
 366:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <m>
 36a:	8f 93       	push	r24
 36c:	c8 e0       	ldi	r28, 0x08	; 8
 36e:	d1 e0       	ldi	r29, 0x01	; 1
 370:	df 93       	push	r29
 372:	cf 93       	push	r28
 374:	8c e2       	ldi	r24, 0x2C	; 44
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	9f 93       	push	r25
 37a:	8f 93       	push	r24
 37c:	13 d3       	rcall	.+1574   	; 0x9a4 <sprintf>
	LCD_write_string(LCD_msg);
 37e:	8c e2       	ldi	r24, 0x2C	; 44
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	09 df       	rcall	.-494    	; 0x196 <LCD_write_string>
 384:	68 e0       	ldi	r22, 0x08	; 8
	LCD_goto_XY(0, 8);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	18 df       	rcall	.-464    	; 0x1ba <LCD_goto_XY>
 38a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <n+0x1>
	sprintf(LCD_msg2, "%d", n);
 38e:	8f 93       	push	r24
 390:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <n>
 394:	8f 93       	push	r24
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	88 e2       	ldi	r24, 0x28	; 40
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	9f 93       	push	r25
 3a0:	8f 93       	push	r24
 3a2:	00 d3       	rcall	.+1536   	; 0x9a4 <sprintf>
	LCD_write_string(LCD_msg2);
 3a4:	88 e2       	ldi	r24, 0x28	; 40
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	f6 de       	rcall	.-532    	; 0x196 <LCD_write_string>
	LCD_goto_XY(1, 0);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	05 df       	rcall	.-502    	; 0x1ba <LCD_goto_XY>
	LCD_write_string(LCD_hum);
 3b0:	8e e1       	ldi	r24, 0x1E	; 30
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	f0 de       	rcall	.-544    	; 0x196 <LCD_write_string>
 3b6:	68 e0       	ldi	r22, 0x08	; 8
	LCD_goto_XY(1, 8);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	ff de       	rcall	.-514    	; 0x1ba <LCD_goto_XY>
 3bc:	84 e1       	ldi	r24, 0x14	; 20
 3be:	91 e0       	ldi	r25, 0x01	; 1
	LCD_write_string(LCD_tem);
 3c0:	ea de       	rcall	.-556    	; 0x196 <LCD_write_string>
 3c2:	8d b7       	in	r24, 0x3d	; 61
 3c4:	9e b7       	in	r25, 0x3e	; 62
 3c6:	48 96       	adiw	r24, 0x18	; 24
}
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	9e bf       	out	0x3e, r25	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	8d bf       	out	0x3d, r24	; 61
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <main>:
 3d8:	2c d0       	rcall	.+88     	; 0x432 <UART_INIT>
 3da:	07 df       	rcall	.-498    	; 0x1ea <LCD_init>
 3dc:	b9 d0       	rcall	.+370    	; 0x550 <readHumidity>
    /* Replace with your application code */
    while (1) 
    {		
		//DHT Sensor START	

		humi = readHumidity();
 3de:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <humi>
 3e2:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <humi+0x1>
 3e6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <humi+0x2>
 3ea:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <humi+0x3>
		temp = readTemperature();
 3ee:	da d0       	rcall	.+436    	; 0x5a4 <readTemperature>
 3f0:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <temp>
 3f4:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <temp+0x1>
 3f8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <temp+0x2>
 3fc:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <temp+0x3>
		 Receive_Ardu();
 400:	0e df       	rcall	.-484    	; 0x21e <Receive_Ardu>
		 UART0_transmit('\n');
 402:	8a e0       	ldi	r24, 0x0A	; 10
 404:	0b d0       	rcall	.+22     	; 0x41c <UART0_transmit>
 406:	7e df       	rcall	.-260    	; 0x304 <Dust_LCDshow>
		
		 Dust_LCDshow();
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	9c e2       	ldi	r25, 0x2C	; 44
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	e0 cf       	rjmp	.-64     	; 0x3dc <main+0x4>

0000041c <UART0_transmit>:
 41c:	5d 9b       	sbis	0x0b, 5	; 11
 41e:	fe cf       	rjmp	.-4      	; 0x41c <UART0_transmit>
	while(!(UCSR0A & (1<<RXC1)));
	// (1<<UDRE0)ÏùÄ ÏïàÎ∞îÎÄåÎäî Í∞íÏù¥Îã§ -> UDRE0 = 5;
	// UCSR0A
	// ÎπÑÏñ¥ÏûàÎäî ÏÉÅÌÉú 1 & 1 = 1 -> 0   : ÏµúÏ¢Ö 0   =>   whileÎ¨∏ Îπ†Ï†∏ÎÇòÏò¥
	return UDR0;
}
 420:	8c b9       	out	0x0c, r24	; 12
 422:	08 95       	ret

00000424 <UART1_receive>:

char UART1_receive(void)
{
	while(!(UCSR1A & (1<<RXC1)));
 424:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 428:	88 23       	and	r24, r24
 42a:	e4 f7       	brge	.-8      	; 0x424 <UART1_receive>
	return UDR1;
 42c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 430:	08 95       	ret

00000432 <UART_INIT>:

void UART_INIT(void)
{
	DDRE = 0xFE;
 432:	2e ef       	ldi	r18, 0xFE	; 254
 434:	22 b9       	out	0x02, r18	; 2
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 436:	98 e1       	ldi	r25, 0x18	; 24
 438:	9a b9       	out	0x0a, r25	; 10
	//UCSR0C = 0x06;
	UBRR0L = 95;	//baudrate
 43a:	8f e5       	ldi	r24, 0x5F	; 95
 43c:	89 b9       	out	0x09, r24	; 9
	
	DDRD = 0xFE;
 43e:	21 bb       	out	0x11, r18	; 17
	UCSR1B = (1<<RXEN0) | (1<<TXEN0);
 440:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UBRR1L = 95;
 444:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 448:	08 95       	ret

0000044a <checkCRC>:
#include "sht20.h"

uint8_t checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
 44a:	8f 92       	push	r8
 44c:	9f 92       	push	r9
 44e:	af 92       	push	r10
 450:	bf 92       	push	r11
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
	uint32_t remainder = (uint32_t)message_from_sensor << 8;
 45a:	a0 e0       	ldi	r26, 0x00	; 0
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	ba 2f       	mov	r27, r26
 460:	a9 2f       	mov	r26, r25
 462:	98 2f       	mov	r25, r24
 464:	88 27       	eor	r24, r24
	remainder |= check_value_from_sensor;
 466:	86 2b       	or	r24, r22
	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
	for(int i = 0 ; i < 16 ; i++){
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	30 e0       	ldi	r19, 0x00	; 0

uint8_t checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
	uint32_t remainder = (uint32_t)message_from_sensor << 8;
	remainder |= check_value_from_sensor;
	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
 46c:	0f 2e       	mov	r0, r31
 46e:	c1 2c       	mov	r12, r1
 470:	f0 e8       	ldi	r31, 0x80	; 128
 472:	df 2e       	mov	r13, r31
 474:	f8 e9       	ldi	r31, 0x98	; 152
 476:	ef 2e       	mov	r14, r31
 478:	f1 2c       	mov	r15, r1
 47a:	f0 2d       	mov	r31, r0
	for(int i = 0 ; i < 16 ; i++){
 47c:	19 c0       	rjmp	.+50     	; 0x4b0 <checkCRC+0x66>
		if(remainder & (uint32_t)1 << (23 - i)){
 47e:	47 e1       	ldi	r20, 0x17	; 23
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	42 1b       	sub	r20, r18
 484:	53 0b       	sbc	r21, r19
 486:	4c 01       	movw	r8, r24
 488:	5d 01       	movw	r10, r26
 48a:	04 c0       	rjmp	.+8      	; 0x494 <checkCRC+0x4a>
 48c:	b6 94       	lsr	r11
 48e:	a7 94       	ror	r10
 490:	97 94       	ror	r9
 492:	87 94       	ror	r8
 494:	4a 95       	dec	r20
 496:	d2 f7       	brpl	.-12     	; 0x48c <checkCRC+0x42>
 498:	80 fe       	sbrs	r8, 0
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <checkCRC+0x5a>
			remainder ^= divsor;
 49c:	8c 25       	eor	r24, r12
 49e:	9d 25       	eor	r25, r13
 4a0:	ae 25       	eor	r26, r14
 4a2:	bf 25       	eor	r27, r15
		}
		divsor >>= 1;
 4a4:	f6 94       	lsr	r15
 4a6:	e7 94       	ror	r14
 4a8:	d7 94       	ror	r13
 4aa:	c7 94       	ror	r12
uint8_t checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
	uint32_t remainder = (uint32_t)message_from_sensor << 8;
	remainder |= check_value_from_sensor;
	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
	for(int i = 0 ; i < 16 ; i++){
 4ac:	2f 5f       	subi	r18, 0xFF	; 255
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	20 31       	cpi	r18, 0x10	; 16
 4b2:	31 05       	cpc	r19, r1
 4b4:	24 f3       	brlt	.-56     	; 0x47e <checkCRC+0x34>
			remainder ^= divsor;
		}
		divsor >>= 1;
	}
	return (uint8_t)remainder;
}
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	df 90       	pop	r13
 4bc:	cf 90       	pop	r12
 4be:	bf 90       	pop	r11
 4c0:	af 90       	pop	r10
 4c2:	9f 90       	pop	r9
 4c4:	8f 90       	pop	r8
 4c6:	08 95       	ret

000004c8 <readValue>:

uint16_t readValue(unsigned char cmd)
{
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	c8 2f       	mov	r28, r24
	unsigned char toRead;
	unsigned char counter;
	unsigned char msb, lsb, checksum;
	uint16_t rawValue;
	
	I2C_Start();
 4d0:	08 de       	rcall	.-1008   	; 0xe2 <I2C_Start>
	I2C_Write_SLAW(SLAVE_ADDRESS);
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	11 de       	rcall	.-990    	; 0xfa <I2C_Write_SLAW>
	I2C_Write(cmd);
 4d8:	8c 2f       	mov	r24, r28
 4da:	20 de       	rcall	.-960    	; 0x11c <I2C_Write>
 4dc:	26 e0       	ldi	r18, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	2a 95       	dec	r18
 4e0:	f1 f7       	brne	.-4      	; 0x4de <readValue+0x16>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <readValue+0x1c>
	_delay_us(20);
	I2C_Stop();
 4e4:	06 de       	rcall	.-1012   	; 0xf2 <I2C_Stop>
 4e6:	c0 e0       	ldi	r28, 0x00	; 0
	
	for(counter =0; counter < MAX_COUNTER ; counter++)
 4e8:	10 c0       	rjmp	.+32     	; 0x50a <readValue+0x42>
 4ea:	87 ea       	ldi	r24, 0xA7	; 167
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ec:	91 e6       	ldi	r25, 0x61	; 97
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <readValue+0x26>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <readValue+0x2c>
 4f4:	00 00       	nop
	{
		_delay_ms(DELAY_INTERVAL);
		I2C_Start();
 4f6:	f5 dd       	rcall	.-1046   	; 0xe2 <I2C_Start>
 4f8:	80 e8       	ldi	r24, 0x80	; 128
		toRead = I2C_Write_SLAR(SLAVE_ADDRESS);
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	06 de       	rcall	.-1012   	; 0x10a <I2C_Write_SLAR>
 4fe:	88 23       	and	r24, r24
		if(toRead == 0)
 500:	31 f0       	breq	.+12     	; 0x50e <readValue+0x46>
 502:	81 30       	cpi	r24, 0x01	; 1
		break;
		else if(toRead ==1)
 504:	09 f4       	brne	.+2      	; 0x508 <readValue+0x40>
 506:	f5 dd       	rcall	.-1046   	; 0xf2 <I2C_Stop>
		I2C_Stop();
 508:	cf 5f       	subi	r28, 0xFF	; 255
	I2C_Write_SLAW(SLAVE_ADDRESS);
	I2C_Write(cmd);
	_delay_us(20);
	I2C_Stop();
	
	for(counter =0; counter < MAX_COUNTER ; counter++)
 50a:	c4 36       	cpi	r28, 0x64	; 100
		if(toRead == 0)
		break;
		else if(toRead ==1)
		I2C_Stop();
	}
	if(counter == MAX_COUNTER)
 50c:	70 f3       	brcs	.-36     	; 0x4ea <readValue+0x22>
	{
		return ERROR_I2C_TIMEOUT;
	}
	
	msb = I2C_Read();
 50e:	c4 36       	cpi	r28, 0x64	; 100
 510:	b1 f0       	breq	.+44     	; 0x53e <readValue+0x76>
 512:	0c de       	rcall	.-1000   	; 0x12c <I2C_Read>
	lsb = I2C_Read();
 514:	c8 2f       	mov	r28, r24
 516:	0a de       	rcall	.-1004   	; 0x12c <I2C_Read>
 518:	d8 2f       	mov	r29, r24
	checksum = I2C_Read();
 51a:	08 de       	rcall	.-1008   	; 0x12c <I2C_Read>
 51c:	18 2f       	mov	r17, r24
 51e:	e9 dd       	rcall	.-1070   	; 0xf2 <I2C_Stop>
	I2C_Stop();
 520:	8c 2f       	mov	r24, r28
	rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	98 2f       	mov	r25, r24
 526:	88 27       	eor	r24, r24
 528:	9c 01       	movw	r18, r24
 52a:	2d 2b       	or	r18, r29
 52c:	e9 01       	movw	r28, r18
 52e:	61 2f       	mov	r22, r17
	
	if(checkCRC(rawValue, checksum) != 0){
 530:	ce 01       	movw	r24, r28
 532:	8b df       	rcall	.-234    	; 0x44a <checkCRC>
 534:	81 11       	cpse	r24, r1
 536:	06 c0       	rjmp	.+12     	; 0x544 <readValue+0x7c>
 538:	ce 01       	movw	r24, r28
 53a:	8c 7f       	andi	r24, 0xFC	; 252
		return ERROR_BAD_CRC;
	}
	
	return (rawValue& 0xFFFC);
 53c:	05 c0       	rjmp	.+10     	; 0x548 <readValue+0x80>
 53e:	86 ee       	ldi	r24, 0xE6	; 230
 540:	93 e0       	ldi	r25, 0x03	; 3
		else if(toRead ==1)
		I2C_Stop();
	}
	if(counter == MAX_COUNTER)
	{
		return ERROR_I2C_TIMEOUT;
 542:	02 c0       	rjmp	.+4      	; 0x548 <readValue+0x80>
 544:	87 ee       	ldi	r24, 0xE7	; 231
 546:	93 e0       	ldi	r25, 0x03	; 3
	checksum = I2C_Read();
	I2C_Stop();
	rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
	
	if(checkCRC(rawValue, checksum) != 0){
		return ERROR_BAD_CRC;
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
	}
	
	return (rawValue& 0xFFFC);
}
 54c:	1f 91       	pop	r17
 54e:	08 95       	ret

00000550 <readHumidity>:
 550:	85 ef       	ldi	r24, 0xF5	; 245
 552:	ba df       	rcall	.-140    	; 0x4c8 <readValue>
float readHumidity(void)
{
	float temp;
	float rh;

	uint16_t rawHumidity = readValue(TRIGGER_HUMD_MEASURE_NOHOLD);
 554:	bc 01       	movw	r22, r24
	if(rawHumidity == ERROR_I2C_TIMEOUT || rawHumidity == ERROR_BAD_CRC){
 556:	86 5e       	subi	r24, 0xE6	; 230
 558:	93 40       	sbci	r25, 0x03	; 3
 55a:	02 97       	sbiw	r24, 0x02	; 2
 55c:	40 f4       	brcc	.+16     	; 0x56e <readHumidity+0x1e>
		return(rawHumidity);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	e0 d0       	rcall	.+448    	; 0x724 <__floatunsisf>
 564:	56 2f       	mov	r21, r22
 566:	47 2f       	mov	r20, r23
 568:	38 2f       	mov	r19, r24
 56a:	29 2f       	mov	r18, r25
 56c:	16 c0       	rjmp	.+44     	; 0x59a <readHumidity+0x4a>
	}
	temp = rawHumidity / 65536.0;
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	d8 d0       	rcall	.+432    	; 0x724 <__floatunsisf>
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	40 e8       	ldi	r20, 0x80	; 128
 57a:	57 e3       	ldi	r21, 0x37	; 55
 57c:	61 d1       	rcall	.+706    	; 0x840 <__mulsf3>
	temp = temp * 125.0;
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	4a ef       	ldi	r20, 0xFA	; 250
 584:	52 e4       	ldi	r21, 0x42	; 66
 586:	5c d1       	rcall	.+696    	; 0x840 <__mulsf3>
	rh = temp - 6.0;
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	40 ec       	ldi	r20, 0xC0	; 192
 58e:	50 e4       	ldi	r21, 0x40	; 64
 590:	33 d0       	rcall	.+102    	; 0x5f8 <__subsf3>
 592:	56 2f       	mov	r21, r22

	return rh;
 594:	47 2f       	mov	r20, r23
 596:	38 2f       	mov	r19, r24
 598:	29 2f       	mov	r18, r25
 59a:	65 2f       	mov	r22, r21
}
 59c:	74 2f       	mov	r23, r20
 59e:	83 2f       	mov	r24, r19
 5a0:	92 2f       	mov	r25, r18
 5a2:	08 95       	ret

000005a4 <readTemperature>:
 5a4:	83 ef       	ldi	r24, 0xF3	; 243
float readTemperature(void)
{
	float temp;
	float realTemperature;
	
	uint16_t rawTemperature = readValue(TRIGGER_TEMP_MEASURE_NOHOLD);
 5a6:	90 df       	rcall	.-224    	; 0x4c8 <readValue>
 5a8:	bc 01       	movw	r22, r24
	if(rawTemperature == ERROR_I2C_TIMEOUT || rawTemperature == ERROR_BAD_CRC){
 5aa:	86 5e       	subi	r24, 0xE6	; 230
 5ac:	93 40       	sbci	r25, 0x03	; 3
 5ae:	02 97       	sbiw	r24, 0x02	; 2
 5b0:	40 f4       	brcc	.+16     	; 0x5c2 <readTemperature+0x1e>
		return(rawTemperature);
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	b6 d0       	rcall	.+364    	; 0x724 <__floatunsisf>
 5b8:	56 2f       	mov	r21, r22
 5ba:	47 2f       	mov	r20, r23
 5bc:	38 2f       	mov	r19, r24
 5be:	29 2f       	mov	r18, r25
 5c0:	16 c0       	rjmp	.+44     	; 0x5ee <readTemperature+0x4a>
	}
	temp = rawTemperature / 65536.0;
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	ae d0       	rcall	.+348    	; 0x724 <__floatunsisf>
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	40 e8       	ldi	r20, 0x80	; 128
 5ce:	57 e3       	ldi	r21, 0x37	; 55
 5d0:	37 d1       	rcall	.+622    	; 0x840 <__mulsf3>
	temp = temp * 175.72;
 5d2:	22 e5       	ldi	r18, 0x52	; 82
 5d4:	38 eb       	ldi	r19, 0xB8	; 184
 5d6:	4f e2       	ldi	r20, 0x2F	; 47
 5d8:	53 e4       	ldi	r21, 0x43	; 67
 5da:	32 d1       	rcall	.+612    	; 0x840 <__mulsf3>
	realTemperature = temp - 46.85;
 5dc:	26 e6       	ldi	r18, 0x66	; 102
 5de:	36 e6       	ldi	r19, 0x66	; 102
 5e0:	4b e3       	ldi	r20, 0x3B	; 59
 5e2:	52 e4       	ldi	r21, 0x42	; 66
 5e4:	09 d0       	rcall	.+18     	; 0x5f8 <__subsf3>
 5e6:	56 2f       	mov	r21, r22

	return realTemperature;
 5e8:	47 2f       	mov	r20, r23
 5ea:	38 2f       	mov	r19, r24
 5ec:	29 2f       	mov	r18, r25
 5ee:	65 2f       	mov	r22, r21
}
 5f0:	74 2f       	mov	r23, r20
 5f2:	83 2f       	mov	r24, r19
 5f4:	92 2f       	mov	r25, r18
 5f6:	08 95       	ret

000005f8 <__subsf3>:
 5f8:	50 58       	subi	r21, 0x80	; 128

000005fa <__addsf3>:
 5fa:	bb 27       	eor	r27, r27
 5fc:	aa 27       	eor	r26, r26
 5fe:	0e d0       	rcall	.+28     	; 0x61c <__addsf3x>
 600:	e5 c0       	rjmp	.+458    	; 0x7cc <__fp_round>
 602:	d6 d0       	rcall	.+428    	; 0x7b0 <__fp_pscA>
 604:	30 f0       	brcs	.+12     	; 0x612 <__addsf3+0x18>
 606:	db d0       	rcall	.+438    	; 0x7be <__fp_pscB>
 608:	20 f0       	brcs	.+8      	; 0x612 <__addsf3+0x18>
 60a:	31 f4       	brne	.+12     	; 0x618 <__addsf3+0x1e>
 60c:	9f 3f       	cpi	r25, 0xFF	; 255
 60e:	11 f4       	brne	.+4      	; 0x614 <__addsf3+0x1a>
 610:	1e f4       	brtc	.+6      	; 0x618 <__addsf3+0x1e>
 612:	cb c0       	rjmp	.+406    	; 0x7aa <__fp_nan>
 614:	0e f4       	brtc	.+2      	; 0x618 <__addsf3+0x1e>
 616:	e0 95       	com	r30
 618:	e7 fb       	bst	r30, 7
 61a:	c1 c0       	rjmp	.+386    	; 0x79e <__fp_inf>

0000061c <__addsf3x>:
 61c:	e9 2f       	mov	r30, r25
 61e:	e7 d0       	rcall	.+462    	; 0x7ee <__fp_split3>
 620:	80 f3       	brcs	.-32     	; 0x602 <__addsf3+0x8>
 622:	ba 17       	cp	r27, r26
 624:	62 07       	cpc	r22, r18
 626:	73 07       	cpc	r23, r19
 628:	84 07       	cpc	r24, r20
 62a:	95 07       	cpc	r25, r21
 62c:	18 f0       	brcs	.+6      	; 0x634 <__addsf3x+0x18>
 62e:	71 f4       	brne	.+28     	; 0x64c <__addsf3x+0x30>
 630:	9e f5       	brtc	.+102    	; 0x698 <__addsf3x+0x7c>
 632:	ff c0       	rjmp	.+510    	; 0x832 <__fp_zero>
 634:	0e f4       	brtc	.+2      	; 0x638 <__addsf3x+0x1c>
 636:	e0 95       	com	r30
 638:	0b 2e       	mov	r0, r27
 63a:	ba 2f       	mov	r27, r26
 63c:	a0 2d       	mov	r26, r0
 63e:	0b 01       	movw	r0, r22
 640:	b9 01       	movw	r22, r18
 642:	90 01       	movw	r18, r0
 644:	0c 01       	movw	r0, r24
 646:	ca 01       	movw	r24, r20
 648:	a0 01       	movw	r20, r0
 64a:	11 24       	eor	r1, r1
 64c:	ff 27       	eor	r31, r31
 64e:	59 1b       	sub	r21, r25
 650:	99 f0       	breq	.+38     	; 0x678 <__addsf3x+0x5c>
 652:	59 3f       	cpi	r21, 0xF9	; 249
 654:	50 f4       	brcc	.+20     	; 0x66a <__addsf3x+0x4e>
 656:	50 3e       	cpi	r21, 0xE0	; 224
 658:	68 f1       	brcs	.+90     	; 0x6b4 <__addsf3x+0x98>
 65a:	1a 16       	cp	r1, r26
 65c:	f0 40       	sbci	r31, 0x00	; 0
 65e:	a2 2f       	mov	r26, r18
 660:	23 2f       	mov	r18, r19
 662:	34 2f       	mov	r19, r20
 664:	44 27       	eor	r20, r20
 666:	58 5f       	subi	r21, 0xF8	; 248
 668:	f3 cf       	rjmp	.-26     	; 0x650 <__addsf3x+0x34>
 66a:	46 95       	lsr	r20
 66c:	37 95       	ror	r19
 66e:	27 95       	ror	r18
 670:	a7 95       	ror	r26
 672:	f0 40       	sbci	r31, 0x00	; 0
 674:	53 95       	inc	r21
 676:	c9 f7       	brne	.-14     	; 0x66a <__addsf3x+0x4e>
 678:	7e f4       	brtc	.+30     	; 0x698 <__addsf3x+0x7c>
 67a:	1f 16       	cp	r1, r31
 67c:	ba 0b       	sbc	r27, r26
 67e:	62 0b       	sbc	r22, r18
 680:	73 0b       	sbc	r23, r19
 682:	84 0b       	sbc	r24, r20
 684:	ba f0       	brmi	.+46     	; 0x6b4 <__addsf3x+0x98>
 686:	91 50       	subi	r25, 0x01	; 1
 688:	a1 f0       	breq	.+40     	; 0x6b2 <__addsf3x+0x96>
 68a:	ff 0f       	add	r31, r31
 68c:	bb 1f       	adc	r27, r27
 68e:	66 1f       	adc	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	c2 f7       	brpl	.-16     	; 0x686 <__addsf3x+0x6a>
 696:	0e c0       	rjmp	.+28     	; 0x6b4 <__addsf3x+0x98>
 698:	ba 0f       	add	r27, r26
 69a:	62 1f       	adc	r22, r18
 69c:	73 1f       	adc	r23, r19
 69e:	84 1f       	adc	r24, r20
 6a0:	48 f4       	brcc	.+18     	; 0x6b4 <__addsf3x+0x98>
 6a2:	87 95       	ror	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b7 95       	ror	r27
 6aa:	f7 95       	ror	r31
 6ac:	9e 3f       	cpi	r25, 0xFE	; 254
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__addsf3x+0x96>
 6b0:	b3 cf       	rjmp	.-154    	; 0x618 <__addsf3+0x1e>
 6b2:	93 95       	inc	r25
 6b4:	88 0f       	add	r24, r24
 6b6:	08 f0       	brcs	.+2      	; 0x6ba <__addsf3x+0x9e>
 6b8:	99 27       	eor	r25, r25
 6ba:	ee 0f       	add	r30, r30
 6bc:	97 95       	ror	r25
 6be:	87 95       	ror	r24
 6c0:	08 95       	ret

000006c2 <__fixsfsi>:
 6c2:	04 d0       	rcall	.+8      	; 0x6cc <__fixunssfsi>
 6c4:	68 94       	set
 6c6:	b1 11       	cpse	r27, r1
 6c8:	b5 c0       	rjmp	.+362    	; 0x834 <__fp_szero>
 6ca:	08 95       	ret

000006cc <__fixunssfsi>:
 6cc:	98 d0       	rcall	.+304    	; 0x7fe <__fp_splitA>
 6ce:	88 f0       	brcs	.+34     	; 0x6f2 <__fixunssfsi+0x26>
 6d0:	9f 57       	subi	r25, 0x7F	; 127
 6d2:	90 f0       	brcs	.+36     	; 0x6f8 <__fixunssfsi+0x2c>
 6d4:	b9 2f       	mov	r27, r25
 6d6:	99 27       	eor	r25, r25
 6d8:	b7 51       	subi	r27, 0x17	; 23
 6da:	a0 f0       	brcs	.+40     	; 0x704 <__fixunssfsi+0x38>
 6dc:	d1 f0       	breq	.+52     	; 0x712 <__fixunssfsi+0x46>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	1a f0       	brmi	.+6      	; 0x6ee <__fixunssfsi+0x22>
 6e8:	ba 95       	dec	r27
 6ea:	c9 f7       	brne	.-14     	; 0x6de <__fixunssfsi+0x12>
 6ec:	12 c0       	rjmp	.+36     	; 0x712 <__fixunssfsi+0x46>
 6ee:	b1 30       	cpi	r27, 0x01	; 1
 6f0:	81 f0       	breq	.+32     	; 0x712 <__fixunssfsi+0x46>
 6f2:	9f d0       	rcall	.+318    	; 0x832 <__fp_zero>
 6f4:	b1 e0       	ldi	r27, 0x01	; 1
 6f6:	08 95       	ret
 6f8:	9c c0       	rjmp	.+312    	; 0x832 <__fp_zero>
 6fa:	67 2f       	mov	r22, r23
 6fc:	78 2f       	mov	r23, r24
 6fe:	88 27       	eor	r24, r24
 700:	b8 5f       	subi	r27, 0xF8	; 248
 702:	39 f0       	breq	.+14     	; 0x712 <__fixunssfsi+0x46>
 704:	b9 3f       	cpi	r27, 0xF9	; 249
 706:	cc f3       	brlt	.-14     	; 0x6fa <__fixunssfsi+0x2e>
 708:	86 95       	lsr	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b3 95       	inc	r27
 710:	d9 f7       	brne	.-10     	; 0x708 <__fixunssfsi+0x3c>
 712:	3e f4       	brtc	.+14     	; 0x722 <__fixunssfsi+0x56>
 714:	90 95       	com	r25
 716:	80 95       	com	r24
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__floatunsisf>:
 724:	e8 94       	clt
 726:	09 c0       	rjmp	.+18     	; 0x73a <__floatsisf+0x12>

00000728 <__floatsisf>:
 728:	97 fb       	bst	r25, 7
 72a:	3e f4       	brtc	.+14     	; 0x73a <__floatsisf+0x12>
 72c:	90 95       	com	r25
 72e:	80 95       	com	r24
 730:	70 95       	com	r23
 732:	61 95       	neg	r22
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	8f 4f       	sbci	r24, 0xFF	; 255
 738:	9f 4f       	sbci	r25, 0xFF	; 255
 73a:	99 23       	and	r25, r25
 73c:	a9 f0       	breq	.+42     	; 0x768 <__floatsisf+0x40>
 73e:	f9 2f       	mov	r31, r25
 740:	96 e9       	ldi	r25, 0x96	; 150
 742:	bb 27       	eor	r27, r27
 744:	93 95       	inc	r25
 746:	f6 95       	lsr	r31
 748:	87 95       	ror	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f1 11       	cpse	r31, r1
 752:	f8 cf       	rjmp	.-16     	; 0x744 <__floatsisf+0x1c>
 754:	fa f4       	brpl	.+62     	; 0x794 <__floatsisf+0x6c>
 756:	bb 0f       	add	r27, r27
 758:	11 f4       	brne	.+4      	; 0x75e <__floatsisf+0x36>
 75a:	60 ff       	sbrs	r22, 0
 75c:	1b c0       	rjmp	.+54     	; 0x794 <__floatsisf+0x6c>
 75e:	6f 5f       	subi	r22, 0xFF	; 255
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	16 c0       	rjmp	.+44     	; 0x794 <__floatsisf+0x6c>
 768:	88 23       	and	r24, r24
 76a:	11 f0       	breq	.+4      	; 0x770 <__floatsisf+0x48>
 76c:	96 e9       	ldi	r25, 0x96	; 150
 76e:	11 c0       	rjmp	.+34     	; 0x792 <__floatsisf+0x6a>
 770:	77 23       	and	r23, r23
 772:	21 f0       	breq	.+8      	; 0x77c <__floatsisf+0x54>
 774:	9e e8       	ldi	r25, 0x8E	; 142
 776:	87 2f       	mov	r24, r23
 778:	76 2f       	mov	r23, r22
 77a:	05 c0       	rjmp	.+10     	; 0x786 <__floatsisf+0x5e>
 77c:	66 23       	and	r22, r22
 77e:	71 f0       	breq	.+28     	; 0x79c <__floatsisf+0x74>
 780:	96 e8       	ldi	r25, 0x86	; 134
 782:	86 2f       	mov	r24, r22
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	2a f0       	brmi	.+10     	; 0x794 <__floatsisf+0x6c>
 78a:	9a 95       	dec	r25
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	da f7       	brpl	.-10     	; 0x78a <__floatsisf+0x62>
 794:	88 0f       	add	r24, r24
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	97 f9       	bld	r25, 7
 79c:	08 95       	ret

0000079e <__fp_inf>:
 79e:	97 f9       	bld	r25, 7
 7a0:	9f 67       	ori	r25, 0x7F	; 127
 7a2:	80 e8       	ldi	r24, 0x80	; 128
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	08 95       	ret

000007aa <__fp_nan>:
 7aa:	9f ef       	ldi	r25, 0xFF	; 255
 7ac:	80 ec       	ldi	r24, 0xC0	; 192
 7ae:	08 95       	ret

000007b0 <__fp_pscA>:
 7b0:	00 24       	eor	r0, r0
 7b2:	0a 94       	dec	r0
 7b4:	16 16       	cp	r1, r22
 7b6:	17 06       	cpc	r1, r23
 7b8:	18 06       	cpc	r1, r24
 7ba:	09 06       	cpc	r0, r25
 7bc:	08 95       	ret

000007be <__fp_pscB>:
 7be:	00 24       	eor	r0, r0
 7c0:	0a 94       	dec	r0
 7c2:	12 16       	cp	r1, r18
 7c4:	13 06       	cpc	r1, r19
 7c6:	14 06       	cpc	r1, r20
 7c8:	05 06       	cpc	r0, r21
 7ca:	08 95       	ret

000007cc <__fp_round>:
 7cc:	09 2e       	mov	r0, r25
 7ce:	03 94       	inc	r0
 7d0:	00 0c       	add	r0, r0
 7d2:	11 f4       	brne	.+4      	; 0x7d8 <__fp_round+0xc>
 7d4:	88 23       	and	r24, r24
 7d6:	52 f0       	brmi	.+20     	; 0x7ec <__fp_round+0x20>
 7d8:	bb 0f       	add	r27, r27
 7da:	40 f4       	brcc	.+16     	; 0x7ec <__fp_round+0x20>
 7dc:	bf 2b       	or	r27, r31
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__fp_round+0x18>
 7e0:	60 ff       	sbrs	r22, 0
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <__fp_round+0x20>
 7e4:	6f 5f       	subi	r22, 0xFF	; 255
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	08 95       	ret

000007ee <__fp_split3>:
 7ee:	57 fd       	sbrc	r21, 7
 7f0:	90 58       	subi	r25, 0x80	; 128
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	59 f0       	breq	.+22     	; 0x80e <__fp_splitA+0x10>
 7f8:	5f 3f       	cpi	r21, 0xFF	; 255
 7fa:	71 f0       	breq	.+28     	; 0x818 <__fp_splitA+0x1a>
 7fc:	47 95       	ror	r20

000007fe <__fp_splitA>:
 7fe:	88 0f       	add	r24, r24
 800:	97 fb       	bst	r25, 7
 802:	99 1f       	adc	r25, r25
 804:	61 f0       	breq	.+24     	; 0x81e <__fp_splitA+0x20>
 806:	9f 3f       	cpi	r25, 0xFF	; 255
 808:	79 f0       	breq	.+30     	; 0x828 <__fp_splitA+0x2a>
 80a:	87 95       	ror	r24
 80c:	08 95       	ret
 80e:	12 16       	cp	r1, r18
 810:	13 06       	cpc	r1, r19
 812:	14 06       	cpc	r1, r20
 814:	55 1f       	adc	r21, r21
 816:	f2 cf       	rjmp	.-28     	; 0x7fc <__fp_split3+0xe>
 818:	46 95       	lsr	r20
 81a:	f1 df       	rcall	.-30     	; 0x7fe <__fp_splitA>
 81c:	08 c0       	rjmp	.+16     	; 0x82e <__fp_splitA+0x30>
 81e:	16 16       	cp	r1, r22
 820:	17 06       	cpc	r1, r23
 822:	18 06       	cpc	r1, r24
 824:	99 1f       	adc	r25, r25
 826:	f1 cf       	rjmp	.-30     	; 0x80a <__fp_splitA+0xc>
 828:	86 95       	lsr	r24
 82a:	71 05       	cpc	r23, r1
 82c:	61 05       	cpc	r22, r1
 82e:	08 94       	sec
 830:	08 95       	ret

00000832 <__fp_zero>:
 832:	e8 94       	clt

00000834 <__fp_szero>:
 834:	bb 27       	eor	r27, r27
 836:	66 27       	eor	r22, r22
 838:	77 27       	eor	r23, r23
 83a:	cb 01       	movw	r24, r22
 83c:	97 f9       	bld	r25, 7
 83e:	08 95       	ret

00000840 <__mulsf3>:
 840:	0b d0       	rcall	.+22     	; 0x858 <__mulsf3x>
 842:	c4 cf       	rjmp	.-120    	; 0x7cc <__fp_round>
 844:	b5 df       	rcall	.-150    	; 0x7b0 <__fp_pscA>
 846:	28 f0       	brcs	.+10     	; 0x852 <__mulsf3+0x12>
 848:	ba df       	rcall	.-140    	; 0x7be <__fp_pscB>
 84a:	18 f0       	brcs	.+6      	; 0x852 <__mulsf3+0x12>
 84c:	95 23       	and	r25, r21
 84e:	09 f0       	breq	.+2      	; 0x852 <__mulsf3+0x12>
 850:	a6 cf       	rjmp	.-180    	; 0x79e <__fp_inf>
 852:	ab cf       	rjmp	.-170    	; 0x7aa <__fp_nan>
 854:	11 24       	eor	r1, r1
 856:	ee cf       	rjmp	.-36     	; 0x834 <__fp_szero>

00000858 <__mulsf3x>:
 858:	ca df       	rcall	.-108    	; 0x7ee <__fp_split3>
 85a:	a0 f3       	brcs	.-24     	; 0x844 <__mulsf3+0x4>

0000085c <__mulsf3_pse>:
 85c:	95 9f       	mul	r25, r21
 85e:	d1 f3       	breq	.-12     	; 0x854 <__mulsf3+0x14>
 860:	95 0f       	add	r25, r21
 862:	50 e0       	ldi	r21, 0x00	; 0
 864:	55 1f       	adc	r21, r21
 866:	62 9f       	mul	r22, r18
 868:	f0 01       	movw	r30, r0
 86a:	72 9f       	mul	r23, r18
 86c:	bb 27       	eor	r27, r27
 86e:	f0 0d       	add	r31, r0
 870:	b1 1d       	adc	r27, r1
 872:	63 9f       	mul	r22, r19
 874:	aa 27       	eor	r26, r26
 876:	f0 0d       	add	r31, r0
 878:	b1 1d       	adc	r27, r1
 87a:	aa 1f       	adc	r26, r26
 87c:	64 9f       	mul	r22, r20
 87e:	66 27       	eor	r22, r22
 880:	b0 0d       	add	r27, r0
 882:	a1 1d       	adc	r26, r1
 884:	66 1f       	adc	r22, r22
 886:	82 9f       	mul	r24, r18
 888:	22 27       	eor	r18, r18
 88a:	b0 0d       	add	r27, r0
 88c:	a1 1d       	adc	r26, r1
 88e:	62 1f       	adc	r22, r18
 890:	73 9f       	mul	r23, r19
 892:	b0 0d       	add	r27, r0
 894:	a1 1d       	adc	r26, r1
 896:	62 1f       	adc	r22, r18
 898:	83 9f       	mul	r24, r19
 89a:	a0 0d       	add	r26, r0
 89c:	61 1d       	adc	r22, r1
 89e:	22 1f       	adc	r18, r18
 8a0:	74 9f       	mul	r23, r20
 8a2:	33 27       	eor	r19, r19
 8a4:	a0 0d       	add	r26, r0
 8a6:	61 1d       	adc	r22, r1
 8a8:	23 1f       	adc	r18, r19
 8aa:	84 9f       	mul	r24, r20
 8ac:	60 0d       	add	r22, r0
 8ae:	21 1d       	adc	r18, r1
 8b0:	82 2f       	mov	r24, r18
 8b2:	76 2f       	mov	r23, r22
 8b4:	6a 2f       	mov	r22, r26
 8b6:	11 24       	eor	r1, r1
 8b8:	9f 57       	subi	r25, 0x7F	; 127
 8ba:	50 40       	sbci	r21, 0x00	; 0
 8bc:	8a f0       	brmi	.+34     	; 0x8e0 <__mulsf3_pse+0x84>
 8be:	e1 f0       	breq	.+56     	; 0x8f8 <__mulsf3_pse+0x9c>
 8c0:	88 23       	and	r24, r24
 8c2:	4a f0       	brmi	.+18     	; 0x8d6 <__mulsf3_pse+0x7a>
 8c4:	ee 0f       	add	r30, r30
 8c6:	ff 1f       	adc	r31, r31
 8c8:	bb 1f       	adc	r27, r27
 8ca:	66 1f       	adc	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	91 50       	subi	r25, 0x01	; 1
 8d2:	50 40       	sbci	r21, 0x00	; 0
 8d4:	a9 f7       	brne	.-22     	; 0x8c0 <__mulsf3_pse+0x64>
 8d6:	9e 3f       	cpi	r25, 0xFE	; 254
 8d8:	51 05       	cpc	r21, r1
 8da:	70 f0       	brcs	.+28     	; 0x8f8 <__mulsf3_pse+0x9c>
 8dc:	60 cf       	rjmp	.-320    	; 0x79e <__fp_inf>
 8de:	aa cf       	rjmp	.-172    	; 0x834 <__fp_szero>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	ec f3       	brlt	.-6      	; 0x8de <__mulsf3_pse+0x82>
 8e4:	98 3e       	cpi	r25, 0xE8	; 232
 8e6:	dc f3       	brlt	.-10     	; 0x8de <__mulsf3_pse+0x82>
 8e8:	86 95       	lsr	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b7 95       	ror	r27
 8f0:	f7 95       	ror	r31
 8f2:	e7 95       	ror	r30
 8f4:	9f 5f       	subi	r25, 0xFF	; 255
 8f6:	c1 f7       	brne	.-16     	; 0x8e8 <__mulsf3_pse+0x8c>
 8f8:	fe 2b       	or	r31, r30
 8fa:	88 0f       	add	r24, r24
 8fc:	91 1d       	adc	r25, r1
 8fe:	96 95       	lsr	r25
 900:	87 95       	ror	r24
 902:	97 f9       	bld	r25, 7
 904:	08 95       	ret

00000906 <atoi>:
 906:	fc 01       	movw	r30, r24
 908:	88 27       	eor	r24, r24
 90a:	99 27       	eor	r25, r25
 90c:	e8 94       	clt
 90e:	21 91       	ld	r18, Z+
 910:	20 32       	cpi	r18, 0x20	; 32
 912:	e9 f3       	breq	.-6      	; 0x90e <atoi+0x8>
 914:	29 30       	cpi	r18, 0x09	; 9
 916:	10 f0       	brcs	.+4      	; 0x91c <atoi+0x16>
 918:	2e 30       	cpi	r18, 0x0E	; 14
 91a:	c8 f3       	brcs	.-14     	; 0x90e <atoi+0x8>
 91c:	2b 32       	cpi	r18, 0x2B	; 43
 91e:	39 f0       	breq	.+14     	; 0x92e <atoi+0x28>
 920:	2d 32       	cpi	r18, 0x2D	; 45
 922:	31 f4       	brne	.+12     	; 0x930 <atoi+0x2a>
 924:	68 94       	set
 926:	03 c0       	rjmp	.+6      	; 0x92e <atoi+0x28>
 928:	35 d0       	rcall	.+106    	; 0x994 <__mulhi_const_10>
 92a:	82 0f       	add	r24, r18
 92c:	91 1d       	adc	r25, r1
 92e:	21 91       	ld	r18, Z+
 930:	20 53       	subi	r18, 0x30	; 48
 932:	2a 30       	cpi	r18, 0x0A	; 10
 934:	c8 f3       	brcs	.-14     	; 0x928 <atoi+0x22>
 936:	1e f4       	brtc	.+6      	; 0x93e <atoi+0x38>
 938:	90 95       	com	r25
 93a:	81 95       	neg	r24
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	08 95       	ret

00000940 <strtok>:
 940:	42 e1       	ldi	r20, 0x12	; 18
 942:	51 e0       	ldi	r21, 0x01	; 1
 944:	00 c0       	rjmp	.+0      	; 0x946 <strtok_r>

00000946 <strtok_r>:
 946:	fa 01       	movw	r30, r20
 948:	a1 91       	ld	r26, Z+
 94a:	b0 81       	ld	r27, Z
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	19 f4       	brne	.+6      	; 0x956 <strtok_r+0x10>
 950:	10 97       	sbiw	r26, 0x00	; 0
 952:	e1 f0       	breq	.+56     	; 0x98c <strtok_r+0x46>
 954:	cd 01       	movw	r24, r26
 956:	dc 01       	movw	r26, r24
 958:	cd 01       	movw	r24, r26
 95a:	0d 90       	ld	r0, X+
 95c:	00 20       	and	r0, r0
 95e:	11 f4       	brne	.+4      	; 0x964 <strtok_r+0x1e>
 960:	c0 01       	movw	r24, r0
 962:	13 c0       	rjmp	.+38     	; 0x98a <strtok_r+0x44>
 964:	fb 01       	movw	r30, r22
 966:	21 91       	ld	r18, Z+
 968:	22 23       	and	r18, r18
 96a:	19 f0       	breq	.+6      	; 0x972 <strtok_r+0x2c>
 96c:	20 15       	cp	r18, r0
 96e:	d9 f7       	brne	.-10     	; 0x966 <strtok_r+0x20>
 970:	f3 cf       	rjmp	.-26     	; 0x958 <strtok_r+0x12>
 972:	fb 01       	movw	r30, r22
 974:	21 91       	ld	r18, Z+
 976:	20 15       	cp	r18, r0
 978:	19 f4       	brne	.+6      	; 0x980 <strtok_r+0x3a>
 97a:	1e 92       	st	-X, r1
 97c:	11 96       	adiw	r26, 0x01	; 1
 97e:	06 c0       	rjmp	.+12     	; 0x98c <strtok_r+0x46>
 980:	22 23       	and	r18, r18
 982:	c1 f7       	brne	.-16     	; 0x974 <strtok_r+0x2e>
 984:	0d 90       	ld	r0, X+
 986:	00 20       	and	r0, r0
 988:	a1 f7       	brne	.-24     	; 0x972 <strtok_r+0x2c>
 98a:	d0 01       	movw	r26, r0
 98c:	fa 01       	movw	r30, r20
 98e:	a1 93       	st	Z+, r26
 990:	b0 83       	st	Z, r27
 992:	08 95       	ret

00000994 <__mulhi_const_10>:
 994:	7a e0       	ldi	r23, 0x0A	; 10
 996:	97 9f       	mul	r25, r23
 998:	90 2d       	mov	r25, r0
 99a:	87 9f       	mul	r24, r23
 99c:	80 2d       	mov	r24, r0
 99e:	91 0d       	add	r25, r1
 9a0:	11 24       	eor	r1, r1
 9a2:	08 95       	ret

000009a4 <sprintf>:
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	2e 97       	sbiw	r28, 0x0e	; 14
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	0d 89       	ldd	r16, Y+21	; 0x15
 9be:	1e 89       	ldd	r17, Y+22	; 0x16
 9c0:	86 e0       	ldi	r24, 0x06	; 6
 9c2:	8c 83       	std	Y+4, r24	; 0x04
 9c4:	1a 83       	std	Y+2, r17	; 0x02
 9c6:	09 83       	std	Y+1, r16	; 0x01
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	9f e7       	ldi	r25, 0x7F	; 127
 9cc:	9e 83       	std	Y+6, r25	; 0x06
 9ce:	8d 83       	std	Y+5, r24	; 0x05
 9d0:	ae 01       	movw	r20, r28
 9d2:	47 5e       	subi	r20, 0xE7	; 231
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
 9d6:	6f 89       	ldd	r22, Y+23	; 0x17
 9d8:	78 8d       	ldd	r23, Y+24	; 0x18
 9da:	ce 01       	movw	r24, r28
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	10 d0       	rcall	.+32     	; 0xa00 <vfprintf>
 9e0:	ef 81       	ldd	r30, Y+7	; 0x07
 9e2:	f8 85       	ldd	r31, Y+8	; 0x08
 9e4:	e0 0f       	add	r30, r16
 9e6:	f1 1f       	adc	r31, r17
 9e8:	10 82       	st	Z, r1
 9ea:	2e 96       	adiw	r28, 0x0e	; 14
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	de bf       	out	0x3e, r29	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	cd bf       	out	0x3d, r28	; 61
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	08 95       	ret

00000a00 <vfprintf>:
 a00:	2f 92       	push	r2
 a02:	3f 92       	push	r3
 a04:	4f 92       	push	r4
 a06:	5f 92       	push	r5
 a08:	6f 92       	push	r6
 a0a:	7f 92       	push	r7
 a0c:	8f 92       	push	r8
 a0e:	9f 92       	push	r9
 a10:	af 92       	push	r10
 a12:	bf 92       	push	r11
 a14:	cf 92       	push	r12
 a16:	df 92       	push	r13
 a18:	ef 92       	push	r14
 a1a:	ff 92       	push	r15
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	cd b7       	in	r28, 0x3d	; 61
 a26:	de b7       	in	r29, 0x3e	; 62
 a28:	2b 97       	sbiw	r28, 0x0b	; 11
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	f8 94       	cli
 a2e:	de bf       	out	0x3e, r29	; 62
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	cd bf       	out	0x3d, r28	; 61
 a34:	6c 01       	movw	r12, r24
 a36:	7b 01       	movw	r14, r22
 a38:	8a 01       	movw	r16, r20
 a3a:	fc 01       	movw	r30, r24
 a3c:	17 82       	std	Z+7, r1	; 0x07
 a3e:	16 82       	std	Z+6, r1	; 0x06
 a40:	83 81       	ldd	r24, Z+3	; 0x03
 a42:	81 ff       	sbrs	r24, 1
 a44:	bf c1       	rjmp	.+894    	; 0xdc4 <vfprintf+0x3c4>
 a46:	ce 01       	movw	r24, r28
 a48:	01 96       	adiw	r24, 0x01	; 1
 a4a:	3c 01       	movw	r6, r24
 a4c:	f6 01       	movw	r30, r12
 a4e:	93 81       	ldd	r25, Z+3	; 0x03
 a50:	f7 01       	movw	r30, r14
 a52:	93 fd       	sbrc	r25, 3
 a54:	85 91       	lpm	r24, Z+
 a56:	93 ff       	sbrs	r25, 3
 a58:	81 91       	ld	r24, Z+
 a5a:	7f 01       	movw	r14, r30
 a5c:	88 23       	and	r24, r24
 a5e:	09 f4       	brne	.+2      	; 0xa62 <vfprintf+0x62>
 a60:	ad c1       	rjmp	.+858    	; 0xdbc <vfprintf+0x3bc>
 a62:	85 32       	cpi	r24, 0x25	; 37
 a64:	39 f4       	brne	.+14     	; 0xa74 <vfprintf+0x74>
 a66:	93 fd       	sbrc	r25, 3
 a68:	85 91       	lpm	r24, Z+
 a6a:	93 ff       	sbrs	r25, 3
 a6c:	81 91       	ld	r24, Z+
 a6e:	7f 01       	movw	r14, r30
 a70:	85 32       	cpi	r24, 0x25	; 37
 a72:	21 f4       	brne	.+8      	; 0xa7c <vfprintf+0x7c>
 a74:	b6 01       	movw	r22, r12
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	d6 d1       	rcall	.+940    	; 0xe26 <fputc>
 a7a:	e8 cf       	rjmp	.-48     	; 0xa4c <vfprintf+0x4c>
 a7c:	91 2c       	mov	r9, r1
 a7e:	21 2c       	mov	r2, r1
 a80:	31 2c       	mov	r3, r1
 a82:	ff e1       	ldi	r31, 0x1F	; 31
 a84:	f3 15       	cp	r31, r3
 a86:	d8 f0       	brcs	.+54     	; 0xabe <vfprintf+0xbe>
 a88:	8b 32       	cpi	r24, 0x2B	; 43
 a8a:	79 f0       	breq	.+30     	; 0xaaa <vfprintf+0xaa>
 a8c:	38 f4       	brcc	.+14     	; 0xa9c <vfprintf+0x9c>
 a8e:	80 32       	cpi	r24, 0x20	; 32
 a90:	79 f0       	breq	.+30     	; 0xab0 <vfprintf+0xb0>
 a92:	83 32       	cpi	r24, 0x23	; 35
 a94:	a1 f4       	brne	.+40     	; 0xabe <vfprintf+0xbe>
 a96:	23 2d       	mov	r18, r3
 a98:	20 61       	ori	r18, 0x10	; 16
 a9a:	1d c0       	rjmp	.+58     	; 0xad6 <vfprintf+0xd6>
 a9c:	8d 32       	cpi	r24, 0x2D	; 45
 a9e:	61 f0       	breq	.+24     	; 0xab8 <vfprintf+0xb8>
 aa0:	80 33       	cpi	r24, 0x30	; 48
 aa2:	69 f4       	brne	.+26     	; 0xabe <vfprintf+0xbe>
 aa4:	23 2d       	mov	r18, r3
 aa6:	21 60       	ori	r18, 0x01	; 1
 aa8:	16 c0       	rjmp	.+44     	; 0xad6 <vfprintf+0xd6>
 aaa:	83 2d       	mov	r24, r3
 aac:	82 60       	ori	r24, 0x02	; 2
 aae:	38 2e       	mov	r3, r24
 ab0:	e3 2d       	mov	r30, r3
 ab2:	e4 60       	ori	r30, 0x04	; 4
 ab4:	3e 2e       	mov	r3, r30
 ab6:	2a c0       	rjmp	.+84     	; 0xb0c <vfprintf+0x10c>
 ab8:	f3 2d       	mov	r31, r3
 aba:	f8 60       	ori	r31, 0x08	; 8
 abc:	1d c0       	rjmp	.+58     	; 0xaf8 <vfprintf+0xf8>
 abe:	37 fc       	sbrc	r3, 7
 ac0:	2d c0       	rjmp	.+90     	; 0xb1c <vfprintf+0x11c>
 ac2:	20 ed       	ldi	r18, 0xD0	; 208
 ac4:	28 0f       	add	r18, r24
 ac6:	2a 30       	cpi	r18, 0x0A	; 10
 ac8:	40 f0       	brcs	.+16     	; 0xada <vfprintf+0xda>
 aca:	8e 32       	cpi	r24, 0x2E	; 46
 acc:	b9 f4       	brne	.+46     	; 0xafc <vfprintf+0xfc>
 ace:	36 fc       	sbrc	r3, 6
 ad0:	75 c1       	rjmp	.+746    	; 0xdbc <vfprintf+0x3bc>
 ad2:	23 2d       	mov	r18, r3
 ad4:	20 64       	ori	r18, 0x40	; 64
 ad6:	32 2e       	mov	r3, r18
 ad8:	19 c0       	rjmp	.+50     	; 0xb0c <vfprintf+0x10c>
 ada:	36 fe       	sbrs	r3, 6
 adc:	06 c0       	rjmp	.+12     	; 0xaea <vfprintf+0xea>
 ade:	8a e0       	ldi	r24, 0x0A	; 10
 ae0:	98 9e       	mul	r9, r24
 ae2:	20 0d       	add	r18, r0
 ae4:	11 24       	eor	r1, r1
 ae6:	92 2e       	mov	r9, r18
 ae8:	11 c0       	rjmp	.+34     	; 0xb0c <vfprintf+0x10c>
 aea:	ea e0       	ldi	r30, 0x0A	; 10
 aec:	2e 9e       	mul	r2, r30
 aee:	20 0d       	add	r18, r0
 af0:	11 24       	eor	r1, r1
 af2:	22 2e       	mov	r2, r18
 af4:	f3 2d       	mov	r31, r3
 af6:	f0 62       	ori	r31, 0x20	; 32
 af8:	3f 2e       	mov	r3, r31
 afa:	08 c0       	rjmp	.+16     	; 0xb0c <vfprintf+0x10c>
 afc:	8c 36       	cpi	r24, 0x6C	; 108
 afe:	21 f4       	brne	.+8      	; 0xb08 <vfprintf+0x108>
 b00:	83 2d       	mov	r24, r3
 b02:	80 68       	ori	r24, 0x80	; 128
 b04:	38 2e       	mov	r3, r24
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <vfprintf+0x10c>
 b08:	88 36       	cpi	r24, 0x68	; 104
 b0a:	41 f4       	brne	.+16     	; 0xb1c <vfprintf+0x11c>
 b0c:	f7 01       	movw	r30, r14
 b0e:	93 fd       	sbrc	r25, 3
 b10:	85 91       	lpm	r24, Z+
 b12:	93 ff       	sbrs	r25, 3
 b14:	81 91       	ld	r24, Z+
 b16:	7f 01       	movw	r14, r30
 b18:	81 11       	cpse	r24, r1
 b1a:	b3 cf       	rjmp	.-154    	; 0xa82 <vfprintf+0x82>
 b1c:	98 2f       	mov	r25, r24
 b1e:	9f 7d       	andi	r25, 0xDF	; 223
 b20:	95 54       	subi	r25, 0x45	; 69
 b22:	93 30       	cpi	r25, 0x03	; 3
 b24:	28 f4       	brcc	.+10     	; 0xb30 <vfprintf+0x130>
 b26:	0c 5f       	subi	r16, 0xFC	; 252
 b28:	1f 4f       	sbci	r17, 0xFF	; 255
 b2a:	9f e3       	ldi	r25, 0x3F	; 63
 b2c:	99 83       	std	Y+1, r25	; 0x01
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <vfprintf+0x14a>
 b30:	83 36       	cpi	r24, 0x63	; 99
 b32:	31 f0       	breq	.+12     	; 0xb40 <vfprintf+0x140>
 b34:	83 37       	cpi	r24, 0x73	; 115
 b36:	71 f0       	breq	.+28     	; 0xb54 <vfprintf+0x154>
 b38:	83 35       	cpi	r24, 0x53	; 83
 b3a:	09 f0       	breq	.+2      	; 0xb3e <vfprintf+0x13e>
 b3c:	55 c0       	rjmp	.+170    	; 0xbe8 <vfprintf+0x1e8>
 b3e:	20 c0       	rjmp	.+64     	; 0xb80 <vfprintf+0x180>
 b40:	f8 01       	movw	r30, r16
 b42:	80 81       	ld	r24, Z
 b44:	89 83       	std	Y+1, r24	; 0x01
 b46:	0e 5f       	subi	r16, 0xFE	; 254
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	88 24       	eor	r8, r8
 b4c:	83 94       	inc	r8
 b4e:	91 2c       	mov	r9, r1
 b50:	53 01       	movw	r10, r6
 b52:	12 c0       	rjmp	.+36     	; 0xb78 <vfprintf+0x178>
 b54:	28 01       	movw	r4, r16
 b56:	f2 e0       	ldi	r31, 0x02	; 2
 b58:	4f 0e       	add	r4, r31
 b5a:	51 1c       	adc	r5, r1
 b5c:	f8 01       	movw	r30, r16
 b5e:	a0 80       	ld	r10, Z
 b60:	b1 80       	ldd	r11, Z+1	; 0x01
 b62:	36 fe       	sbrs	r3, 6
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <vfprintf+0x16c>
 b66:	69 2d       	mov	r22, r9
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <vfprintf+0x170>
 b6c:	6f ef       	ldi	r22, 0xFF	; 255
 b6e:	7f ef       	ldi	r23, 0xFF	; 255
 b70:	c5 01       	movw	r24, r10
 b72:	4e d1       	rcall	.+668    	; 0xe10 <strnlen>
 b74:	4c 01       	movw	r8, r24
 b76:	82 01       	movw	r16, r4
 b78:	f3 2d       	mov	r31, r3
 b7a:	ff 77       	andi	r31, 0x7F	; 127
 b7c:	3f 2e       	mov	r3, r31
 b7e:	15 c0       	rjmp	.+42     	; 0xbaa <vfprintf+0x1aa>
 b80:	28 01       	movw	r4, r16
 b82:	22 e0       	ldi	r18, 0x02	; 2
 b84:	42 0e       	add	r4, r18
 b86:	51 1c       	adc	r5, r1
 b88:	f8 01       	movw	r30, r16
 b8a:	a0 80       	ld	r10, Z
 b8c:	b1 80       	ldd	r11, Z+1	; 0x01
 b8e:	36 fe       	sbrs	r3, 6
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <vfprintf+0x198>
 b92:	69 2d       	mov	r22, r9
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x19c>
 b98:	6f ef       	ldi	r22, 0xFF	; 255
 b9a:	7f ef       	ldi	r23, 0xFF	; 255
 b9c:	c5 01       	movw	r24, r10
 b9e:	2d d1       	rcall	.+602    	; 0xdfa <strnlen_P>
 ba0:	4c 01       	movw	r8, r24
 ba2:	f3 2d       	mov	r31, r3
 ba4:	f0 68       	ori	r31, 0x80	; 128
 ba6:	3f 2e       	mov	r3, r31
 ba8:	82 01       	movw	r16, r4
 baa:	33 fc       	sbrc	r3, 3
 bac:	19 c0       	rjmp	.+50     	; 0xbe0 <vfprintf+0x1e0>
 bae:	82 2d       	mov	r24, r2
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	88 16       	cp	r8, r24
 bb4:	99 06       	cpc	r9, r25
 bb6:	a0 f4       	brcc	.+40     	; 0xbe0 <vfprintf+0x1e0>
 bb8:	b6 01       	movw	r22, r12
 bba:	80 e2       	ldi	r24, 0x20	; 32
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	33 d1       	rcall	.+614    	; 0xe26 <fputc>
 bc0:	2a 94       	dec	r2
 bc2:	f5 cf       	rjmp	.-22     	; 0xbae <vfprintf+0x1ae>
 bc4:	f5 01       	movw	r30, r10
 bc6:	37 fc       	sbrc	r3, 7
 bc8:	85 91       	lpm	r24, Z+
 bca:	37 fe       	sbrs	r3, 7
 bcc:	81 91       	ld	r24, Z+
 bce:	5f 01       	movw	r10, r30
 bd0:	b6 01       	movw	r22, r12
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	28 d1       	rcall	.+592    	; 0xe26 <fputc>
 bd6:	21 10       	cpse	r2, r1
 bd8:	2a 94       	dec	r2
 bda:	21 e0       	ldi	r18, 0x01	; 1
 bdc:	82 1a       	sub	r8, r18
 bde:	91 08       	sbc	r9, r1
 be0:	81 14       	cp	r8, r1
 be2:	91 04       	cpc	r9, r1
 be4:	79 f7       	brne	.-34     	; 0xbc4 <vfprintf+0x1c4>
 be6:	e1 c0       	rjmp	.+450    	; 0xdaa <vfprintf+0x3aa>
 be8:	84 36       	cpi	r24, 0x64	; 100
 bea:	11 f0       	breq	.+4      	; 0xbf0 <vfprintf+0x1f0>
 bec:	89 36       	cpi	r24, 0x69	; 105
 bee:	39 f5       	brne	.+78     	; 0xc3e <vfprintf+0x23e>
 bf0:	f8 01       	movw	r30, r16
 bf2:	37 fe       	sbrs	r3, 7
 bf4:	07 c0       	rjmp	.+14     	; 0xc04 <vfprintf+0x204>
 bf6:	60 81       	ld	r22, Z
 bf8:	71 81       	ldd	r23, Z+1	; 0x01
 bfa:	82 81       	ldd	r24, Z+2	; 0x02
 bfc:	93 81       	ldd	r25, Z+3	; 0x03
 bfe:	0c 5f       	subi	r16, 0xFC	; 252
 c00:	1f 4f       	sbci	r17, 0xFF	; 255
 c02:	08 c0       	rjmp	.+16     	; 0xc14 <vfprintf+0x214>
 c04:	60 81       	ld	r22, Z
 c06:	71 81       	ldd	r23, Z+1	; 0x01
 c08:	07 2e       	mov	r0, r23
 c0a:	00 0c       	add	r0, r0
 c0c:	88 0b       	sbc	r24, r24
 c0e:	99 0b       	sbc	r25, r25
 c10:	0e 5f       	subi	r16, 0xFE	; 254
 c12:	1f 4f       	sbci	r17, 0xFF	; 255
 c14:	f3 2d       	mov	r31, r3
 c16:	ff 76       	andi	r31, 0x6F	; 111
 c18:	3f 2e       	mov	r3, r31
 c1a:	97 ff       	sbrs	r25, 7
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <vfprintf+0x230>
 c1e:	90 95       	com	r25
 c20:	80 95       	com	r24
 c22:	70 95       	com	r23
 c24:	61 95       	neg	r22
 c26:	7f 4f       	sbci	r23, 0xFF	; 255
 c28:	8f 4f       	sbci	r24, 0xFF	; 255
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	f0 68       	ori	r31, 0x80	; 128
 c2e:	3f 2e       	mov	r3, r31
 c30:	2a e0       	ldi	r18, 0x0A	; 10
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	a3 01       	movw	r20, r6
 c36:	33 d1       	rcall	.+614    	; 0xe9e <__ultoa_invert>
 c38:	88 2e       	mov	r8, r24
 c3a:	86 18       	sub	r8, r6
 c3c:	44 c0       	rjmp	.+136    	; 0xcc6 <vfprintf+0x2c6>
 c3e:	85 37       	cpi	r24, 0x75	; 117
 c40:	31 f4       	brne	.+12     	; 0xc4e <vfprintf+0x24e>
 c42:	23 2d       	mov	r18, r3
 c44:	2f 7e       	andi	r18, 0xEF	; 239
 c46:	b2 2e       	mov	r11, r18
 c48:	2a e0       	ldi	r18, 0x0A	; 10
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	25 c0       	rjmp	.+74     	; 0xc98 <vfprintf+0x298>
 c4e:	93 2d       	mov	r25, r3
 c50:	99 7f       	andi	r25, 0xF9	; 249
 c52:	b9 2e       	mov	r11, r25
 c54:	8f 36       	cpi	r24, 0x6F	; 111
 c56:	c1 f0       	breq	.+48     	; 0xc88 <vfprintf+0x288>
 c58:	18 f4       	brcc	.+6      	; 0xc60 <vfprintf+0x260>
 c5a:	88 35       	cpi	r24, 0x58	; 88
 c5c:	79 f0       	breq	.+30     	; 0xc7c <vfprintf+0x27c>
 c5e:	ae c0       	rjmp	.+348    	; 0xdbc <vfprintf+0x3bc>
 c60:	80 37       	cpi	r24, 0x70	; 112
 c62:	19 f0       	breq	.+6      	; 0xc6a <vfprintf+0x26a>
 c64:	88 37       	cpi	r24, 0x78	; 120
 c66:	21 f0       	breq	.+8      	; 0xc70 <vfprintf+0x270>
 c68:	a9 c0       	rjmp	.+338    	; 0xdbc <vfprintf+0x3bc>
 c6a:	e9 2f       	mov	r30, r25
 c6c:	e0 61       	ori	r30, 0x10	; 16
 c6e:	be 2e       	mov	r11, r30
 c70:	b4 fe       	sbrs	r11, 4
 c72:	0d c0       	rjmp	.+26     	; 0xc8e <vfprintf+0x28e>
 c74:	fb 2d       	mov	r31, r11
 c76:	f4 60       	ori	r31, 0x04	; 4
 c78:	bf 2e       	mov	r11, r31
 c7a:	09 c0       	rjmp	.+18     	; 0xc8e <vfprintf+0x28e>
 c7c:	34 fe       	sbrs	r3, 4
 c7e:	0a c0       	rjmp	.+20     	; 0xc94 <vfprintf+0x294>
 c80:	29 2f       	mov	r18, r25
 c82:	26 60       	ori	r18, 0x06	; 6
 c84:	b2 2e       	mov	r11, r18
 c86:	06 c0       	rjmp	.+12     	; 0xc94 <vfprintf+0x294>
 c88:	28 e0       	ldi	r18, 0x08	; 8
 c8a:	30 e0       	ldi	r19, 0x00	; 0
 c8c:	05 c0       	rjmp	.+10     	; 0xc98 <vfprintf+0x298>
 c8e:	20 e1       	ldi	r18, 0x10	; 16
 c90:	30 e0       	ldi	r19, 0x00	; 0
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <vfprintf+0x298>
 c94:	20 e1       	ldi	r18, 0x10	; 16
 c96:	32 e0       	ldi	r19, 0x02	; 2
 c98:	f8 01       	movw	r30, r16
 c9a:	b7 fe       	sbrs	r11, 7
 c9c:	07 c0       	rjmp	.+14     	; 0xcac <vfprintf+0x2ac>
 c9e:	60 81       	ld	r22, Z
 ca0:	71 81       	ldd	r23, Z+1	; 0x01
 ca2:	82 81       	ldd	r24, Z+2	; 0x02
 ca4:	93 81       	ldd	r25, Z+3	; 0x03
 ca6:	0c 5f       	subi	r16, 0xFC	; 252
 ca8:	1f 4f       	sbci	r17, 0xFF	; 255
 caa:	06 c0       	rjmp	.+12     	; 0xcb8 <vfprintf+0x2b8>
 cac:	60 81       	ld	r22, Z
 cae:	71 81       	ldd	r23, Z+1	; 0x01
 cb0:	80 e0       	ldi	r24, 0x00	; 0
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	0e 5f       	subi	r16, 0xFE	; 254
 cb6:	1f 4f       	sbci	r17, 0xFF	; 255
 cb8:	a3 01       	movw	r20, r6
 cba:	f1 d0       	rcall	.+482    	; 0xe9e <__ultoa_invert>
 cbc:	88 2e       	mov	r8, r24
 cbe:	86 18       	sub	r8, r6
 cc0:	fb 2d       	mov	r31, r11
 cc2:	ff 77       	andi	r31, 0x7F	; 127
 cc4:	3f 2e       	mov	r3, r31
 cc6:	36 fe       	sbrs	r3, 6
 cc8:	0d c0       	rjmp	.+26     	; 0xce4 <vfprintf+0x2e4>
 cca:	23 2d       	mov	r18, r3
 ccc:	2e 7f       	andi	r18, 0xFE	; 254
 cce:	a2 2e       	mov	r10, r18
 cd0:	89 14       	cp	r8, r9
 cd2:	58 f4       	brcc	.+22     	; 0xcea <vfprintf+0x2ea>
 cd4:	34 fe       	sbrs	r3, 4
 cd6:	0b c0       	rjmp	.+22     	; 0xcee <vfprintf+0x2ee>
 cd8:	32 fc       	sbrc	r3, 2
 cda:	09 c0       	rjmp	.+18     	; 0xcee <vfprintf+0x2ee>
 cdc:	83 2d       	mov	r24, r3
 cde:	8e 7e       	andi	r24, 0xEE	; 238
 ce0:	a8 2e       	mov	r10, r24
 ce2:	05 c0       	rjmp	.+10     	; 0xcee <vfprintf+0x2ee>
 ce4:	b8 2c       	mov	r11, r8
 ce6:	a3 2c       	mov	r10, r3
 ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <vfprintf+0x2f0>
 cea:	b8 2c       	mov	r11, r8
 cec:	01 c0       	rjmp	.+2      	; 0xcf0 <vfprintf+0x2f0>
 cee:	b9 2c       	mov	r11, r9
 cf0:	a4 fe       	sbrs	r10, 4
 cf2:	0f c0       	rjmp	.+30     	; 0xd12 <vfprintf+0x312>
 cf4:	fe 01       	movw	r30, r28
 cf6:	e8 0d       	add	r30, r8
 cf8:	f1 1d       	adc	r31, r1
 cfa:	80 81       	ld	r24, Z
 cfc:	80 33       	cpi	r24, 0x30	; 48
 cfe:	21 f4       	brne	.+8      	; 0xd08 <vfprintf+0x308>
 d00:	9a 2d       	mov	r25, r10
 d02:	99 7e       	andi	r25, 0xE9	; 233
 d04:	a9 2e       	mov	r10, r25
 d06:	09 c0       	rjmp	.+18     	; 0xd1a <vfprintf+0x31a>
 d08:	a2 fe       	sbrs	r10, 2
 d0a:	06 c0       	rjmp	.+12     	; 0xd18 <vfprintf+0x318>
 d0c:	b3 94       	inc	r11
 d0e:	b3 94       	inc	r11
 d10:	04 c0       	rjmp	.+8      	; 0xd1a <vfprintf+0x31a>
 d12:	8a 2d       	mov	r24, r10
 d14:	86 78       	andi	r24, 0x86	; 134
 d16:	09 f0       	breq	.+2      	; 0xd1a <vfprintf+0x31a>
 d18:	b3 94       	inc	r11
 d1a:	a3 fc       	sbrc	r10, 3
 d1c:	10 c0       	rjmp	.+32     	; 0xd3e <vfprintf+0x33e>
 d1e:	a0 fe       	sbrs	r10, 0
 d20:	06 c0       	rjmp	.+12     	; 0xd2e <vfprintf+0x32e>
 d22:	b2 14       	cp	r11, r2
 d24:	80 f4       	brcc	.+32     	; 0xd46 <vfprintf+0x346>
 d26:	28 0c       	add	r2, r8
 d28:	92 2c       	mov	r9, r2
 d2a:	9b 18       	sub	r9, r11
 d2c:	0d c0       	rjmp	.+26     	; 0xd48 <vfprintf+0x348>
 d2e:	b2 14       	cp	r11, r2
 d30:	58 f4       	brcc	.+22     	; 0xd48 <vfprintf+0x348>
 d32:	b6 01       	movw	r22, r12
 d34:	80 e2       	ldi	r24, 0x20	; 32
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	76 d0       	rcall	.+236    	; 0xe26 <fputc>
 d3a:	b3 94       	inc	r11
 d3c:	f8 cf       	rjmp	.-16     	; 0xd2e <vfprintf+0x32e>
 d3e:	b2 14       	cp	r11, r2
 d40:	18 f4       	brcc	.+6      	; 0xd48 <vfprintf+0x348>
 d42:	2b 18       	sub	r2, r11
 d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x34a>
 d46:	98 2c       	mov	r9, r8
 d48:	21 2c       	mov	r2, r1
 d4a:	a4 fe       	sbrs	r10, 4
 d4c:	0f c0       	rjmp	.+30     	; 0xd6c <vfprintf+0x36c>
 d4e:	b6 01       	movw	r22, r12
 d50:	80 e3       	ldi	r24, 0x30	; 48
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	68 d0       	rcall	.+208    	; 0xe26 <fputc>
 d56:	a2 fe       	sbrs	r10, 2
 d58:	16 c0       	rjmp	.+44     	; 0xd86 <vfprintf+0x386>
 d5a:	a1 fc       	sbrc	r10, 1
 d5c:	03 c0       	rjmp	.+6      	; 0xd64 <vfprintf+0x364>
 d5e:	88 e7       	ldi	r24, 0x78	; 120
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	02 c0       	rjmp	.+4      	; 0xd68 <vfprintf+0x368>
 d64:	88 e5       	ldi	r24, 0x58	; 88
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	b6 01       	movw	r22, r12
 d6a:	0c c0       	rjmp	.+24     	; 0xd84 <vfprintf+0x384>
 d6c:	8a 2d       	mov	r24, r10
 d6e:	86 78       	andi	r24, 0x86	; 134
 d70:	51 f0       	breq	.+20     	; 0xd86 <vfprintf+0x386>
 d72:	a1 fe       	sbrs	r10, 1
 d74:	02 c0       	rjmp	.+4      	; 0xd7a <vfprintf+0x37a>
 d76:	8b e2       	ldi	r24, 0x2B	; 43
 d78:	01 c0       	rjmp	.+2      	; 0xd7c <vfprintf+0x37c>
 d7a:	80 e2       	ldi	r24, 0x20	; 32
 d7c:	a7 fc       	sbrc	r10, 7
 d7e:	8d e2       	ldi	r24, 0x2D	; 45
 d80:	b6 01       	movw	r22, r12
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	50 d0       	rcall	.+160    	; 0xe26 <fputc>
 d86:	89 14       	cp	r8, r9
 d88:	30 f4       	brcc	.+12     	; 0xd96 <vfprintf+0x396>
 d8a:	b6 01       	movw	r22, r12
 d8c:	80 e3       	ldi	r24, 0x30	; 48
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	4a d0       	rcall	.+148    	; 0xe26 <fputc>
 d92:	9a 94       	dec	r9
 d94:	f8 cf       	rjmp	.-16     	; 0xd86 <vfprintf+0x386>
 d96:	8a 94       	dec	r8
 d98:	f3 01       	movw	r30, r6
 d9a:	e8 0d       	add	r30, r8
 d9c:	f1 1d       	adc	r31, r1
 d9e:	80 81       	ld	r24, Z
 da0:	b6 01       	movw	r22, r12
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	40 d0       	rcall	.+128    	; 0xe26 <fputc>
 da6:	81 10       	cpse	r8, r1
 da8:	f6 cf       	rjmp	.-20     	; 0xd96 <vfprintf+0x396>
 daa:	22 20       	and	r2, r2
 dac:	09 f4       	brne	.+2      	; 0xdb0 <vfprintf+0x3b0>
 dae:	4e ce       	rjmp	.-868    	; 0xa4c <vfprintf+0x4c>
 db0:	b6 01       	movw	r22, r12
 db2:	80 e2       	ldi	r24, 0x20	; 32
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	37 d0       	rcall	.+110    	; 0xe26 <fputc>
 db8:	2a 94       	dec	r2
 dba:	f7 cf       	rjmp	.-18     	; 0xdaa <vfprintf+0x3aa>
 dbc:	f6 01       	movw	r30, r12
 dbe:	86 81       	ldd	r24, Z+6	; 0x06
 dc0:	97 81       	ldd	r25, Z+7	; 0x07
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x3c8>
 dc4:	8f ef       	ldi	r24, 0xFF	; 255
 dc6:	9f ef       	ldi	r25, 0xFF	; 255
 dc8:	2b 96       	adiw	r28, 0x0b	; 11
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	de bf       	out	0x3e, r29	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	cd bf       	out	0x3d, r28	; 61
 dd4:	df 91       	pop	r29
 dd6:	cf 91       	pop	r28
 dd8:	1f 91       	pop	r17
 dda:	0f 91       	pop	r16
 ddc:	ff 90       	pop	r15
 dde:	ef 90       	pop	r14
 de0:	df 90       	pop	r13
 de2:	cf 90       	pop	r12
 de4:	bf 90       	pop	r11
 de6:	af 90       	pop	r10
 de8:	9f 90       	pop	r9
 dea:	8f 90       	pop	r8
 dec:	7f 90       	pop	r7
 dee:	6f 90       	pop	r6
 df0:	5f 90       	pop	r5
 df2:	4f 90       	pop	r4
 df4:	3f 90       	pop	r3
 df6:	2f 90       	pop	r2
 df8:	08 95       	ret

00000dfa <strnlen_P>:
 dfa:	fc 01       	movw	r30, r24
 dfc:	05 90       	lpm	r0, Z+
 dfe:	61 50       	subi	r22, 0x01	; 1
 e00:	70 40       	sbci	r23, 0x00	; 0
 e02:	01 10       	cpse	r0, r1
 e04:	d8 f7       	brcc	.-10     	; 0xdfc <strnlen_P+0x2>
 e06:	80 95       	com	r24
 e08:	90 95       	com	r25
 e0a:	8e 0f       	add	r24, r30
 e0c:	9f 1f       	adc	r25, r31
 e0e:	08 95       	ret

00000e10 <strnlen>:
 e10:	fc 01       	movw	r30, r24
 e12:	61 50       	subi	r22, 0x01	; 1
 e14:	70 40       	sbci	r23, 0x00	; 0
 e16:	01 90       	ld	r0, Z+
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <fputc>:
 e26:	0f 93       	push	r16
 e28:	1f 93       	push	r17
 e2a:	cf 93       	push	r28
 e2c:	df 93       	push	r29
 e2e:	fb 01       	movw	r30, r22
 e30:	23 81       	ldd	r18, Z+3	; 0x03
 e32:	21 fd       	sbrc	r18, 1
 e34:	03 c0       	rjmp	.+6      	; 0xe3c <fputc+0x16>
 e36:	8f ef       	ldi	r24, 0xFF	; 255
 e38:	9f ef       	ldi	r25, 0xFF	; 255
 e3a:	2c c0       	rjmp	.+88     	; 0xe94 <fputc+0x6e>
 e3c:	22 ff       	sbrs	r18, 2
 e3e:	16 c0       	rjmp	.+44     	; 0xe6c <fputc+0x46>
 e40:	46 81       	ldd	r20, Z+6	; 0x06
 e42:	57 81       	ldd	r21, Z+7	; 0x07
 e44:	24 81       	ldd	r18, Z+4	; 0x04
 e46:	35 81       	ldd	r19, Z+5	; 0x05
 e48:	42 17       	cp	r20, r18
 e4a:	53 07       	cpc	r21, r19
 e4c:	44 f4       	brge	.+16     	; 0xe5e <fputc+0x38>
 e4e:	a0 81       	ld	r26, Z
 e50:	b1 81       	ldd	r27, Z+1	; 0x01
 e52:	9d 01       	movw	r18, r26
 e54:	2f 5f       	subi	r18, 0xFF	; 255
 e56:	3f 4f       	sbci	r19, 0xFF	; 255
 e58:	31 83       	std	Z+1, r19	; 0x01
 e5a:	20 83       	st	Z, r18
 e5c:	8c 93       	st	X, r24
 e5e:	26 81       	ldd	r18, Z+6	; 0x06
 e60:	37 81       	ldd	r19, Z+7	; 0x07
 e62:	2f 5f       	subi	r18, 0xFF	; 255
 e64:	3f 4f       	sbci	r19, 0xFF	; 255
 e66:	37 83       	std	Z+7, r19	; 0x07
 e68:	26 83       	std	Z+6, r18	; 0x06
 e6a:	14 c0       	rjmp	.+40     	; 0xe94 <fputc+0x6e>
 e6c:	8b 01       	movw	r16, r22
 e6e:	ec 01       	movw	r28, r24
 e70:	fb 01       	movw	r30, r22
 e72:	00 84       	ldd	r0, Z+8	; 0x08
 e74:	f1 85       	ldd	r31, Z+9	; 0x09
 e76:	e0 2d       	mov	r30, r0
 e78:	09 95       	icall
 e7a:	89 2b       	or	r24, r25
 e7c:	e1 f6       	brne	.-72     	; 0xe36 <fputc+0x10>
 e7e:	d8 01       	movw	r26, r16
 e80:	16 96       	adiw	r26, 0x06	; 6
 e82:	8d 91       	ld	r24, X+
 e84:	9c 91       	ld	r25, X
 e86:	17 97       	sbiw	r26, 0x07	; 7
 e88:	01 96       	adiw	r24, 0x01	; 1
 e8a:	17 96       	adiw	r26, 0x07	; 7
 e8c:	9c 93       	st	X, r25
 e8e:	8e 93       	st	-X, r24
 e90:	16 97       	sbiw	r26, 0x06	; 6
 e92:	ce 01       	movw	r24, r28
 e94:	df 91       	pop	r29
 e96:	cf 91       	pop	r28
 e98:	1f 91       	pop	r17
 e9a:	0f 91       	pop	r16
 e9c:	08 95       	ret

00000e9e <__ultoa_invert>:
 e9e:	fa 01       	movw	r30, r20
 ea0:	aa 27       	eor	r26, r26
 ea2:	28 30       	cpi	r18, 0x08	; 8
 ea4:	51 f1       	breq	.+84     	; 0xefa <__ultoa_invert+0x5c>
 ea6:	20 31       	cpi	r18, 0x10	; 16
 ea8:	81 f1       	breq	.+96     	; 0xf0a <__ultoa_invert+0x6c>
 eaa:	e8 94       	clt
 eac:	6f 93       	push	r22
 eae:	6e 7f       	andi	r22, 0xFE	; 254
 eb0:	6e 5f       	subi	r22, 0xFE	; 254
 eb2:	7f 4f       	sbci	r23, 0xFF	; 255
 eb4:	8f 4f       	sbci	r24, 0xFF	; 255
 eb6:	9f 4f       	sbci	r25, 0xFF	; 255
 eb8:	af 4f       	sbci	r26, 0xFF	; 255
 eba:	b1 e0       	ldi	r27, 0x01	; 1
 ebc:	3e d0       	rcall	.+124    	; 0xf3a <__ultoa_invert+0x9c>
 ebe:	b4 e0       	ldi	r27, 0x04	; 4
 ec0:	3c d0       	rcall	.+120    	; 0xf3a <__ultoa_invert+0x9c>
 ec2:	67 0f       	add	r22, r23
 ec4:	78 1f       	adc	r23, r24
 ec6:	89 1f       	adc	r24, r25
 ec8:	9a 1f       	adc	r25, r26
 eca:	a1 1d       	adc	r26, r1
 ecc:	68 0f       	add	r22, r24
 ece:	79 1f       	adc	r23, r25
 ed0:	8a 1f       	adc	r24, r26
 ed2:	91 1d       	adc	r25, r1
 ed4:	a1 1d       	adc	r26, r1
 ed6:	6a 0f       	add	r22, r26
 ed8:	71 1d       	adc	r23, r1
 eda:	81 1d       	adc	r24, r1
 edc:	91 1d       	adc	r25, r1
 ede:	a1 1d       	adc	r26, r1
 ee0:	20 d0       	rcall	.+64     	; 0xf22 <__ultoa_invert+0x84>
 ee2:	09 f4       	brne	.+2      	; 0xee6 <__ultoa_invert+0x48>
 ee4:	68 94       	set
 ee6:	3f 91       	pop	r19
 ee8:	2a e0       	ldi	r18, 0x0A	; 10
 eea:	26 9f       	mul	r18, r22
 eec:	11 24       	eor	r1, r1
 eee:	30 19       	sub	r19, r0
 ef0:	30 5d       	subi	r19, 0xD0	; 208
 ef2:	31 93       	st	Z+, r19
 ef4:	de f6       	brtc	.-74     	; 0xeac <__ultoa_invert+0xe>
 ef6:	cf 01       	movw	r24, r30
 ef8:	08 95       	ret
 efa:	46 2f       	mov	r20, r22
 efc:	47 70       	andi	r20, 0x07	; 7
 efe:	40 5d       	subi	r20, 0xD0	; 208
 f00:	41 93       	st	Z+, r20
 f02:	b3 e0       	ldi	r27, 0x03	; 3
 f04:	0f d0       	rcall	.+30     	; 0xf24 <__ultoa_invert+0x86>
 f06:	c9 f7       	brne	.-14     	; 0xefa <__ultoa_invert+0x5c>
 f08:	f6 cf       	rjmp	.-20     	; 0xef6 <__ultoa_invert+0x58>
 f0a:	46 2f       	mov	r20, r22
 f0c:	4f 70       	andi	r20, 0x0F	; 15
 f0e:	40 5d       	subi	r20, 0xD0	; 208
 f10:	4a 33       	cpi	r20, 0x3A	; 58
 f12:	18 f0       	brcs	.+6      	; 0xf1a <__ultoa_invert+0x7c>
 f14:	49 5d       	subi	r20, 0xD9	; 217
 f16:	31 fd       	sbrc	r19, 1
 f18:	40 52       	subi	r20, 0x20	; 32
 f1a:	41 93       	st	Z+, r20
 f1c:	02 d0       	rcall	.+4      	; 0xf22 <__ultoa_invert+0x84>
 f1e:	a9 f7       	brne	.-22     	; 0xf0a <__ultoa_invert+0x6c>
 f20:	ea cf       	rjmp	.-44     	; 0xef6 <__ultoa_invert+0x58>
 f22:	b4 e0       	ldi	r27, 0x04	; 4
 f24:	a6 95       	lsr	r26
 f26:	97 95       	ror	r25
 f28:	87 95       	ror	r24
 f2a:	77 95       	ror	r23
 f2c:	67 95       	ror	r22
 f2e:	ba 95       	dec	r27
 f30:	c9 f7       	brne	.-14     	; 0xf24 <__ultoa_invert+0x86>
 f32:	00 97       	sbiw	r24, 0x00	; 0
 f34:	61 05       	cpc	r22, r1
 f36:	71 05       	cpc	r23, r1
 f38:	08 95       	ret
 f3a:	9b 01       	movw	r18, r22
 f3c:	ac 01       	movw	r20, r24
 f3e:	0a 2e       	mov	r0, r26
 f40:	06 94       	lsr	r0
 f42:	57 95       	ror	r21
 f44:	47 95       	ror	r20
 f46:	37 95       	ror	r19
 f48:	27 95       	ror	r18
 f4a:	ba 95       	dec	r27
 f4c:	c9 f7       	brne	.-14     	; 0xf40 <__ultoa_invert+0xa2>
 f4e:	62 0f       	add	r22, r18
 f50:	73 1f       	adc	r23, r19
 f52:	84 1f       	adc	r24, r20
 f54:	95 1f       	adc	r25, r21
 f56:	a0 1d       	adc	r26, r0
 f58:	08 95       	ret

00000f5a <_exit>:
 f5a:	f8 94       	cli

00000f5c <__stop_program>:
 f5c:	ff cf       	rjmp	.-2      	; 0xf5c <__stop_program>
