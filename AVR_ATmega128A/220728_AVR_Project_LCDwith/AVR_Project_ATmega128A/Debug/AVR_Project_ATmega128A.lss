
AVR_Project_ATmega128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000996  00000a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800108  00800108  00000a32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104f  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad9  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000745  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000548  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049c  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	18 d1       	rcall	.+560    	; 0x2f4 <main>
  c4:	66 c4       	rjmp	.+2252   	; 0x992 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_pulse_enable>:
   //출력 후 커서를 오른쪽으로 옮김, 즉 DDRAM의 주소가 증가하여 화면 이동은 없음
   LCD_write_command(0x06);
}

void LCD_pulse_enable(void) {
   PORT_CONTROL |= (1 << E_PIN);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	86 e6       	ldi	r24, 0x66	; 102
  d0:	9e e0       	ldi	r25, 0x0E	; 14
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_pulse_enable+0xa>
  d6:	00 00       	nop
   _delay_ms(1);
   PORT_CONTROL &= ~(1 << E_PIN);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	85 bb       	out	0x15, r24	; 21
  de:	86 e6       	ldi	r24, 0x66	; 102
  e0:	9e e0       	ldi	r25, 0x0E	; 14
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_pulse_enable+0x1a>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_write_data>:
   _delay_ms(1);
}

void LCD_write_data(uint8_t data) {
   PORT_CONTROL |= (1 << RS_PIN);
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	91 60       	ori	r25, 0x01	; 1
  ee:	95 bb       	out	0x15, r25	; 21
   PORT_DATA = data;
  f0:	88 bb       	out	0x18, r24	; 24
   LCD_pulse_enable();
  f2:	ea df       	rcall	.-44     	; 0xc8 <LCD_pulse_enable>
  f4:	8c ec       	ldi	r24, 0xCC	; 204
  f6:	9c e1       	ldi	r25, 0x1C	; 28
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_write_data+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_write_data+0x14>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <LCD_write_command>:
   _delay_ms(2);
}

void LCD_write_command(uint8_t command) {
   PORT_CONTROL &= ~(1 << RS_PIN);
 102:	95 b3       	in	r25, 0x15	; 21
 104:	9e 7f       	andi	r25, 0xFE	; 254
 106:	95 bb       	out	0x15, r25	; 21
   PORT_DATA = command;
 108:	88 bb       	out	0x18, r24	; 24
   LCD_pulse_enable();
 10a:	de df       	rcall	.-68     	; 0xc8 <LCD_pulse_enable>
 10c:	8c ec       	ldi	r24, 0xCC	; 204
 10e:	9c e1       	ldi	r25, 0x1C	; 28
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_write_command+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_write_command+0x14>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <LCD_write_string>:
   _delay_ms(2);
}

void LCD_write_string(char *string) {
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	8c 01       	movw	r16, r24
   uint8_t i;
   for(i = 0; string[i]; i++)      //종료 문자를 만날 때까지
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <LCD_write_string+0x10>
   LCD_write_data(string[i]);   //문자 단위 출력
 126:	e1 df       	rcall	.-62     	; 0xea <LCD_write_data>
   _delay_ms(2);
}

void LCD_write_string(char *string) {
   uint8_t i;
   for(i = 0; string[i]; i++)      //종료 문자를 만날 때까지
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	f8 01       	movw	r30, r16
 12c:	ec 0f       	add	r30, r28
 12e:	f1 1d       	adc	r31, r1
 130:	80 81       	ld	r24, Z
 132:	81 11       	cpse	r24, r1
 134:	f8 cf       	rjmp	.-16     	; 0x126 <LCD_write_string+0xc>
   LCD_write_data(string[i]);   //문자 단위 출력
}
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <LCD_goto_XY>:

void LCD_goto_XY(uint8_t row, uint8_t col) {
   col %= 16;   //[0 15]
 13e:	6f 70       	andi	r22, 0x0F	; 15
   row %= 2;   //[0 1]
   
   uint8_t address = 0;
   
   if(row == 0) address = 0x80;
 140:	98 2f       	mov	r25, r24
 142:	91 70       	andi	r25, 0x01	; 1
 144:	80 ff       	sbrs	r24, 0
 146:	04 c0       	rjmp	.+8      	; 0x150 <LCD_goto_XY+0x12>
   else if(row == 1) address = 0xC0;
 148:	91 30       	cpi	r25, 0x01	; 1
 14a:	21 f0       	breq	.+8      	; 0x154 <LCD_goto_XY+0x16>

void LCD_goto_XY(uint8_t row, uint8_t col) {
   col %= 16;   //[0 15]
   row %= 2;   //[0 1]
   
   uint8_t address = 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	03 c0       	rjmp	.+6      	; 0x156 <LCD_goto_XY+0x18>
   
   if(row == 0) address = 0x80;
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	01 c0       	rjmp	.+2      	; 0x156 <LCD_goto_XY+0x18>
   else if(row == 1) address = 0xC0;
 154:	80 ec       	ldi	r24, 0xC0	; 192
   
   if(col < 16) address += col;
 156:	86 0f       	add	r24, r22
   
   LCD_write_command(address);   //커서 이동
 158:	d4 cf       	rjmp	.-88     	; 0x102 <LCD_write_command>
 15a:	08 95       	ret

0000015c <LCD_clear>:
}

void LCD_clear(void) {
   LCD_write_command(COMMAND_CLEAR_DISPLAY); //0x01
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	d1 df       	rcall	.-94     	; 0x102 <LCD_write_command>
 160:	8c ec       	ldi	r24, 0xCC	; 204
 162:	9c e1       	ldi	r25, 0x1C	; 28
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_clear+0x8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_clear+0xe>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <LCD_init>:
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LCD_init+0x6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_init+0x10>
 17e:	00 00       	nop

void LCD_init(void) {
   _delay_ms(50);   //초기 구동 시간
   
   //연결 핀을 출력으로 설정
   DDR_DATA = 0xFF;                                   //DDRD 데이터 핀의 데이터 방향
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	87 bb       	out	0x17, r24	; 23
   PORT_DATA = 0x00;                                   //PORTD 데이터 핀 연결
 184:	18 ba       	out	0x18, r1	; 24
   DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);  //DDRC 제어 핀의 데이터 방향
 186:	84 b3       	in	r24, 0x14	; 20
 188:	87 60       	ori	r24, 0x07	; 7
 18a:	84 bb       	out	0x14, r24	; 20
   
   //R/W 핀으로 LOW를 출력하여 쓰기 전용으로 사용
   PORT_CONTROL &= ~(1 << RW_PIN);                          //PORTC 제어 핀 연결
 18c:	85 b3       	in	r24, 0x15	; 21
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	85 bb       	out	0x15, r24	; 21
   
   LCD_write_command(COMMAND_8_BIT_MODE);   //8비트 모드 0x38
 192:	88 e3       	ldi	r24, 0x38	; 56
 194:	b6 df       	rcall	.-148    	; 0x102 <LCD_write_command>
   
   //display on/off control
   //화면 on, 커서 off, 커서 깜빡임 off
   uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
   LCD_write_command(command);
 196:	8c e0       	ldi	r24, 0x0C	; 12
   
   LCD_clear();   //화면 지움
 198:	b4 df       	rcall	.-152    	; 0x102 <LCD_write_command>
   
   //Entry Mode Set
   //출력 후 커서를 오른쪽으로 옮김, 즉 DDRAM의 주소가 증가하여 화면 이동은 없음
   LCD_write_command(0x06);
 19a:	e0 df       	rcall	.-64     	; 0x15c <LCD_clear>
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	b1 cf       	rjmp	.-158    	; 0x102 <LCD_write_command>
 1a0:	08 95       	ret

000001a2 <Receive_Ardu>:
char msg[10] = {0x00};
	
char LCD_msg[4]	 = {0x00};
char LCD_msg2[4] = {0x00};

void Receive_Ardu(void){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <Receive_Ardu+0x6>
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <Receive_Ardu+0x8>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
	char* pptr[2];
	do
	{
		data = UART1_receive();
 1ae:	b4 d0       	rcall	.+360    	; 0x318 <UART1_receive>
 1b0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <data>
		msg[idx] = data;
 1b4:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <idx>
 1b8:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <idx+0x1>
 1bc:	ee 5e       	subi	r30, 0xEE	; 238
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
		UART0_transmit(msg[idx]);
 1c0:	80 83       	st	Z, r24
 1c2:	a6 d0       	rcall	.+332    	; 0x310 <UART0_transmit>
		idx++;
 1c4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <idx>
 1c8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <idx+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <idx+0x1>
 1d2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <idx>
 1d6:	29 e9       	ldi	r18, 0x99	; 153
 1d8:	39 e5       	ldi	r19, 0x59	; 89
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <Receive_Ardu+0x3a>
 1e4:	00 00       	nop
		_delay_ms(30);
		if(msg[idx-1] == '@'){
 1e6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <idx>
 1ea:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <idx+0x1>
 1ee:	ef 5e       	subi	r30, 0xEF	; 239
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	80 81       	ld	r24, Z
 1f4:	80 34       	cpi	r24, 0x40	; 64
 1f6:	09 f0       	breq	.+2      	; 0x1fa <Receive_Ardu+0x58>
 1f8:	3b c0       	rjmp	.+118    	; 0x270 <Receive_Ardu+0xce>
			char* ptr = strtok(msg,"#");
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	82 e1       	ldi	r24, 0x12	; 18
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	ba d0       	rcall	.+372    	; 0x378 <strtok>
			while(ptr != NULL){
 204:	1d c0       	rjmp	.+58     	; 0x240 <Receive_Ardu+0x9e>
				pptr[i]=ptr;
 206:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <i>
 20a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <i+0x1>
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	2c 0f       	add	r18, r28
 218:	3d 1f       	adc	r19, r29
 21a:	e2 0f       	add	r30, r18
 21c:	f3 1f       	adc	r31, r19
 21e:	91 83       	std	Z+1, r25	; 0x01
 220:	80 83       	st	Z, r24
				ptr = strtok(NULL, "@"); // 두번째인 n값까지 받고 "@"를 사용하여 끝을 확실히함
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	a6 d0       	rcall	.+332    	; 0x378 <strtok>
				i++;
 22c:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <i>
 230:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <i+0x1>
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	3f 4f       	sbci	r19, 0xFF	; 255
 238:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <i+0x1>
 23c:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <i>
		UART0_transmit(msg[idx]);
		idx++;
		_delay_ms(30);
		if(msg[idx-1] == '@'){
			char* ptr = strtok(msg,"#");
			while(ptr != NULL){
 240:	00 97       	sbiw	r24, 0x00	; 0
				pptr[i]=ptr;
				ptr = strtok(NULL, "@"); // 두번째인 n값까지 받고 "@"를 사용하여 끝을 확실히함
				i++;
			}
			m = atoi(pptr[0]);
 242:	09 f7       	brne	.-62     	; 0x206 <Receive_Ardu+0x64>
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	7a d0       	rcall	.+244    	; 0x33e <atoi>
 24a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <m+0x1>
 24e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <m>
			n = atoi(pptr[1]);
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	9c 81       	ldd	r25, Y+4	; 0x04
 256:	73 d0       	rcall	.+230    	; 0x33e <atoi>
 258:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <n+0x1>
 25c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <n>
			idx = 0;
 260:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <idx+0x1>
 264:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <idx>
			i = 0;
 268:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i+0x1>
 26c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <i>
			
		}
	}while(data != '@');
 270:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <data>
 274:	80 34       	cpi	r24, 0x40	; 64
 276:	09 f0       	breq	.+2      	; 0x27a <Receive_Ardu+0xd8>
 278:	9a cf       	rjmp	.-204    	; 0x1ae <Receive_Ardu+0xc>
}
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <Dust_LCDshow>:

void Dust_LCDshow(void)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
	LCD_clear();
 28c:	67 df       	rcall	.-306    	; 0x15c <LCD_clear>
	LCD_goto_XY(0, 0);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	55 df       	rcall	.-342    	; 0x13e <LCD_goto_XY>
	sprintf(LCD_msg, "%d", m);
 294:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <m+0x1>
 298:	8f 93       	push	r24
 29a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <m>
 29e:	8f 93       	push	r24
 2a0:	c4 e0       	ldi	r28, 0x04	; 4
 2a2:	d1 e0       	ldi	r29, 0x01	; 1
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	8e e0       	ldi	r24, 0x0E	; 14
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	9f 93       	push	r25
 2ae:	8f 93       	push	r24
 2b0:	95 d0       	rcall	.+298    	; 0x3dc <sprintf>
	LCD_write_string(LCD_msg);
 2b2:	8e e0       	ldi	r24, 0x0E	; 14
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	31 df       	rcall	.-414    	; 0x11a <LCD_write_string>
	LCD_goto_XY(0, 8);
 2b8:	68 e0       	ldi	r22, 0x08	; 8
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	40 df       	rcall	.-384    	; 0x13e <LCD_goto_XY>
 2be:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <n+0x1>
	sprintf(LCD_msg2, "%d", n);
 2c2:	8f 93       	push	r24
 2c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <n>
 2c8:	8f 93       	push	r24
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	9f 93       	push	r25
 2d4:	8f 93       	push	r24
 2d6:	82 d0       	rcall	.+260    	; 0x3dc <sprintf>
	LCD_write_string(LCD_msg2);	
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	1e df       	rcall	.-452    	; 0x11a <LCD_write_string>
 2de:	8d b7       	in	r24, 0x3d	; 61
}
 2e0:	9e b7       	in	r25, 0x3e	; 62
 2e2:	0c 96       	adiw	r24, 0x0c	; 12
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	9e bf       	out	0x3e, r25	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	8d bf       	out	0x3d, r24	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <main>:
 2f4:	18 d0       	rcall	.+48     	; 0x326 <UART_INIT>


int main(void)
{
	UART_INIT();
	LCD_init();
 2f6:	3b df       	rcall	.-394    	; 0x16e <LCD_init>
	
	
    /* Replace with your application code */
    while (1) 
    {		
		 Receive_Ardu();
 2f8:	54 df       	rcall	.-344    	; 0x1a2 <Receive_Ardu>
 2fa:	c6 df       	rcall	.-116    	; 0x288 <Dust_LCDshow>
		 Dust_LCDshow();
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	8f e7       	ldi	r24, 0x7F	; 127
 300:	94 e0       	ldi	r25, 0x04	; 4
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0xe>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0x18>
 30c:	00 00       	nop
 30e:	f4 cf       	rjmp	.-24     	; 0x2f8 <main+0x4>

00000310 <UART0_transmit>:
 310:	5d 9b       	sbis	0x0b, 5	; 11
 312:	fe cf       	rjmp	.-4      	; 0x310 <UART0_transmit>
	while(!(UCSR0A & (1<<RXC1)));
	// (1<<UDRE0)은 안바뀌는 값이다 -> UDRE0 = 5;
	// UCSR0A
	// 비어있는 상태 1 & 1 = 1 -> 0   : 최종 0   =>   while문 빠져나옴
	return UDR0;
}
 314:	8c b9       	out	0x0c, r24	; 12
 316:	08 95       	ret

00000318 <UART1_receive>:

char UART1_receive(void)
{
	while(!(UCSR1A & (1<<RXC1)));
 318:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 31c:	88 23       	and	r24, r24
 31e:	e4 f7       	brge	.-8      	; 0x318 <UART1_receive>
	return UDR1;
 320:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
 324:	08 95       	ret

00000326 <UART_INIT>:

void UART_INIT(void)
{
	DDRE = 0xFE;
 326:	2e ef       	ldi	r18, 0xFE	; 254
 328:	22 b9       	out	0x02, r18	; 2
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 32a:	98 e1       	ldi	r25, 0x18	; 24
 32c:	9a b9       	out	0x0a, r25	; 10
	//UCSR0C = 0x06;
	UBRR0L = 95;	//baudrate
 32e:	8f e5       	ldi	r24, 0x5F	; 95
 330:	89 b9       	out	0x09, r24	; 9
	
	DDRD = 0xFE;
 332:	21 bb       	out	0x11, r18	; 17
	UCSR1B = (1<<RXEN0) | (1<<TXEN0);
 334:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UBRR1L = 95;
 338:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 33c:	08 95       	ret

0000033e <atoi>:
 33e:	fc 01       	movw	r30, r24
 340:	88 27       	eor	r24, r24
 342:	99 27       	eor	r25, r25
 344:	e8 94       	clt
 346:	21 91       	ld	r18, Z+
 348:	20 32       	cpi	r18, 0x20	; 32
 34a:	e9 f3       	breq	.-6      	; 0x346 <atoi+0x8>
 34c:	29 30       	cpi	r18, 0x09	; 9
 34e:	10 f0       	brcs	.+4      	; 0x354 <atoi+0x16>
 350:	2e 30       	cpi	r18, 0x0E	; 14
 352:	c8 f3       	brcs	.-14     	; 0x346 <atoi+0x8>
 354:	2b 32       	cpi	r18, 0x2B	; 43
 356:	39 f0       	breq	.+14     	; 0x366 <atoi+0x28>
 358:	2d 32       	cpi	r18, 0x2D	; 45
 35a:	31 f4       	brne	.+12     	; 0x368 <atoi+0x2a>
 35c:	68 94       	set
 35e:	03 c0       	rjmp	.+6      	; 0x366 <atoi+0x28>
 360:	35 d0       	rcall	.+106    	; 0x3cc <__mulhi_const_10>
 362:	82 0f       	add	r24, r18
 364:	91 1d       	adc	r25, r1
 366:	21 91       	ld	r18, Z+
 368:	20 53       	subi	r18, 0x30	; 48
 36a:	2a 30       	cpi	r18, 0x0A	; 10
 36c:	c8 f3       	brcs	.-14     	; 0x360 <atoi+0x22>
 36e:	1e f4       	brtc	.+6      	; 0x376 <atoi+0x38>
 370:	90 95       	com	r25
 372:	81 95       	neg	r24
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	08 95       	ret

00000378 <strtok>:
 378:	48 e0       	ldi	r20, 0x08	; 8
 37a:	51 e0       	ldi	r21, 0x01	; 1
 37c:	00 c0       	rjmp	.+0      	; 0x37e <strtok_r>

0000037e <strtok_r>:
 37e:	fa 01       	movw	r30, r20
 380:	a1 91       	ld	r26, Z+
 382:	b0 81       	ld	r27, Z
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	19 f4       	brne	.+6      	; 0x38e <strtok_r+0x10>
 388:	10 97       	sbiw	r26, 0x00	; 0
 38a:	e1 f0       	breq	.+56     	; 0x3c4 <strtok_r+0x46>
 38c:	cd 01       	movw	r24, r26
 38e:	dc 01       	movw	r26, r24
 390:	cd 01       	movw	r24, r26
 392:	0d 90       	ld	r0, X+
 394:	00 20       	and	r0, r0
 396:	11 f4       	brne	.+4      	; 0x39c <strtok_r+0x1e>
 398:	c0 01       	movw	r24, r0
 39a:	13 c0       	rjmp	.+38     	; 0x3c2 <strtok_r+0x44>
 39c:	fb 01       	movw	r30, r22
 39e:	21 91       	ld	r18, Z+
 3a0:	22 23       	and	r18, r18
 3a2:	19 f0       	breq	.+6      	; 0x3aa <strtok_r+0x2c>
 3a4:	20 15       	cp	r18, r0
 3a6:	d9 f7       	brne	.-10     	; 0x39e <strtok_r+0x20>
 3a8:	f3 cf       	rjmp	.-26     	; 0x390 <strtok_r+0x12>
 3aa:	fb 01       	movw	r30, r22
 3ac:	21 91       	ld	r18, Z+
 3ae:	20 15       	cp	r18, r0
 3b0:	19 f4       	brne	.+6      	; 0x3b8 <strtok_r+0x3a>
 3b2:	1e 92       	st	-X, r1
 3b4:	11 96       	adiw	r26, 0x01	; 1
 3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <strtok_r+0x46>
 3b8:	22 23       	and	r18, r18
 3ba:	c1 f7       	brne	.-16     	; 0x3ac <strtok_r+0x2e>
 3bc:	0d 90       	ld	r0, X+
 3be:	00 20       	and	r0, r0
 3c0:	a1 f7       	brne	.-24     	; 0x3aa <strtok_r+0x2c>
 3c2:	d0 01       	movw	r26, r0
 3c4:	fa 01       	movw	r30, r20
 3c6:	a1 93       	st	Z+, r26
 3c8:	b0 83       	st	Z, r27
 3ca:	08 95       	ret

000003cc <__mulhi_const_10>:
 3cc:	7a e0       	ldi	r23, 0x0A	; 10
 3ce:	97 9f       	mul	r25, r23
 3d0:	90 2d       	mov	r25, r0
 3d2:	87 9f       	mul	r24, r23
 3d4:	80 2d       	mov	r24, r0
 3d6:	91 0d       	add	r25, r1
 3d8:	11 24       	eor	r1, r1
 3da:	08 95       	ret

000003dc <sprintf>:
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	2e 97       	sbiw	r28, 0x0e	; 14
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	0d 89       	ldd	r16, Y+21	; 0x15
 3f6:	1e 89       	ldd	r17, Y+22	; 0x16
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	8c 83       	std	Y+4, r24	; 0x04
 3fc:	1a 83       	std	Y+2, r17	; 0x02
 3fe:	09 83       	std	Y+1, r16	; 0x01
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	9f e7       	ldi	r25, 0x7F	; 127
 404:	9e 83       	std	Y+6, r25	; 0x06
 406:	8d 83       	std	Y+5, r24	; 0x05
 408:	ae 01       	movw	r20, r28
 40a:	47 5e       	subi	r20, 0xE7	; 231
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	6f 89       	ldd	r22, Y+23	; 0x17
 410:	78 8d       	ldd	r23, Y+24	; 0x18
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	10 d0       	rcall	.+32     	; 0x438 <vfprintf>
 418:	ef 81       	ldd	r30, Y+7	; 0x07
 41a:	f8 85       	ldd	r31, Y+8	; 0x08
 41c:	e0 0f       	add	r30, r16
 41e:	f1 1f       	adc	r31, r17
 420:	10 82       	st	Z, r1
 422:	2e 96       	adiw	r28, 0x0e	; 14
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <vfprintf>:
 438:	2f 92       	push	r2
 43a:	3f 92       	push	r3
 43c:	4f 92       	push	r4
 43e:	5f 92       	push	r5
 440:	6f 92       	push	r6
 442:	7f 92       	push	r7
 444:	8f 92       	push	r8
 446:	9f 92       	push	r9
 448:	af 92       	push	r10
 44a:	bf 92       	push	r11
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	2b 97       	sbiw	r28, 0x0b	; 11
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	6c 01       	movw	r12, r24
 46e:	7b 01       	movw	r14, r22
 470:	8a 01       	movw	r16, r20
 472:	fc 01       	movw	r30, r24
 474:	17 82       	std	Z+7, r1	; 0x07
 476:	16 82       	std	Z+6, r1	; 0x06
 478:	83 81       	ldd	r24, Z+3	; 0x03
 47a:	81 ff       	sbrs	r24, 1
 47c:	bf c1       	rjmp	.+894    	; 0x7fc <vfprintf+0x3c4>
 47e:	ce 01       	movw	r24, r28
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	3c 01       	movw	r6, r24
 484:	f6 01       	movw	r30, r12
 486:	93 81       	ldd	r25, Z+3	; 0x03
 488:	f7 01       	movw	r30, r14
 48a:	93 fd       	sbrc	r25, 3
 48c:	85 91       	lpm	r24, Z+
 48e:	93 ff       	sbrs	r25, 3
 490:	81 91       	ld	r24, Z+
 492:	7f 01       	movw	r14, r30
 494:	88 23       	and	r24, r24
 496:	09 f4       	brne	.+2      	; 0x49a <vfprintf+0x62>
 498:	ad c1       	rjmp	.+858    	; 0x7f4 <vfprintf+0x3bc>
 49a:	85 32       	cpi	r24, 0x25	; 37
 49c:	39 f4       	brne	.+14     	; 0x4ac <vfprintf+0x74>
 49e:	93 fd       	sbrc	r25, 3
 4a0:	85 91       	lpm	r24, Z+
 4a2:	93 ff       	sbrs	r25, 3
 4a4:	81 91       	ld	r24, Z+
 4a6:	7f 01       	movw	r14, r30
 4a8:	85 32       	cpi	r24, 0x25	; 37
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <vfprintf+0x7c>
 4ac:	b6 01       	movw	r22, r12
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	d6 d1       	rcall	.+940    	; 0x85e <fputc>
 4b2:	e8 cf       	rjmp	.-48     	; 0x484 <vfprintf+0x4c>
 4b4:	91 2c       	mov	r9, r1
 4b6:	21 2c       	mov	r2, r1
 4b8:	31 2c       	mov	r3, r1
 4ba:	ff e1       	ldi	r31, 0x1F	; 31
 4bc:	f3 15       	cp	r31, r3
 4be:	d8 f0       	brcs	.+54     	; 0x4f6 <vfprintf+0xbe>
 4c0:	8b 32       	cpi	r24, 0x2B	; 43
 4c2:	79 f0       	breq	.+30     	; 0x4e2 <vfprintf+0xaa>
 4c4:	38 f4       	brcc	.+14     	; 0x4d4 <vfprintf+0x9c>
 4c6:	80 32       	cpi	r24, 0x20	; 32
 4c8:	79 f0       	breq	.+30     	; 0x4e8 <vfprintf+0xb0>
 4ca:	83 32       	cpi	r24, 0x23	; 35
 4cc:	a1 f4       	brne	.+40     	; 0x4f6 <vfprintf+0xbe>
 4ce:	23 2d       	mov	r18, r3
 4d0:	20 61       	ori	r18, 0x10	; 16
 4d2:	1d c0       	rjmp	.+58     	; 0x50e <vfprintf+0xd6>
 4d4:	8d 32       	cpi	r24, 0x2D	; 45
 4d6:	61 f0       	breq	.+24     	; 0x4f0 <vfprintf+0xb8>
 4d8:	80 33       	cpi	r24, 0x30	; 48
 4da:	69 f4       	brne	.+26     	; 0x4f6 <vfprintf+0xbe>
 4dc:	23 2d       	mov	r18, r3
 4de:	21 60       	ori	r18, 0x01	; 1
 4e0:	16 c0       	rjmp	.+44     	; 0x50e <vfprintf+0xd6>
 4e2:	83 2d       	mov	r24, r3
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	38 2e       	mov	r3, r24
 4e8:	e3 2d       	mov	r30, r3
 4ea:	e4 60       	ori	r30, 0x04	; 4
 4ec:	3e 2e       	mov	r3, r30
 4ee:	2a c0       	rjmp	.+84     	; 0x544 <vfprintf+0x10c>
 4f0:	f3 2d       	mov	r31, r3
 4f2:	f8 60       	ori	r31, 0x08	; 8
 4f4:	1d c0       	rjmp	.+58     	; 0x530 <vfprintf+0xf8>
 4f6:	37 fc       	sbrc	r3, 7
 4f8:	2d c0       	rjmp	.+90     	; 0x554 <vfprintf+0x11c>
 4fa:	20 ed       	ldi	r18, 0xD0	; 208
 4fc:	28 0f       	add	r18, r24
 4fe:	2a 30       	cpi	r18, 0x0A	; 10
 500:	40 f0       	brcs	.+16     	; 0x512 <vfprintf+0xda>
 502:	8e 32       	cpi	r24, 0x2E	; 46
 504:	b9 f4       	brne	.+46     	; 0x534 <vfprintf+0xfc>
 506:	36 fc       	sbrc	r3, 6
 508:	75 c1       	rjmp	.+746    	; 0x7f4 <vfprintf+0x3bc>
 50a:	23 2d       	mov	r18, r3
 50c:	20 64       	ori	r18, 0x40	; 64
 50e:	32 2e       	mov	r3, r18
 510:	19 c0       	rjmp	.+50     	; 0x544 <vfprintf+0x10c>
 512:	36 fe       	sbrs	r3, 6
 514:	06 c0       	rjmp	.+12     	; 0x522 <vfprintf+0xea>
 516:	8a e0       	ldi	r24, 0x0A	; 10
 518:	98 9e       	mul	r9, r24
 51a:	20 0d       	add	r18, r0
 51c:	11 24       	eor	r1, r1
 51e:	92 2e       	mov	r9, r18
 520:	11 c0       	rjmp	.+34     	; 0x544 <vfprintf+0x10c>
 522:	ea e0       	ldi	r30, 0x0A	; 10
 524:	2e 9e       	mul	r2, r30
 526:	20 0d       	add	r18, r0
 528:	11 24       	eor	r1, r1
 52a:	22 2e       	mov	r2, r18
 52c:	f3 2d       	mov	r31, r3
 52e:	f0 62       	ori	r31, 0x20	; 32
 530:	3f 2e       	mov	r3, r31
 532:	08 c0       	rjmp	.+16     	; 0x544 <vfprintf+0x10c>
 534:	8c 36       	cpi	r24, 0x6C	; 108
 536:	21 f4       	brne	.+8      	; 0x540 <vfprintf+0x108>
 538:	83 2d       	mov	r24, r3
 53a:	80 68       	ori	r24, 0x80	; 128
 53c:	38 2e       	mov	r3, r24
 53e:	02 c0       	rjmp	.+4      	; 0x544 <vfprintf+0x10c>
 540:	88 36       	cpi	r24, 0x68	; 104
 542:	41 f4       	brne	.+16     	; 0x554 <vfprintf+0x11c>
 544:	f7 01       	movw	r30, r14
 546:	93 fd       	sbrc	r25, 3
 548:	85 91       	lpm	r24, Z+
 54a:	93 ff       	sbrs	r25, 3
 54c:	81 91       	ld	r24, Z+
 54e:	7f 01       	movw	r14, r30
 550:	81 11       	cpse	r24, r1
 552:	b3 cf       	rjmp	.-154    	; 0x4ba <vfprintf+0x82>
 554:	98 2f       	mov	r25, r24
 556:	9f 7d       	andi	r25, 0xDF	; 223
 558:	95 54       	subi	r25, 0x45	; 69
 55a:	93 30       	cpi	r25, 0x03	; 3
 55c:	28 f4       	brcc	.+10     	; 0x568 <vfprintf+0x130>
 55e:	0c 5f       	subi	r16, 0xFC	; 252
 560:	1f 4f       	sbci	r17, 0xFF	; 255
 562:	9f e3       	ldi	r25, 0x3F	; 63
 564:	99 83       	std	Y+1, r25	; 0x01
 566:	0d c0       	rjmp	.+26     	; 0x582 <vfprintf+0x14a>
 568:	83 36       	cpi	r24, 0x63	; 99
 56a:	31 f0       	breq	.+12     	; 0x578 <vfprintf+0x140>
 56c:	83 37       	cpi	r24, 0x73	; 115
 56e:	71 f0       	breq	.+28     	; 0x58c <vfprintf+0x154>
 570:	83 35       	cpi	r24, 0x53	; 83
 572:	09 f0       	breq	.+2      	; 0x576 <vfprintf+0x13e>
 574:	55 c0       	rjmp	.+170    	; 0x620 <vfprintf+0x1e8>
 576:	20 c0       	rjmp	.+64     	; 0x5b8 <vfprintf+0x180>
 578:	f8 01       	movw	r30, r16
 57a:	80 81       	ld	r24, Z
 57c:	89 83       	std	Y+1, r24	; 0x01
 57e:	0e 5f       	subi	r16, 0xFE	; 254
 580:	1f 4f       	sbci	r17, 0xFF	; 255
 582:	88 24       	eor	r8, r8
 584:	83 94       	inc	r8
 586:	91 2c       	mov	r9, r1
 588:	53 01       	movw	r10, r6
 58a:	12 c0       	rjmp	.+36     	; 0x5b0 <vfprintf+0x178>
 58c:	28 01       	movw	r4, r16
 58e:	f2 e0       	ldi	r31, 0x02	; 2
 590:	4f 0e       	add	r4, r31
 592:	51 1c       	adc	r5, r1
 594:	f8 01       	movw	r30, r16
 596:	a0 80       	ld	r10, Z
 598:	b1 80       	ldd	r11, Z+1	; 0x01
 59a:	36 fe       	sbrs	r3, 6
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <vfprintf+0x16c>
 59e:	69 2d       	mov	r22, r9
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <vfprintf+0x170>
 5a4:	6f ef       	ldi	r22, 0xFF	; 255
 5a6:	7f ef       	ldi	r23, 0xFF	; 255
 5a8:	c5 01       	movw	r24, r10
 5aa:	4e d1       	rcall	.+668    	; 0x848 <strnlen>
 5ac:	4c 01       	movw	r8, r24
 5ae:	82 01       	movw	r16, r4
 5b0:	f3 2d       	mov	r31, r3
 5b2:	ff 77       	andi	r31, 0x7F	; 127
 5b4:	3f 2e       	mov	r3, r31
 5b6:	15 c0       	rjmp	.+42     	; 0x5e2 <vfprintf+0x1aa>
 5b8:	28 01       	movw	r4, r16
 5ba:	22 e0       	ldi	r18, 0x02	; 2
 5bc:	42 0e       	add	r4, r18
 5be:	51 1c       	adc	r5, r1
 5c0:	f8 01       	movw	r30, r16
 5c2:	a0 80       	ld	r10, Z
 5c4:	b1 80       	ldd	r11, Z+1	; 0x01
 5c6:	36 fe       	sbrs	r3, 6
 5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <vfprintf+0x198>
 5ca:	69 2d       	mov	r22, r9
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <vfprintf+0x19c>
 5d0:	6f ef       	ldi	r22, 0xFF	; 255
 5d2:	7f ef       	ldi	r23, 0xFF	; 255
 5d4:	c5 01       	movw	r24, r10
 5d6:	2d d1       	rcall	.+602    	; 0x832 <strnlen_P>
 5d8:	4c 01       	movw	r8, r24
 5da:	f3 2d       	mov	r31, r3
 5dc:	f0 68       	ori	r31, 0x80	; 128
 5de:	3f 2e       	mov	r3, r31
 5e0:	82 01       	movw	r16, r4
 5e2:	33 fc       	sbrc	r3, 3
 5e4:	19 c0       	rjmp	.+50     	; 0x618 <vfprintf+0x1e0>
 5e6:	82 2d       	mov	r24, r2
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	88 16       	cp	r8, r24
 5ec:	99 06       	cpc	r9, r25
 5ee:	a0 f4       	brcc	.+40     	; 0x618 <vfprintf+0x1e0>
 5f0:	b6 01       	movw	r22, r12
 5f2:	80 e2       	ldi	r24, 0x20	; 32
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	33 d1       	rcall	.+614    	; 0x85e <fputc>
 5f8:	2a 94       	dec	r2
 5fa:	f5 cf       	rjmp	.-22     	; 0x5e6 <vfprintf+0x1ae>
 5fc:	f5 01       	movw	r30, r10
 5fe:	37 fc       	sbrc	r3, 7
 600:	85 91       	lpm	r24, Z+
 602:	37 fe       	sbrs	r3, 7
 604:	81 91       	ld	r24, Z+
 606:	5f 01       	movw	r10, r30
 608:	b6 01       	movw	r22, r12
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	28 d1       	rcall	.+592    	; 0x85e <fputc>
 60e:	21 10       	cpse	r2, r1
 610:	2a 94       	dec	r2
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	82 1a       	sub	r8, r18
 616:	91 08       	sbc	r9, r1
 618:	81 14       	cp	r8, r1
 61a:	91 04       	cpc	r9, r1
 61c:	79 f7       	brne	.-34     	; 0x5fc <vfprintf+0x1c4>
 61e:	e1 c0       	rjmp	.+450    	; 0x7e2 <vfprintf+0x3aa>
 620:	84 36       	cpi	r24, 0x64	; 100
 622:	11 f0       	breq	.+4      	; 0x628 <vfprintf+0x1f0>
 624:	89 36       	cpi	r24, 0x69	; 105
 626:	39 f5       	brne	.+78     	; 0x676 <vfprintf+0x23e>
 628:	f8 01       	movw	r30, r16
 62a:	37 fe       	sbrs	r3, 7
 62c:	07 c0       	rjmp	.+14     	; 0x63c <vfprintf+0x204>
 62e:	60 81       	ld	r22, Z
 630:	71 81       	ldd	r23, Z+1	; 0x01
 632:	82 81       	ldd	r24, Z+2	; 0x02
 634:	93 81       	ldd	r25, Z+3	; 0x03
 636:	0c 5f       	subi	r16, 0xFC	; 252
 638:	1f 4f       	sbci	r17, 0xFF	; 255
 63a:	08 c0       	rjmp	.+16     	; 0x64c <vfprintf+0x214>
 63c:	60 81       	ld	r22, Z
 63e:	71 81       	ldd	r23, Z+1	; 0x01
 640:	07 2e       	mov	r0, r23
 642:	00 0c       	add	r0, r0
 644:	88 0b       	sbc	r24, r24
 646:	99 0b       	sbc	r25, r25
 648:	0e 5f       	subi	r16, 0xFE	; 254
 64a:	1f 4f       	sbci	r17, 0xFF	; 255
 64c:	f3 2d       	mov	r31, r3
 64e:	ff 76       	andi	r31, 0x6F	; 111
 650:	3f 2e       	mov	r3, r31
 652:	97 ff       	sbrs	r25, 7
 654:	09 c0       	rjmp	.+18     	; 0x668 <vfprintf+0x230>
 656:	90 95       	com	r25
 658:	80 95       	com	r24
 65a:	70 95       	com	r23
 65c:	61 95       	neg	r22
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	f0 68       	ori	r31, 0x80	; 128
 666:	3f 2e       	mov	r3, r31
 668:	2a e0       	ldi	r18, 0x0A	; 10
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	a3 01       	movw	r20, r6
 66e:	33 d1       	rcall	.+614    	; 0x8d6 <__ultoa_invert>
 670:	88 2e       	mov	r8, r24
 672:	86 18       	sub	r8, r6
 674:	44 c0       	rjmp	.+136    	; 0x6fe <vfprintf+0x2c6>
 676:	85 37       	cpi	r24, 0x75	; 117
 678:	31 f4       	brne	.+12     	; 0x686 <vfprintf+0x24e>
 67a:	23 2d       	mov	r18, r3
 67c:	2f 7e       	andi	r18, 0xEF	; 239
 67e:	b2 2e       	mov	r11, r18
 680:	2a e0       	ldi	r18, 0x0A	; 10
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	25 c0       	rjmp	.+74     	; 0x6d0 <vfprintf+0x298>
 686:	93 2d       	mov	r25, r3
 688:	99 7f       	andi	r25, 0xF9	; 249
 68a:	b9 2e       	mov	r11, r25
 68c:	8f 36       	cpi	r24, 0x6F	; 111
 68e:	c1 f0       	breq	.+48     	; 0x6c0 <vfprintf+0x288>
 690:	18 f4       	brcc	.+6      	; 0x698 <vfprintf+0x260>
 692:	88 35       	cpi	r24, 0x58	; 88
 694:	79 f0       	breq	.+30     	; 0x6b4 <vfprintf+0x27c>
 696:	ae c0       	rjmp	.+348    	; 0x7f4 <vfprintf+0x3bc>
 698:	80 37       	cpi	r24, 0x70	; 112
 69a:	19 f0       	breq	.+6      	; 0x6a2 <vfprintf+0x26a>
 69c:	88 37       	cpi	r24, 0x78	; 120
 69e:	21 f0       	breq	.+8      	; 0x6a8 <vfprintf+0x270>
 6a0:	a9 c0       	rjmp	.+338    	; 0x7f4 <vfprintf+0x3bc>
 6a2:	e9 2f       	mov	r30, r25
 6a4:	e0 61       	ori	r30, 0x10	; 16
 6a6:	be 2e       	mov	r11, r30
 6a8:	b4 fe       	sbrs	r11, 4
 6aa:	0d c0       	rjmp	.+26     	; 0x6c6 <vfprintf+0x28e>
 6ac:	fb 2d       	mov	r31, r11
 6ae:	f4 60       	ori	r31, 0x04	; 4
 6b0:	bf 2e       	mov	r11, r31
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <vfprintf+0x28e>
 6b4:	34 fe       	sbrs	r3, 4
 6b6:	0a c0       	rjmp	.+20     	; 0x6cc <vfprintf+0x294>
 6b8:	29 2f       	mov	r18, r25
 6ba:	26 60       	ori	r18, 0x06	; 6
 6bc:	b2 2e       	mov	r11, r18
 6be:	06 c0       	rjmp	.+12     	; 0x6cc <vfprintf+0x294>
 6c0:	28 e0       	ldi	r18, 0x08	; 8
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <vfprintf+0x298>
 6c6:	20 e1       	ldi	r18, 0x10	; 16
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <vfprintf+0x298>
 6cc:	20 e1       	ldi	r18, 0x10	; 16
 6ce:	32 e0       	ldi	r19, 0x02	; 2
 6d0:	f8 01       	movw	r30, r16
 6d2:	b7 fe       	sbrs	r11, 7
 6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <vfprintf+0x2ac>
 6d6:	60 81       	ld	r22, Z
 6d8:	71 81       	ldd	r23, Z+1	; 0x01
 6da:	82 81       	ldd	r24, Z+2	; 0x02
 6dc:	93 81       	ldd	r25, Z+3	; 0x03
 6de:	0c 5f       	subi	r16, 0xFC	; 252
 6e0:	1f 4f       	sbci	r17, 0xFF	; 255
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0x2b8>
 6e4:	60 81       	ld	r22, Z
 6e6:	71 81       	ldd	r23, Z+1	; 0x01
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 5f       	subi	r16, 0xFE	; 254
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	a3 01       	movw	r20, r6
 6f2:	f1 d0       	rcall	.+482    	; 0x8d6 <__ultoa_invert>
 6f4:	88 2e       	mov	r8, r24
 6f6:	86 18       	sub	r8, r6
 6f8:	fb 2d       	mov	r31, r11
 6fa:	ff 77       	andi	r31, 0x7F	; 127
 6fc:	3f 2e       	mov	r3, r31
 6fe:	36 fe       	sbrs	r3, 6
 700:	0d c0       	rjmp	.+26     	; 0x71c <vfprintf+0x2e4>
 702:	23 2d       	mov	r18, r3
 704:	2e 7f       	andi	r18, 0xFE	; 254
 706:	a2 2e       	mov	r10, r18
 708:	89 14       	cp	r8, r9
 70a:	58 f4       	brcc	.+22     	; 0x722 <vfprintf+0x2ea>
 70c:	34 fe       	sbrs	r3, 4
 70e:	0b c0       	rjmp	.+22     	; 0x726 <vfprintf+0x2ee>
 710:	32 fc       	sbrc	r3, 2
 712:	09 c0       	rjmp	.+18     	; 0x726 <vfprintf+0x2ee>
 714:	83 2d       	mov	r24, r3
 716:	8e 7e       	andi	r24, 0xEE	; 238
 718:	a8 2e       	mov	r10, r24
 71a:	05 c0       	rjmp	.+10     	; 0x726 <vfprintf+0x2ee>
 71c:	b8 2c       	mov	r11, r8
 71e:	a3 2c       	mov	r10, r3
 720:	03 c0       	rjmp	.+6      	; 0x728 <vfprintf+0x2f0>
 722:	b8 2c       	mov	r11, r8
 724:	01 c0       	rjmp	.+2      	; 0x728 <vfprintf+0x2f0>
 726:	b9 2c       	mov	r11, r9
 728:	a4 fe       	sbrs	r10, 4
 72a:	0f c0       	rjmp	.+30     	; 0x74a <vfprintf+0x312>
 72c:	fe 01       	movw	r30, r28
 72e:	e8 0d       	add	r30, r8
 730:	f1 1d       	adc	r31, r1
 732:	80 81       	ld	r24, Z
 734:	80 33       	cpi	r24, 0x30	; 48
 736:	21 f4       	brne	.+8      	; 0x740 <vfprintf+0x308>
 738:	9a 2d       	mov	r25, r10
 73a:	99 7e       	andi	r25, 0xE9	; 233
 73c:	a9 2e       	mov	r10, r25
 73e:	09 c0       	rjmp	.+18     	; 0x752 <vfprintf+0x31a>
 740:	a2 fe       	sbrs	r10, 2
 742:	06 c0       	rjmp	.+12     	; 0x750 <vfprintf+0x318>
 744:	b3 94       	inc	r11
 746:	b3 94       	inc	r11
 748:	04 c0       	rjmp	.+8      	; 0x752 <vfprintf+0x31a>
 74a:	8a 2d       	mov	r24, r10
 74c:	86 78       	andi	r24, 0x86	; 134
 74e:	09 f0       	breq	.+2      	; 0x752 <vfprintf+0x31a>
 750:	b3 94       	inc	r11
 752:	a3 fc       	sbrc	r10, 3
 754:	10 c0       	rjmp	.+32     	; 0x776 <vfprintf+0x33e>
 756:	a0 fe       	sbrs	r10, 0
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0x32e>
 75a:	b2 14       	cp	r11, r2
 75c:	80 f4       	brcc	.+32     	; 0x77e <vfprintf+0x346>
 75e:	28 0c       	add	r2, r8
 760:	92 2c       	mov	r9, r2
 762:	9b 18       	sub	r9, r11
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x348>
 766:	b2 14       	cp	r11, r2
 768:	58 f4       	brcc	.+22     	; 0x780 <vfprintf+0x348>
 76a:	b6 01       	movw	r22, r12
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	76 d0       	rcall	.+236    	; 0x85e <fputc>
 772:	b3 94       	inc	r11
 774:	f8 cf       	rjmp	.-16     	; 0x766 <vfprintf+0x32e>
 776:	b2 14       	cp	r11, r2
 778:	18 f4       	brcc	.+6      	; 0x780 <vfprintf+0x348>
 77a:	2b 18       	sub	r2, r11
 77c:	02 c0       	rjmp	.+4      	; 0x782 <vfprintf+0x34a>
 77e:	98 2c       	mov	r9, r8
 780:	21 2c       	mov	r2, r1
 782:	a4 fe       	sbrs	r10, 4
 784:	0f c0       	rjmp	.+30     	; 0x7a4 <vfprintf+0x36c>
 786:	b6 01       	movw	r22, r12
 788:	80 e3       	ldi	r24, 0x30	; 48
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	68 d0       	rcall	.+208    	; 0x85e <fputc>
 78e:	a2 fe       	sbrs	r10, 2
 790:	16 c0       	rjmp	.+44     	; 0x7be <vfprintf+0x386>
 792:	a1 fc       	sbrc	r10, 1
 794:	03 c0       	rjmp	.+6      	; 0x79c <vfprintf+0x364>
 796:	88 e7       	ldi	r24, 0x78	; 120
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x368>
 79c:	88 e5       	ldi	r24, 0x58	; 88
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	b6 01       	movw	r22, r12
 7a2:	0c c0       	rjmp	.+24     	; 0x7bc <vfprintf+0x384>
 7a4:	8a 2d       	mov	r24, r10
 7a6:	86 78       	andi	r24, 0x86	; 134
 7a8:	51 f0       	breq	.+20     	; 0x7be <vfprintf+0x386>
 7aa:	a1 fe       	sbrs	r10, 1
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <vfprintf+0x37a>
 7ae:	8b e2       	ldi	r24, 0x2B	; 43
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <vfprintf+0x37c>
 7b2:	80 e2       	ldi	r24, 0x20	; 32
 7b4:	a7 fc       	sbrc	r10, 7
 7b6:	8d e2       	ldi	r24, 0x2D	; 45
 7b8:	b6 01       	movw	r22, r12
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	50 d0       	rcall	.+160    	; 0x85e <fputc>
 7be:	89 14       	cp	r8, r9
 7c0:	30 f4       	brcc	.+12     	; 0x7ce <vfprintf+0x396>
 7c2:	b6 01       	movw	r22, r12
 7c4:	80 e3       	ldi	r24, 0x30	; 48
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	4a d0       	rcall	.+148    	; 0x85e <fputc>
 7ca:	9a 94       	dec	r9
 7cc:	f8 cf       	rjmp	.-16     	; 0x7be <vfprintf+0x386>
 7ce:	8a 94       	dec	r8
 7d0:	f3 01       	movw	r30, r6
 7d2:	e8 0d       	add	r30, r8
 7d4:	f1 1d       	adc	r31, r1
 7d6:	80 81       	ld	r24, Z
 7d8:	b6 01       	movw	r22, r12
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	40 d0       	rcall	.+128    	; 0x85e <fputc>
 7de:	81 10       	cpse	r8, r1
 7e0:	f6 cf       	rjmp	.-20     	; 0x7ce <vfprintf+0x396>
 7e2:	22 20       	and	r2, r2
 7e4:	09 f4       	brne	.+2      	; 0x7e8 <vfprintf+0x3b0>
 7e6:	4e ce       	rjmp	.-868    	; 0x484 <vfprintf+0x4c>
 7e8:	b6 01       	movw	r22, r12
 7ea:	80 e2       	ldi	r24, 0x20	; 32
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	37 d0       	rcall	.+110    	; 0x85e <fputc>
 7f0:	2a 94       	dec	r2
 7f2:	f7 cf       	rjmp	.-18     	; 0x7e2 <vfprintf+0x3aa>
 7f4:	f6 01       	movw	r30, r12
 7f6:	86 81       	ldd	r24, Z+6	; 0x06
 7f8:	97 81       	ldd	r25, Z+7	; 0x07
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <vfprintf+0x3c8>
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	2b 96       	adiw	r28, 0x0b	; 11
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	bf 90       	pop	r11
 81e:	af 90       	pop	r10
 820:	9f 90       	pop	r9
 822:	8f 90       	pop	r8
 824:	7f 90       	pop	r7
 826:	6f 90       	pop	r6
 828:	5f 90       	pop	r5
 82a:	4f 90       	pop	r4
 82c:	3f 90       	pop	r3
 82e:	2f 90       	pop	r2
 830:	08 95       	ret

00000832 <strnlen_P>:
 832:	fc 01       	movw	r30, r24
 834:	05 90       	lpm	r0, Z+
 836:	61 50       	subi	r22, 0x01	; 1
 838:	70 40       	sbci	r23, 0x00	; 0
 83a:	01 10       	cpse	r0, r1
 83c:	d8 f7       	brcc	.-10     	; 0x834 <strnlen_P+0x2>
 83e:	80 95       	com	r24
 840:	90 95       	com	r25
 842:	8e 0f       	add	r24, r30
 844:	9f 1f       	adc	r25, r31
 846:	08 95       	ret

00000848 <strnlen>:
 848:	fc 01       	movw	r30, r24
 84a:	61 50       	subi	r22, 0x01	; 1
 84c:	70 40       	sbci	r23, 0x00	; 0
 84e:	01 90       	ld	r0, Z+
 850:	01 10       	cpse	r0, r1
 852:	d8 f7       	brcc	.-10     	; 0x84a <strnlen+0x2>
 854:	80 95       	com	r24
 856:	90 95       	com	r25
 858:	8e 0f       	add	r24, r30
 85a:	9f 1f       	adc	r25, r31
 85c:	08 95       	ret

0000085e <fputc>:
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	fb 01       	movw	r30, r22
 868:	23 81       	ldd	r18, Z+3	; 0x03
 86a:	21 fd       	sbrc	r18, 1
 86c:	03 c0       	rjmp	.+6      	; 0x874 <fputc+0x16>
 86e:	8f ef       	ldi	r24, 0xFF	; 255
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	2c c0       	rjmp	.+88     	; 0x8cc <fputc+0x6e>
 874:	22 ff       	sbrs	r18, 2
 876:	16 c0       	rjmp	.+44     	; 0x8a4 <fputc+0x46>
 878:	46 81       	ldd	r20, Z+6	; 0x06
 87a:	57 81       	ldd	r21, Z+7	; 0x07
 87c:	24 81       	ldd	r18, Z+4	; 0x04
 87e:	35 81       	ldd	r19, Z+5	; 0x05
 880:	42 17       	cp	r20, r18
 882:	53 07       	cpc	r21, r19
 884:	44 f4       	brge	.+16     	; 0x896 <fputc+0x38>
 886:	a0 81       	ld	r26, Z
 888:	b1 81       	ldd	r27, Z+1	; 0x01
 88a:	9d 01       	movw	r18, r26
 88c:	2f 5f       	subi	r18, 0xFF	; 255
 88e:	3f 4f       	sbci	r19, 0xFF	; 255
 890:	31 83       	std	Z+1, r19	; 0x01
 892:	20 83       	st	Z, r18
 894:	8c 93       	st	X, r24
 896:	26 81       	ldd	r18, Z+6	; 0x06
 898:	37 81       	ldd	r19, Z+7	; 0x07
 89a:	2f 5f       	subi	r18, 0xFF	; 255
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	37 83       	std	Z+7, r19	; 0x07
 8a0:	26 83       	std	Z+6, r18	; 0x06
 8a2:	14 c0       	rjmp	.+40     	; 0x8cc <fputc+0x6e>
 8a4:	8b 01       	movw	r16, r22
 8a6:	ec 01       	movw	r28, r24
 8a8:	fb 01       	movw	r30, r22
 8aa:	00 84       	ldd	r0, Z+8	; 0x08
 8ac:	f1 85       	ldd	r31, Z+9	; 0x09
 8ae:	e0 2d       	mov	r30, r0
 8b0:	09 95       	icall
 8b2:	89 2b       	or	r24, r25
 8b4:	e1 f6       	brne	.-72     	; 0x86e <fputc+0x10>
 8b6:	d8 01       	movw	r26, r16
 8b8:	16 96       	adiw	r26, 0x06	; 6
 8ba:	8d 91       	ld	r24, X+
 8bc:	9c 91       	ld	r25, X
 8be:	17 97       	sbiw	r26, 0x07	; 7
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	17 96       	adiw	r26, 0x07	; 7
 8c4:	9c 93       	st	X, r25
 8c6:	8e 93       	st	-X, r24
 8c8:	16 97       	sbiw	r26, 0x06	; 6
 8ca:	ce 01       	movw	r24, r28
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	1f 91       	pop	r17
 8d2:	0f 91       	pop	r16
 8d4:	08 95       	ret

000008d6 <__ultoa_invert>:
 8d6:	fa 01       	movw	r30, r20
 8d8:	aa 27       	eor	r26, r26
 8da:	28 30       	cpi	r18, 0x08	; 8
 8dc:	51 f1       	breq	.+84     	; 0x932 <__ultoa_invert+0x5c>
 8de:	20 31       	cpi	r18, 0x10	; 16
 8e0:	81 f1       	breq	.+96     	; 0x942 <__ultoa_invert+0x6c>
 8e2:	e8 94       	clt
 8e4:	6f 93       	push	r22
 8e6:	6e 7f       	andi	r22, 0xFE	; 254
 8e8:	6e 5f       	subi	r22, 0xFE	; 254
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	af 4f       	sbci	r26, 0xFF	; 255
 8f2:	b1 e0       	ldi	r27, 0x01	; 1
 8f4:	3e d0       	rcall	.+124    	; 0x972 <__ultoa_invert+0x9c>
 8f6:	b4 e0       	ldi	r27, 0x04	; 4
 8f8:	3c d0       	rcall	.+120    	; 0x972 <__ultoa_invert+0x9c>
 8fa:	67 0f       	add	r22, r23
 8fc:	78 1f       	adc	r23, r24
 8fe:	89 1f       	adc	r24, r25
 900:	9a 1f       	adc	r25, r26
 902:	a1 1d       	adc	r26, r1
 904:	68 0f       	add	r22, r24
 906:	79 1f       	adc	r23, r25
 908:	8a 1f       	adc	r24, r26
 90a:	91 1d       	adc	r25, r1
 90c:	a1 1d       	adc	r26, r1
 90e:	6a 0f       	add	r22, r26
 910:	71 1d       	adc	r23, r1
 912:	81 1d       	adc	r24, r1
 914:	91 1d       	adc	r25, r1
 916:	a1 1d       	adc	r26, r1
 918:	20 d0       	rcall	.+64     	; 0x95a <__ultoa_invert+0x84>
 91a:	09 f4       	brne	.+2      	; 0x91e <__ultoa_invert+0x48>
 91c:	68 94       	set
 91e:	3f 91       	pop	r19
 920:	2a e0       	ldi	r18, 0x0A	; 10
 922:	26 9f       	mul	r18, r22
 924:	11 24       	eor	r1, r1
 926:	30 19       	sub	r19, r0
 928:	30 5d       	subi	r19, 0xD0	; 208
 92a:	31 93       	st	Z+, r19
 92c:	de f6       	brtc	.-74     	; 0x8e4 <__ultoa_invert+0xe>
 92e:	cf 01       	movw	r24, r30
 930:	08 95       	ret
 932:	46 2f       	mov	r20, r22
 934:	47 70       	andi	r20, 0x07	; 7
 936:	40 5d       	subi	r20, 0xD0	; 208
 938:	41 93       	st	Z+, r20
 93a:	b3 e0       	ldi	r27, 0x03	; 3
 93c:	0f d0       	rcall	.+30     	; 0x95c <__ultoa_invert+0x86>
 93e:	c9 f7       	brne	.-14     	; 0x932 <__ultoa_invert+0x5c>
 940:	f6 cf       	rjmp	.-20     	; 0x92e <__ultoa_invert+0x58>
 942:	46 2f       	mov	r20, r22
 944:	4f 70       	andi	r20, 0x0F	; 15
 946:	40 5d       	subi	r20, 0xD0	; 208
 948:	4a 33       	cpi	r20, 0x3A	; 58
 94a:	18 f0       	brcs	.+6      	; 0x952 <__ultoa_invert+0x7c>
 94c:	49 5d       	subi	r20, 0xD9	; 217
 94e:	31 fd       	sbrc	r19, 1
 950:	40 52       	subi	r20, 0x20	; 32
 952:	41 93       	st	Z+, r20
 954:	02 d0       	rcall	.+4      	; 0x95a <__ultoa_invert+0x84>
 956:	a9 f7       	brne	.-22     	; 0x942 <__ultoa_invert+0x6c>
 958:	ea cf       	rjmp	.-44     	; 0x92e <__ultoa_invert+0x58>
 95a:	b4 e0       	ldi	r27, 0x04	; 4
 95c:	a6 95       	lsr	r26
 95e:	97 95       	ror	r25
 960:	87 95       	ror	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	ba 95       	dec	r27
 968:	c9 f7       	brne	.-14     	; 0x95c <__ultoa_invert+0x86>
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	61 05       	cpc	r22, r1
 96e:	71 05       	cpc	r23, r1
 970:	08 95       	ret
 972:	9b 01       	movw	r18, r22
 974:	ac 01       	movw	r20, r24
 976:	0a 2e       	mov	r0, r26
 978:	06 94       	lsr	r0
 97a:	57 95       	ror	r21
 97c:	47 95       	ror	r20
 97e:	37 95       	ror	r19
 980:	27 95       	ror	r18
 982:	ba 95       	dec	r27
 984:	c9 f7       	brne	.-14     	; 0x978 <__ultoa_invert+0xa2>
 986:	62 0f       	add	r22, r18
 988:	73 1f       	adc	r23, r19
 98a:	84 1f       	adc	r24, r20
 98c:	95 1f       	adc	r25, r21
 98e:	a0 1d       	adc	r26, r0
 990:	08 95       	ret

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
