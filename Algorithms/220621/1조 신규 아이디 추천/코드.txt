#include <string>
#include <vector>

using namespace std;

string solution(string new_id) {
    
    string Special_char = "~!@#$%^&*()=+[{]}:?,<>/";

    //1단계
    for(int i = 0; i < new_id.length(); i++) {
        if ((int)new_id[i] < 91 && (int)new_id[i] > 64) {
            new_id[i] += 32;
        }
    }

    //2단계
    for(int i = 0; i < new_id.length(); i++) {
        for(int j = 0; j < Special_char.length(); j++) {
            if (new_id[i] == Special_char[j]) {
                new_id.erase(new_id.begin() + i);
                i--;
            }
        }
    }

    //3단계
    /*
    for(int i = 0; i < new_id.length(); i++) {
        if (new_id[i] == '.' && new_id[i+1] == '.') {
            new_id.erase(new_id.begin() + i); 
            i--;
        }
    }
    */
    for(int i = 1; i < new_id.size(); i++) {
        if (new_id.at(i) == '.' && new_id.at(i-1) == '.') {
            new_id.erase(new_id.begin() + i); 
            i--;
        }
    }

    //4단계
    if (new_id.front() == '.')
        new_id.erase(new_id.begin());  
    if (new_id.back() == '.')
        new_id.erase(new_id.end() - 1);

    //5단계
    if (new_id.length() == 0)
        new_id.push_back('a');

    //6단계
    if (new_id.length() >= 16)
        new_id.erase(new_id.begin() + 15, new_id.end());
    if (new_id.back() == '.')
        new_id.erase(new_id.end() - 1);

    //7단계
    for(int i = 0; i < new_id.length(); i++) {
        if (new_id.length() <= 2)
            new_id.push_back(new_id.back());
    }

    string answer = new_id;
    return answer;
}